<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Êìç‰ΩúÁ≥ªÁªüÁ¨îËÆ∞</title>
    <url>/2022/10/11/cao-zuo-xi-tong-bi-ji/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e1721aa51aa36ea941f06790eb41e43851c6b74a6657f3abc25d2769ff63e21c">da2f181317e2e095e4f39e267580458ed8b355c01e8844ece071f241d9cfc07bb2605278f6b7503b803dd0639c5768721d03b176f9d2fc6ad4edf255ab31b14c5f7fedafa828913b0d1103331d15b987d05676e1538aec970777bbe7dc3a7c56e5f2c492a95b903ac5e53cd2c5419263af9ff5ede866f6d950d7d25b03299c8a5ccedcf3f210258cc7c4b6a53c1051da8f77c87aadd2329899d6441b79ca4b10c9774b14c74840985ea4aa4530fe22dcb8c7bd99cd9d8c071ebe465a0c0d1df4f28d093bc2b940eaeb0d277bfafc3110399630dc8987c4194a026763d50e3b4d95e471fa66cfc3b1a42864b29adccbebecda3877d61b2f07aec9c7bb63b28526c102918d010f5708ca5cf84f051b8d13431756bab36d566c94ce92ae31ab25daa4a96f6824d0fce2ca90ec7ac90f68942a1f659ca1ce73464cc3c4bdca411d5138ad368ce50611c6330cfb80bb2f455109ee5426a0468c818b9b82abafa9d6a4bc168ba942d5d4ca56b1c8b0bacf917b9e1f5e475fbf68dd957bec1921726523b08c78637eff4ab5339564e5530d500993f8f0541a110047dd269ebf54f6b4d06a34f1bb7fd400d33ac379afafa1152abd44e59646ba504b7334c630d7a9d70ea339d9e28ba5dd7099be52edef6070b054ed6e4b093f0710212c469c20c65d3197e8079aa7e6c23691b6ca5bbe9c9e4411ee1bc23f7e4325b7205a478828a497f047f44f6c0b50181fcd5eef64b9161557c5ce93f07d2a719ef937182a77c948ad4eaece94334adc51094796ebc75cf31912c495dabbb3d2df694d9af4fbfa5e876111ee6159cbab1e0d34726091e183de04ea9d8c5ce615026420356c66fb1d96c7f90a82d36ef9035c713089e3a8fe3871b410494deed4e938e61025db1ab43e01dd3180ff24095d933f8b02501c22d839339dff012cce4ba22eb71fe3c94b5f148fd6cbe6d7c9bbbcea64717ecb18c59bcab51fc75c2570105a1874f99b9f3f201a91101a0ade58990005be29f29052526f3a26a8864cf2577fbf99bd2ff3a7e25e732a14f393ff3d37cde7749853fe67a5aeead8e424d41d3910cbe207f4c368ca007d26283b7d4bde86d9fc935d62b07e1b5b1969c7a487c748eb9ee7aad2f9a591d45e95df6e7b50bbdc2e089102eee0a1480eaf04725aaa4c1979dfe2e0ecd5654caaf4b8bed05961a2b145efb30a3fa83b9ab8067c3a193c2e337f306a9ada3f9b326377afcbfd8879ebd1953e79869d8d99f28321f7781a57c5b14717e455c48540c35b21579957fe32571596aaad5905c573167eb57302a48f32da1ab49e9fa4e2a2b70f841fd6daafbb83df4bdadd0231aed9b2030b1308386fe36e6e0117825957480ff031328ab0264554a77094b4cb8520819c367b7c2d19ee445da230ea632e2629d11fcab42901c8ea05a3d73d0f87d63f119810af5b6853d09e378a62dc02daf87e496b801bf21298938d42d8155632fde5f656be1da865c9e3360e1fcd8a9d94551be82eed228e1db537ab43d331369f635bb5a571bf12e95d8cc2893639c5f3fefca08e6fb1e4adf5b981a19124c2783e249818a3604ef678e347e1ea02f126f511c05fef1825240fc72f180bb34cc6c4a576445d05cbfdae2c192688db26130d6f8679aac8478c0952a57aa7a30365749536ea5e5b8d04548d04ef4303dedb09c84ef23fba60932070eebbf271d55d0167844de0c491e64077da66050bac46d2b253babf74b6f00798d0516ee19eaff1230addd51112c2a1e1ffa794fca1059680c777af604f4fb4d2b94af9206142e5d076e4ff239b3cf992246cb01f709ab7946e4b9a26aeb4369a7fc29ae44e01d2b751344148aaa6a0fb68a0c6100ac6a6aee7840582c8bc2842314b77b777dcf1596ef3047547e3ad675ea18684509ec75bc37b7ffaa28af743ec29ab4e87f834d1472928f7190ef0bdf4cec0778e52e8bb66d1648c2bb780ba8e405ff9764cc5423d6dd6c9856f70c54d9f854b31ebafae8f65dacac9263211be72627d0b8410a660ea1f194610f2b3ade3d6a2f31671aca95a4df48de05c637fdfa32919cf5ed2336fb1d6995f2aab7f9754cf5d6ad4320ae997a0f914a8c4bf7a1ef277b136c58e03b3fadf171f44c5a15d0d9a6c6197c5e28e93870f5a9df3616589031de14d1b816021cacd252e3586809ed3034459cc3aeeb22a56ef1d21247c59008cd57376d0d361ae6631ee205d1d595a971ac876ee5c6a17c37a853d80269814c8e244e9ffa9422ca8bf875e2eb2167c45056be8a9d7c6300d664b2fc5174c262a15fb7573cd6fbd29d1cd95a6a9e7703761981a03fb2689a97b13e6008590b2ddfde1572aa934deab03aba429fd31e7e6bd438e4af247dac0c442c167a448fa7f7d7aa68c1029956357da1e11e95f4df6f8a84294a19294efd06209ca3e95b9d00bf2d50291932aaacf9ee66b0b5ae529e44538c7b8eee61cee5874c7c637d69daf57a6f352ffd250e1c597618bc4a570db9bfdd09b74a91780eea7c2198e615cb2f9cefd7eb8a3696ab968167a7b629ae8c347f91a0fb03cd7c4100371e372938b033ce6e2733d8c17ab9822a890c37ca9be8345ae1e669002d7c7f033118858577906f5b33697178658de877cf20e59518f8b70de8b68048325a865e56c846648acec03dbedcad79720109bd2b8dd27e4eeb7428497c8e5f2e47d3cc985cb2066a5732ba59769c76a81ab4586a91a761cc540a631950cf8c234285adb0d9ddfc677effa62754bcb0235b5f2accbfb9bc19dee7e51bc1d2464e9a060b35b9db2e843ad489a229a4183c9c1af95f370d30c3cdf1c4ad0ed990b2ab3c7ad5f8f91af49dbce7f28193c5d9a4050c4f7d07a69676329d30524</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">ËØ∑ËæìÂÖ•ÈÇÄËØ∑Á†Å</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1932. Merge BSTs to Create Single BST</title>
    <url>/2022/10/09/1932.merge-bsts-to-create-single-bst/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="analyse">Analyse</h2>
<div class="note danger simple"><p>This question should be a medium question üòÇ</p>
</div>
<p>This question doesn‚Äôt request any profound algorithms but does need to notice many details. Let‚Äôs build this tree step by step.<br>
First, we need to find the tree‚Äôs root. And we can guarantee that the root node must exists only once. And it must be the only node exists only one time.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="keyword">int</span>, TreeNode *&gt; val2Tree;</span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; val2count;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;t : trees)&#123;</span><br><span class="line">	val2Tree[t-&gt;val] = t;</span><br><span class="line">	++val2count[t-&gt;val];</span><br><span class="line">	<span class="comment">//to avoid dereferencing nullptr</span></span><br><span class="line">	++val2count[t-&gt;left ? t-&gt;left-&gt;val : <span class="number">0</span>];</span><br><span class="line">	++val2count[t-&gt;right ? t-&gt;right-&gt;val : <span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we could build the Tree from the root node</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;t : trees)&#123;</span><br><span class="line">	<span class="keyword">if</span>(val2count[t-&gt;val] == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//details</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//If there is no valid root node, we can&#x27;t build a BST</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure>
<p>Now, we just need to link each node from top to bottom.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TreeLink</span><span class="params">(TreeNode *Tree, map&lt;<span class="keyword">int</span>, TreeNode *&gt; &amp;val2Tree, <span class="keyword">int</span> minLeft = INT_MIN, <span class="keyword">int</span> maxRight = INT_MAX)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// If this node has no child node, it is obviously valid</span></span><br><span class="line">	<span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="comment">// We need to judge if this node satisfies the value scope of BST</span></span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;val &lt;= minLeft || Tree-&gt;val &gt;= maxRight)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">// If Tree has no child(where Tree-&gt;left == nullptr == Tree-&gt;right),</span></span><br><span class="line">	<span class="comment">// find the node with the same value and link them.</span></span><br><span class="line">	<span class="keyword">if</span> (Tree-&gt;left == Tree-&gt;right) &#123;</span><br><span class="line">		<span class="keyword">auto</span> temp = val2Tree.<span class="built_in">find</span>(Tree-&gt;val);</span><br><span class="line">		<span class="comment">// If the node exists and be different from Tree</span></span><br><span class="line">		<span class="keyword">if</span> (temp != val2Tree.<span class="built_in">end</span>() &amp;&amp; Tree != temp-&gt;second) &#123;</span><br><span class="line">			Tree-&gt;left = temp-&gt;second-&gt;left;</span><br><span class="line">			Tree-&gt;right = temp-&gt;second-&gt;right;</span><br><span class="line">			<span class="comment">// after linking, we needn&#x27;t to notice this node anymore</span></span><br><span class="line">			val2Tree.<span class="built_in">erase</span>(temp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iteration from top to bottom.</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* we need to adjust the child node&#x27;s scope, where its left child&#x27;s</span></span><br><span class="line"><span class="comment">	* max value shouldn&#x27;t be more than its value. And vice versa</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">TreeLink</span>(Tree-&gt;left, val2Tree, minLeft, Tree-&gt;val) &amp;&amp;</span><br><span class="line">		   <span class="built_in">TreeLink</span>(Tree-&gt;right, val2Tree, Tree-&gt;val, maxRight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="whole-solution">Whole Solution</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">TreeLink</span><span class="params">(TreeNode *Tree, map&lt;<span class="keyword">int</span>, TreeNode *&gt; &amp;val2Tree, <span class="keyword">int</span> minLeft = INT_MIN, <span class="keyword">int</span> maxRight = INT_MAX)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If this node has no child node, it is obviously valid</span></span><br><span class="line">        <span class="keyword">if</span> (Tree == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// We need to judge if this node satisfies the value scope of BST</span></span><br><span class="line">        <span class="keyword">if</span> (Tree-&gt;val &lt;= minLeft || Tree-&gt;val &gt;= maxRight)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// If Tree has no child(where Tree-&gt;left == nullptr == Tree-&gt;right),</span></span><br><span class="line">        <span class="comment">// find the node with the same value and link them.</span></span><br><span class="line">        <span class="keyword">if</span> (Tree-&gt;left == Tree-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">auto</span> temp = val2Tree.<span class="built_in">find</span>(Tree-&gt;val);</span><br><span class="line">            <span class="comment">// If the node exists and be different from Tree</span></span><br><span class="line">            <span class="keyword">if</span> (temp != val2Tree.<span class="built_in">end</span>() &amp;&amp; Tree != temp-&gt;second) &#123;</span><br><span class="line">                Tree-&gt;left = temp-&gt;second-&gt;left;</span><br><span class="line">                Tree-&gt;right = temp-&gt;second-&gt;right;</span><br><span class="line">                <span class="comment">// after linking, we needn&#x27;t to notice this node anymore</span></span><br><span class="line">                val2Tree.<span class="built_in">erase</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// iteration from top to bottom.</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * we need to adjust the child node&#x27;s scope, where its left child&#x27;s</span></span><br><span class="line"><span class="comment">        * max value shouldn&#x27;t be more than its value. And vice versa</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">TreeLink</span>(Tree-&gt;left, val2Tree, minLeft, Tree-&gt;val) &amp;&amp;</span><br><span class="line">               <span class="built_in">TreeLink</span>(Tree-&gt;right, val2Tree, Tree-&gt;val, maxRight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode *<span class="title">canMerge</span><span class="params">(vector&lt;TreeNode *&gt; &amp;trees)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, TreeNode *&gt; val2Tree;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; val2count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t: trees) &#123;</span><br><span class="line">            val2Tree[t-&gt;val] = t;</span><br><span class="line">            ++val2count[t-&gt;val];</span><br><span class="line">            <span class="comment">//to avoid dereferencing nullptr</span></span><br><span class="line">            ++val2count[t-&gt;left ? t-&gt;left-&gt;val : <span class="number">0</span>];</span><br><span class="line">            ++val2count[t-&gt;right ? t-&gt;right-&gt;val : <span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t: trees) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val2count[t-&gt;val] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * If val2Tree&#x27;s size dosen&#x27;t equal to 1, there must be some </span></span><br><span class="line"><span class="comment">                * danling node which exists only once too.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">TreeLink</span>(t, val2Tree) &amp;&amp; val2Tree.<span class="built_in">size</span>() == <span class="number">1</span> ? t : <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//If there is no valid root node, we can&#x27;t build a BST</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="reference">Reference</h2>
<p><a href="https://leetcode.com/problems/merge-bsts-to-create-single-bst/">1932.¬†Merge BSTs to Create Single BST</a></p>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>LeetCodeÁ¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>ÂéÜÂë®ËÆ∞(2022-10-03 - 2022-10-09)</title>
    <url>/2022/10/07/2022-w40/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Êúâ‰∏§Âë®Ê≤°ÊúâÂèëÂéÜÂë®ËÆ∞‰∫Ü„ÄÇ‰∏ÄÂàôÊòØÁî±‰∫éÂ≠¶‰∏öÂéãÂäõÔºåÊöÇ‰∏îÂ∞ÜÂéÜÂë®ËÆ∞ÁöÑÊó∂Èó¥Èó¥ÈöîÊõ¥Êîπ‰∏∫‰∏§Âë®‰∏ÄÊ¨°„ÄÇËÄåÁ¨¨‰∫åÂë®ÂèàÊòØÊ≥ïÂÆöÂÅáÊó•Ôºå‰∫éÊòØÊª°ÊÄÄÁùÄÁΩ™ÊÅ∂ÊÑüÂíåÊë∏È±ºÁöÑÂøÉÊÉÖÂèàÈ∏Ω‰∫Ü‰∏ÄÂë®„ÄÇÂêç‰πâ‰∏äÁöÑÁêÜÁî±Â¶Ç‰∏äÔºå‰∏çËøáÊàëÁé∞Âú®ÊÑüËßâÔºåËøôÁßçÊØèÂë®Êâæ‰∏™Êó∂Èó¥Êù•ÂÜô‰ΩúÊñáÁöÑ‰π†ÊÉØÊúâÁÇπÊ≤°ÊúâÊÑè‰πâ„ÄÇÊé•‰∏ãÊù•ÔºåÊàëÊÉ≥Êàë‰ºöÊõ¥ÂÄæÂêë‰∫éÂ∞ÜÊØèÊó•ÊùÇËÆ∞Êï¥ÂêàËøõÊàëÁöÑÂë®ËÆ∞‰∏≠„ÄÇËøôÊàñËÆ∏‰ºöÊõ¥ÈùíÊò•Â∫üËØùÊñáÂ≠¶ÔºåÊàñËÆ∏‰πü‰ºöÊõ¥Ë¥¥ËøëÂë®ËÆ∞Êú¨Ë∫´ÁöÑÊÑè‰πâ„ÄÇ</p>
<h2 id="2022-10-07">2022-10-07</h2>
<h3 id="ÊàëÁº∫Â§±ÁöÑÊàêÈïøÂë¢Ôºü">ÊàëÁº∫Â§±ÁöÑÊàêÈïøÂë¢Ôºü</h3>
<p>9Êúà27Êó•Á¥†Êù•ÊòØËÄÉÁ†î‰∫∫Á†¥Â§ßÈò≤ÁöÑÊó•Â≠ê„ÄÇËÆ∏Â§ö‰∫∫‰ºöÂú®ËøôÂ§©Â§±ÂéªÊÇÑÊÇÑ‰øùÁ†îÁöÑÁ†îÂèãÔºåÊõ¥ÊÉ®ÁöÑÊòØÂ§±ÂéªÂéªÂêë‰∏ç‰∏ÄËá¥ËÄå‰∏çÂæó‰∏çÂàÜÈÅìÊâ¨Èï≥ÁöÑÂØπË±°„ÄÇÊõ¥Â§öÁöÑ‰∫∫Á†¥Èò≤ÔºåÊàëÊÉ≥ÊòØÂú®Ëøô‰∏ÄÂ§©ÔºåÁÖßËßÅ‰∫ÜËá™Â∑±Á¢åÁ¢åÊó†‰∏∫ÁöÑ‰∏âÂπ¥Êó∂ÂÖâ„ÄÇËá≥Â∞ëÊàëÊòØÂ¶ÇÊ≠§„ÄÇ‰∏çËøáÊàëÂΩìÊó∂Âπ∂Ê≤°ÊúâÂæàemotionalÔºåËÄåÊòØÊå®‰∏™Ëµû‰∫ÜËøáÂéª„ÄÇÊàëÂíåÊúãÂèãÂúà/Á©∫Èó¥‰∏≠ÁöÑ‰∏çÂ∞ë‰∫∫Êúâ‰∫§ÈôÖÔºå‰ªñ‰ª¨ÁöÑÁ°ÆÂÄºÂæóÊã•ÊúâËøôÊ†∑ÁöÑÊú∫‰ºö„ÄÇ<br>
‚ÄúÊòîÊó•ÈæåÈæä‰∏çË∂≥Â§∏Ôºå‰ªäÊúùÊîæËç°ÊÄùÊó†Ê∂Ø„ÄÇ‚ÄùÁúãÁùÄÁ©∫Èó¥ÈáåÁöÑÂá†‰∏™Â§ß‰Ω¨‰ª¨‰øùÁ†îÊ∏ÖÂåó‰∫¶ÊàñÊòØÁî≥Âà∞QS TOP30ÔºåËøòÊòØÂøç‰∏ç‰ΩèÊúâ‰∫õÈªØÁÑ∂„ÄÇËøΩÊúõÊàëÁöÑËøáÂéªÂõõÂπ¥ÁîüÊ¥ªÔºåÈô§‰∫Ü‰∫õËÆ∏Êúâ‰∫õÂÄºÂæóÁ∫™ÂøµÁöÑÁÇπÁºÄÔºåÂíåÂÅ∂Â∞îÊøÄËµ∑ÁöÑÂ≠¶‰π†ÁÉ≠ÊÉÖÔºåÊó∂Èó¥Ë°®‰∏äÂâ©‰∏ãÁöÑÂ§ßÁâáÁôΩËå´Ëå´ÁöÑÁ©∫Ê¥ûÔºå‰ºº‰πéÂú®ËØ¢ÈóÆÊàëÈÄùÂéªÁöÑÊó∂Èó¥Á©∂Á´üËä±Âú®‰∫Ü‰ªÄ‰πà‰∏äÈù¢„ÄÇ<br>
Êú¨ÊñáÊó†ÊÑèËøΩÂøÜËøáÂéªÁöÑÁîüÊ¥ªÔºå‰∏ÄÊù•Âπ∂Ê≤°Êúâ‰ªÄ‰πàÊÑè‰πâÔºå‰∫åÊù•Êàë‰πü‰∏çÊÑøÂÜô‰∏Ä‰∫õÈùíÊò•Â∫üËØùÊñáÂ≠¶„ÄÇÊú¨ÁßëÂ≠¶‰∏öÁöÑËçíÂ∫üÂÖ∂ÂÆûÂú®ÊàëÊÑèÊñô‰πã‰∏≠„ÄÇÊØïÁ´üËá™Â∑±Á°ÆÂÆû‰∏çÂñúÊ¨¢ÊàëÁöÑÊú¨Áßë‰∏ì‰∏öÔºåÂç∑Ëøô‰∏™Ëøò‰∏çÂ¶ÇÂÜôÂÜôhello world„ÄÇÂè™ÊòØÁ°ÆÂÆûËßâÂæóËøáÂéªÁîüÊ¥ª‰∏≠Êúâ‰∫õÈÅóÊÜæÁöÑ‰∫ãÊÉÖÂÄºÂæóÂèçÊÄù‰∏Ä‰∏ã„ÄÇ<br>
È¶ñÂÖàÊòØÊ≤°ÊúâÊâæÂà∞ÂèØ‰ª•ÈïøÊúüÂõ∫ÂÆö‰∫§ÊµÅÁöÑÊúãÂèã„ÄÇÊàëÊó•Â∏∏ÁîüÊ¥ª‰∏≠ÂÄíÂπ∂‰∏çÁº∫Â∞ëÊúãÂèãÔºåÊÄªËÉΩÊâæÂà∞‰∏ÄËµ∑ÁúãÁîµÂΩ±„ÄÅÂà∑Â§úÔºåÊàñËÄÖemoÂêé‰∏ÄËµ∑Ê∑±Â§úÈÄõÊ†°Âõ≠ÁöÑÊúãÂèãÔºõÂÜçËÄÖÊàëËøô‰∫∫ÊØîËæÉÂÜÖÂêëÔºåÁã¨Ëá™‰∏Ä‰∫∫Âπ∂‰∏ç‰ºöÂ∏¶ÁªôÊàë‰ªÄ‰πàÁ≤æÁ•ûÂÜÖËÄó„ÄÇÊâÄ‰ª•Êàë‰∫§ÊúãÂèãÁöÑÂÄæÂêëÁ¥†Êù•ÊòØÊúãÂèãË¥µÁ≤æ‰∏çË¥µÂ§ö„ÄÇ‰ΩÜÊàë‰∏ÄÁõ¥È¢áÊÉ≥Êâæ‰∏Ä‰∏™ÊàñÊï∞‰∏™ÂèØ‰ª•‰∫§ÊµÅÈÇ£‰∫õÂøÉÈáåÂÜíÂá∫ÁöÑÊÉ≥Ê≥ïÔºåÊàñ‰∏ÄËµ∑Á†îËØª‰∏ÄÊú¨‰π¶ÁöÑÊúãÂèã„ÄÇÂÖ∂ÂÆûÊàëÈ¢áÈÅáÂà∞‰∫ÜÂá†‰ΩçÂèØ‰ª•Â¶ÇÊ≠§ÁöÑÊúãÂèãÔºåÁîöËá≥Ëá™Â∑±ËøòÂú®ÊúãÂèãÂúàÂäûËøáÂá†Ê¨°ÊúâÂ§¥Êó†Â∞æÁöÑËØª‰π¶‰ºöÊ¥ªÂä®ÔºåÊâæÂà∞‰∫ÜÂá†‰ΩçÂæàËÅäÂæóÊù•ÁöÑ‰π¶Âèã„ÄÇÂè™ÊòØÊàëÁã¨Êù•Áã¨ÂæÄÁöÑÊÄßÊ†ºÔºåÂæÄÂæÄÊ≤°Âá†Ê¨°Â∞±‰∫∫Ëµ∞Ëå∂Âáâ‰∫Ü„ÄÇ<br>
ÂÖ∂Ê¨°ÊòØÔºåÊàëÁº∫‰πèÂØπÁîüÊ¥ªÁöÑËÆ∞ÂΩï„ÄÇËøô‰∏ç‰ªÖÈÄ†Êàê‰∫ÜÂâçÊñá‰∏≠ÔºåÊàëËøΩÂøÜËøáÂéªÊó∂Â§ßÁâáÁöÑËÆ∞ÂøÜÁ©∫ÁôΩÔºõÊõ¥Á≥üÁ≥ïÁöÑÊòØÔºåËÆ∏Â§öÊúâ‰ª∑ÂÄºÁöÑËøáÂéªÔºåÊàëÂØπÂÆÉ‰ª¨ÁöÑËÆ∞ÂøÜÂè™Ââ©‰∏ãÂá†‰∏™ËãçÁôΩÁöÑËØçËØ≠‚Äî‚ÄîÂèÇ‰∏é‰∫∫„ÄÅËØùÈ¢ò„ÄÅ‰ªÄ‰πà‰∫ã‰ª∂‚Äî‚Äî‰∫Ü„ÄÇÊõæÁªèÂíå‰∏Ä‰∫õÈùûÂ∏∏Ê¨£ËµèÁöÑ‰∫∫ÁöÑÂØπËØùÔºåÁî±‰∫éÊàëÁ≥üÁ≥ïËÄåÂèØÁ¨ëÁöÑÂÇ≤ÊÖ¢ÔºåÊúÄÁªàÊÄªÊòØÂèòÊàê‰∏ÄÂú∫Ëæ©ËÆ∫Ëµõ„ÄÇËÄåÊ≤°ÊúâËÆ∞ÂΩïÁöÑÊÉÖÂÜµ‰∏ãÔºåËøôÁßç‰π†ÊÉØ‰ºöÊõ¥Âä†Á≥üÁ≥ïÔºåÂõ†‰∏∫Âú®Ëæ©ËÆ∫‰∏≠Ôºå‰Ω†ÂæÄÂæÄÂè™ÊúâÁ´ãÂú∫ÂíåÊäÄÂ∑ßÔºåÊ≤°ÊúâËßÇÁÇπÂíå‰∫§ÊµÅ„ÄÇ‰∏ÄÂú∫Ëæ©ËÆ∫‰∏ãÊù•ÔºåÂá†‰πé‰∏ç‰ºöÂæóÂà∞‰ªÄ‰πàÂêØÂèë„ÄÇÂ¶ÇÊûúÊàëÊ≤°ÊúâÂú®Ë∞àËØùÂêéÂÜçÂéªÂèçÊÄùËøô‰∫õÂÄèÂøΩËÄåËøáÁöÑsparksÔºåÈÇ£ÂÆÉ‰ª¨Âè™ËÉΩÁ¶ªÊàëËÄåÂéª‰∫Ü„ÄÇËÆ∞ÂΩïÁîüÊ¥ªÔºåËøô‰πüÊòØÊàëÂºÄÂêØÂë®ËÆ∞ÁöÑÁêÜÁî±‰πã‰∏Ä„ÄÇ<br>
ÊúÄÂêéÔºåÊàëÂæàÈÅóÊÜæÊàëÊõæÁªèËæúË¥ü‰∫Ü‰∏çÂ∞ë‰∫∫ÁöÑÊúüÊúõ„ÄÇ‰∏Ä‰∏™È¢áÂÄºÂæóÊàëÂÜô‰∏ãÊù•ÁöÑÔºåÊòØÊüêÊ†°ÈòüÁöÑÈòüÈïø„ÄÇÂΩºÊó∂ÁöÑÊàëÈó≠Èó®ÈÄ†ËΩ¶ÔºåÂØπËÆ°ÁÆóÊú∫ÁßëÁè≠Â≠¶ÁîüÁöÑÂ≠¶‰π†Ê∞¥Âπ≥Âá†Êó†Ê¶ÇÂøµ„ÄÇÊÄÄÁùÄ‰∏ÄËÖîÂãáÊ∞îÊä•Âêç‰∫ÜÊüê‰∏™Ëé∑Â•ñ‰∏∞Á°ïÔºåËÉΩÂäõÂíåÊäÄÊúØÁßØÁ¥ØÈùûÂ∏∏Âº∫ÁöÑÊ†°Èòü„ÄÇÂá∫‰πéÊàëÂØπÊÑèÊñôÔºåÈÇ£‰ΩçÈòüÈïøÂØπÊàëÈ¢á‰∏∫Âô®Èáç„ÄÇ‰∏ç‰ªÖÂú®‰∏Ä‰ºóËÉΩÂäõÂæàÂº∫ÁöÑÁßëÁè≠Â≠¶Áîü‰∏≠ÈÄâÊã©‰∫ÜÊàëÔºåËøò‰∫§Áªô‰∫ÜÊàë‰∏Ä‰∏™ÂæàÊúâÊåëÊàòÊÄßÁöÑ‰ªªÂä°„ÄÇËÆ∞Âæó‰∏ÄÊ¨°Âíå‰ªñËÆ®ËÆ∫‰∏∫‰ªÄ‰πà‰ºöÈÄâÊã©ÊàëÊó∂Ôºå‰ªñÁ≠îÈÅìÔºö‚ÄúÈÇ£Â§©ÁöÑÈù¢ËØïËÆ©ÊàëÊÑüËßâ‰Ω†Êå∫ÁâπÂà´ÁöÑÔºå‰∏çÊòØÈÇ£Áßç‰ºöË∑üÁùÄÂ≠¶Ê†°ÂÆâÊéíËµ∞ÁöÑÂ≠¶Áîü„ÄÇÊ≠£Â•Ω‰Ω†Âú®Èù¢ËØï‰∏≠ËØ¥Ëá™Â∑±Áº∫‰πèÈ°πÁõÆÁªèÈ™åÔºåÂ∞±ÊÉ≥Â∏Æ‰Ω†‰∏Ä‰∏ã„ÄÇ‚ÄùËøôÁï™ËØù‰ª§ÊàëÈ¢á‰∏∫ÊÑüÂä®ÔºåÂú®ÁÅøËã•ÊòüËæ∞ÁöÑÊµôÂ§ß‰∫∫‰∏≠Ôºå‰∏çÂæó‰∏çÊâøÂèóÁùÄËá™Â∑±ÊõæÁªèÂÜ≥Á≠ñÂ§±ËØØÔºàÈÄâ‰∏ì‰∏öÂíåÂØπÁ´∫Èô¢‰ªçÁïôÊúâÊúÄÂêé‰∏Ä‰∏ùÊúüÊúõÔºåÊ≤°ÊúâËΩ¨‰∏ì‰∏öÔºâÁöÑÊÅ∂ÊûúÔºåÂíåËá™Â∑±Âπ∂‰∏çÂ•ΩÁúãÁöÑÁªºÂêàÊàêÁª©ÁªàÁ©∂ÊòØ‰∏Ä‰ª∂ËÆ©‰∫∫ÁóõËã¶ÁöÑ‰∫ãÊÉÖ„ÄÇËøô‰ΩçÈòüÈïøÁöÑËØùÁªô‰∫ÜÊàëÂæàÂ§öÂäõÈáè‚Äî‚ÄîÂèØÊÉúÈÇ£Êó∂ÁöÑÔºà‰πüËÆ∏ËøòÊúâÁé∞Âú®ÁöÑÔºâÊàë‰∏çÈÖç„ÄÇËØæ‰∏öÁöÑÂéãÂäõ„ÄÅËÄÉÁ†îÁöÑËßÑÂàíÂíåÊàëÁöÑÊÄ†ÊÉ∞„ÄÅËôöËç£„ÄÅËá™ÊàëÔºõËÆ©ÊàëÂßãÁªàÊú™ËÉΩÂüπÂÖªÂá∫Ë∂≥‰ª•Êé•ÂèóÈÇ£‰∏™‰ªªÂä°ÁöÑÊäÄÊúØÊ†à„ÄÇÊúÄÂêéÂÄüÁùÄÁñ´ÊÉÖÁöÑÁºòÊïÖÔºåÊó†Ê≥ïË∑®Ê†°Âå∫ÁöÑÊàëÂíåÈÇ£‰∏™ÂæàÊ£íÁöÑÂõ¢ÈòüÊñ≠‰∫ÜËÅîÁ≥ª„ÄÇÈÇ£‰ΩçÈòüÈïøÔºåÂØπÊàë‰∏ÄÂÆö‰πüÂæàÂ§±ÊúõÂêß„ÄÇ<br>
‰Ω†ÁúãÔºå life never gives anything for nothing, and that a price is always exacted for what fate bestows„ÄÇÊàëÁé∞Âú®ÁöÑÁóõËã¶ÔºåÊàëÁé∞Âú®Áò†ËñÑÁöÑÊäÄÊúØÊ†àÔºåÊàëÁº∫Â§±ÁöÑÈÄâÊã©ÊùÉÔºåÊó©Â∞±Âú®ËøáÂéª‰∏ÄÊ¨°Ê¨°ÂØπÊú∫‰ºöÁöÑËôöÊé∑‰∏≠Êäï‰∏ã‰∫ÜÁ≠πÁ†Å„ÄÇÂ¶Ç‰ªäËæìÂÖâÈªØÁÑ∂Á¶ªÂú∫„ÄÇ</p>
<details class="toggle"><summary class="toggle-button" style>ÊàëÂØπÊúãÂèãÁöÑÊúüËÆ∏</summary><div class="toggle-content"><p>ÊõæÁªèÂú®ÊúµÊúµ„ÄÅ98‰∏äÈÉΩÁúãËøáËøôÊ†∑ÁöÑË¥¥Â≠êÔºö‰∏Ä‰∏™ÂêåÂ≠¶Ëá™ËØ©È•±ËØªËØó‰π¶Êª°ËÖπÁªèÁ∫∂ÔºåÂç¥ËßâÂæóËá™Â∑±ÂßãÁªàÊâæ‰∏çÂà∞ÂèØ‰ª•‰∏ÄËµ∑‰∫§ÊµÅÁöÑ‰∫∫„ÄÇÂ∏åÊúõËá™Â∑±ËÉΩÊâæ‰∏Ä‰∏™ÂØπË±°ÔºåÂèØ‰ª•‰∫§ÊµÅËá™Â∑±ÂøÉ‰∏≠ÁöÑÈÇ£‰∫õÊÉäÊ∂õÈ™áÊµ™ÂíåÊãàËä±‰∏ÄÁ¨ë„ÄÇ<br>
Áî±‰∫é‰∏Ä‰ΩçÊúãÂèãÁöÑÂΩ±ÂìçÔºåÊàë‰∏ÄË¥ØËÆ§‰∏∫Ôºå‰º¥‰æ£Â∫îËØ•ÊòØÈõÜ‰∫íÁõ∏Áà±ÊÖï+‰∏âËßÇÁõ∏Âêà+ÂÆ°ÁæéÁõ∏Ëøë+ÂÖ±ÂêåÁà±Â•Ω/ÂøóË∂£ÁöÑ‰∏™‰Ωì„ÄÇÂ¶ÇÊûúÊâæ‰∏çÂà∞‰∏Ä‰∏™‰∫íÁõ∏Ê¨£ËµèÔºåËøõËÄåÂèØ‰ª•‰∫íÁõ∏ÂøçËÄêÁöÑ‰º¥‰æ£ÔºåÂ©öÂßªËøûÁà±ÊÉÖÈÉΩÊó†Ê≥ïÂüãËë¨ÔºåÂè™Â•ΩÂüãËë¨Êü¥Á±≥Ê≤πÁõêÈÖ±ÈÜãËå∂ÂíåÂèåÊñπÁöÑÈæÉÈæâÔºåÁ≠âÂ°´ÂüãÁâ©Ë∂ÖÂá∫‰∫ÜÊâøÂèóÁïåÈôêÔºåÂè™Â•ΩÁÇ∏Âá∫‰∏ÄÂú∞È∏°ÊØõ„ÄÇÊØïÁ´üÊ≠£ÂÄºÈùíÊò•ÊÇ∏Âä®ÔºåÂèàÊÄÄÁùÄÊª°ËÖπÁöÑÈó∑È™öÂíå‰∏≠‰∫åÔºåËá™ÁÑ∂‰ºöÂπªÊÉ≥‰∏Ä‰∏™Ê¢¶Â¢É‰∏≠‰∫∫Êù•ÊâøËΩΩËøô‰∫õÊ¢¶ÊÉ≥„ÄÇ<br>
ËøôÊúâÁÇπÂÉèÊàëÊúâ‰∏Ä‰∏™ÂæàÊúâÊâçÊÉÖÁöÑÂ•≥ÊÄßÊúãÂèã„ÄÇÂ•πÁúüÁöÑÂæà‰ºòÁßÄÔºåÈùûÂ∏∏Ëá™ÂæãÔºåÂ≠¶‰∏ö‰ºòÂºÇÁöÑÂêåÊó∂ÈÄöÁÜüÂõΩÂ≠¶„ÄÅ‰ºöÂºπÂè§Áê¥Ôºå‰∏ãÂõ¥Ê£ãÔºåÂÆûÂ±û‰∫∫Á±ªÈ´òË¥®ÈáèÂ•≥ÊÄß„ÄÇÁÑ∂ËÄåÁî±‰∫é‰∏Ä‰∫õÂ§ñÈÉ®ÂéüÂõ†È´òËÄÉÊú™ËÉΩËÄÉ‰∏≠ÁêÜÊÉ≥Â§ßÂ≠¶„ÄÇÂ•πÁöÑÊÉÖÂú∫ÊØîÊàëÂæóÊÑèËÆ∏Â§öÔºå‰ΩÜÂêåÊ†∑Êú™ËÉΩÊâæÂà∞Áß∞ÂøÉÁöÑÂØπË±°„ÄÇÊàëÊõæÊï∞Ê¨°Âê¨Â•πËÅäËµ∑Ëá™Â∑±ÁöÑÁî∑ÊúãÂèãÊàñËøΩÊ±ÇËÄÖÔºåÊÄªËßâÂæóÂØπÊñπÂÖ≥ÂøÉÊúâ‰ΩôÔºåÊâçÊÉÖ‰∏çË∂≥ÔºåÊó†Ê≥ïÂíåÂ•πÂØπÁ≠â‰∫§ÊµÅ„ÄÇÊúâ‰∏Ä‰∏™Áî∑ÊúãÂèãÂØπÂ•πÂæàÂ•ΩÔºå‰ΩÜÂØπÊñπÁº∫‰πèË∂≥Â§üÁöÑÊñáÂ≠¶Á¥†ÂÖªÔºåËøô‰ΩçÂ•≥ÊÄßÊúãÂèãÈÅÇÊê¨Êù•ÂõõÂ§ßÂêçËëóÂîêËØóÂÆãËØçËÆ©‰ªñÂè£ËØµÂøÉÊÉü„ÄÇÊï∞ÊúàÂêé‰ªçÁÑ∂‰∏çËÉΩÊª°ÊÑèÔºåÂ•πÁî∑ÊúãÂèãÔºàÊàñÊòØ‰∏çÊÑüÂÖ¥Ë∂£ÊàñÊòØÊó†Ê≥ïËµ∂‰∏äËøõÂ∫¶Ôºâ‰πüÈ¢á‰∏∫Ëã¶ÊÅºÔºåÈÅÇÂàÜÊâã„ÄÇ<br>
‰ªéÂÜÖÂøÉÊÉ≥Ê≥ï‰∏äÔºåÊàëËßâÂæó‰∏§‰∏™‰∫∫Êó†ËÆ∫ÊòØÂá∫‰∫é‰ªÄ‰πàÁêÜÁî±Âú®‰∏ÄËµ∑ÔºåÊÄª‰ª•ÂêàÈÄÇ‰∏∫Á¨¨‰∏ÄË¶Å‰πâ„ÄÇÊúâÈæÉÈæâÊàñÂàÜÊ≠ßÔºåÂèåÊñπÂ∫îÂΩìÂ∞ΩÂäõ‰∫§ÊµÅÂíåÂº•Ë°•„ÄÇËÄåËã•ÂèåÊñπÂèëÁé∞ÂÆûÂú®‰∏çÂêàÈÄÇ‰∫Ü‰πü‰∏çÂøÖÂº∫Ë°åÂº•Ë°•ÔºåÂ•ΩËÅöÂ•ΩÊï£Âç≥ÂèØ„ÄÇ‰ΩÜ‰ªéÊÑüÊÉÖ‰∏äÊù•ËØ¥ÔºåÊàëÔºàÂÉ≠Ë∂äÂú∞Ôºâ‰∏çÂ§™ËÉΩËÆ§ÂêåËøôÁßç‚ÄúÁöÆÊ†ºÈ©¨Âà©ÁøÅ‚ÄùÂºèÁöÑ‚ÄúÂº•Ë°•ÂàÜÊ≠ß‚ÄùÁöÑË°å‰∏∫„ÄÇ‰ª•ÊàëÂØπËøô‰ΩçÂ•≥ÊÄßÊúãÂèãÁöÑÊµÖËñÑËÆ§Áü•ÂíåÊÅ∂ÊÑèÊè£ÊµãÔºåËã•ÊòØÂ•πÁî∑ÊúãÂèãÈÄºËá™Â∑±Â≠¶ÂÆå‰∫ÜÊ±âËµãÂîêËØóÂÆãËØçÊòéÂ∞èËØ¥ÔºåÊÄïÊòØËøòÂæóÂ≠¶Â≠¶ÊâãË∞à‰πãÊäÄ„ÄÇÂ•πÁöÑÔºàÂâçÔºâÁî∑ÊúãÂèã‰∏çËøáÊòØËøô‰ΩçÂ•πÁî®‰∫éËøΩÈÄêËá™Â∑±ÂøÉ‰∏≠ÁöÑÈÇ£ÊäπÂπªÂΩ±ÁöÑ‰∏Ä‰∏™Â∑•ÂÖ∑„ÄÇÂ¶ÇÊûúËøô‰ΩçÁî∑ÊúãÂèã‰∏∫‰∫ÜËá™Â∑±ÁöÑÁà±ÊÑèËÄåÂåñÂ¶ÜÊàê‰∏Ä‰∏™ÂπªÂΩ±Ôºå‰ªñÂæóÂà∞ÁöÑÂèàÊòØÁà±ÂêóÔºüÊàë‰∏çÁü•ÈÅì„ÄÇ<br>
‰∏Ä‰∏™ÊúãÂèã/‰º¥‰æ£Êª°Ë∂≥Ëá™Â∑±ÁöÑ‰∏ÄÂàáÁ§æ‰∫§ÂíåÊÉÖÊÑüÈúÄÊ±ÇÊòØ‰∏™ÂæàÁæéÂ¶ôÁöÑÊÉ≥Ê≥ï„ÄÇ‰ΩÜÊØïÁ´üÊØè‰∏™‰∫∫ÈÉΩÊòØÁã¨‰∏ÄÊó†‰∫åÁöÑ‰∏™‰ΩìÔºåÊ≤°ÊúâË∞ÅÊòØ‰∏∫Ë∞ÅËÄåÁîüÁöÑ„ÄÇÂç≥‰ΩøÊàë‰ª¨Êµ™Êº´Âú∞ËØ¥ÔºåÂú®Ëå´Ëå´‰∫∫Êµ∑‰∏≠ÊÄª‰ºöÂíåÂêàÈÄÇÁöÑ‰∫∫Áõ∏ÈÅáÔºõ‰ªéÊ¶ÇÁéá‰∏äÊù•ËØ¥ÔºåÈÇ£‰∏™‚ÄúÂêàÈÄÇÁöÑ‰∫∫‚ÄùË∂äÂÖ∑‰ΩìÔºåÁ¨¶ÂêàËøô‰∏™ÂΩ¢Ë±°ÁöÑ‰∏™‰Ωì‰πüÂ∞±Ë∂äÊ∏∫Ëå´„ÄÇÂ¶ÇÊûú‰∏ç‰∏ªÂä®Èôç‰ΩéÊúüÂæÖÔºåÂ∞±Âè™ËÉΩÁ•àÁ•∑ÂëΩËøêËøôÂè™ÊãâÊôÆÊãâÊñØÂ¶ñ‰∏∫‰Ω†Êâ∞Âä®‰∏Ä‰∏ãÊ¶ÇÁéá‰∫Ü„ÄÇËá≥‰∫éÁöÆÊ†ºÈ©¨Âà©ÁøÅÔºåÂ¶ÇÊûú‰∏çÊòØÈõÖÂÖ∏Â®úÁöÑÁ•ûËøπÔºåÁà±ÁùÄÁöÑ‰∏çËøáÊòØ‰∏Ä‰∏™ÈõïÂÉèÁΩ¢‰∫ÜÔºå‰∏çÊòØÂêóÔºüÁΩóÁøîËÄÅÂ∏àËØ¥Ôºö‚ÄùË¶ÅÁà±ÂÖ∑‰ΩìÁöÑ‰∫∫ÔºåËÄåÈùûÊäΩË±°ÁöÑ‰∫∫„ÄÇ‚ÄúÂ§ßÊäµÂ¶ÇÊ≠§„ÄÇ<br>
Âú®ËøáÂéªÁöÑ‰∫åÂçÅÂπ¥‰∫∫Áîü‰∏≠ÔºåÊàëÊúâÂπ∏ÈÅáÂà∞‰∫ÜÂá†‰∏™ÈùûÂ∏∏Á¨¶ÂêàÊàëÊúüÂæÖÁöÑÊúãÂèãÔºåËøôÊàñËÆ∏ÊòØÁî±‰∫éÊàëÂØπÊúãÂèãÁöÑÊúüÂæÖÁõ∏ÂØπ‰Ωé‰∏ÄÁÇπÔºå‰ΩÜ‰∏çÁÆ°ÊÄé‰πàËØ¥ÈÉΩÊòØÊàëÊûÅÂ§ßÁöÑÂπ∏Ëøê„ÄÇÂêåÊó∂ÔºåÊàë‰πü‰∏çÂÜçÊ±≤Ê±≤‰∫éËøΩÊ±Ç‚ÄúÂÆåÁæé‚ÄùÁöÑÊúãÂèã„ÄÇËãè‰∏úÂù°ÊõæË®ÄÔºö‚ÄúÂêæ‰∏äÂèØ‰ª•Èô™ÁéâÁöáÂ§ßÂ∏ù,‰∏ãÂèØ‰ª•Èô™ÂçëÁî∞Èô¢‰πûÂÑø„ÄÇÁúºÂâçËßÅÂ§©‰∏ãÊó†‰∏Ä‰∏™‰∏çÊòØÂ•Ω‰∫∫„ÄÇ‚ÄùÊîæ‰∏ãÂ±ÇÂ±ÇÁöÑÊàêËßÅÂíåÊ†áÂáÜÂêéÔºåÊõ¥ËÉΩÂèëÁé∞‰∏Ä‰∏™‰∫∫ÁöÑÂèØÁà±‰πãÂ§Ñ„ÄÇ<br>
ÔºàÂèØÊòØÂØπÂè¶‰∏ÄÂçäÔºå‰ªçÁÑ∂Êîæ‰∏ç‰∏ãËøôÁßçÊâßÂøµ„ÄÇÁïôÂæÖ‰πãÂêéÁªßÁª≠ÊÄùËÄÉÂêßÔºâ</p>
</div></details>
<h2 id="2022-10-08">2022-10-08</h2>
<p>wakatime Â∑≤ÁªèËøûÁª≠ÁªôÊàëÂèë‰∫Ü‰∏§Âë®ÈÇÆ‰ª∂ÔºåÊèêÈÜíÊàëÁ†Å‰ª£Á†ÅÊó∂ÈïøÊòæËëóÈôç‰Ωé‰∫Ü„ÄÇËøô‰∫õÂ§©ÂøôÁùÄÂÅöÈ¢òÔºå‰∫åÊù•Êâã‰∏ä‰πüÊ≤°‰ªÄ‰πàÈ°πÁõÆ„ÄÇ‰∏çËøáÂØπ‰∏Ä‰∏™ËÆ°ÁÆóÊú∫erÊù•ËØ¥ÔºåcodingÂá†‰πéÊòØÊØèÊó•ÁªÉÊâãÁöÑÂøÖÂ§áÊµÅÁ®ã‰∫Ü„ÄÇËøòÊòØË¶ÅÁªßÁª≠ÂÅöLeetCodeÂíåÂèÇÂä†Âë®ËµõÂïä‚Ä¶‚Ä¶</p>
<h2 id="2022-10-09">2022-10-09</h2>
<p><img src="https://d.ifengimg.com/w625_h523_q90_webp/x0.ifengimg.com/res/2019/C84D225F2BB36A9C0A854A287CD41DE4CB62A9B5_size48_w625_h523.jpeg" alt="Êë∏È±ºÁ∫™ÂÆû"><br>
Â•ΩÊ≠πÂÅö‰∫ÜÁÇπÈ¢òÔºåÂÜô‰∫ÜÈÅìLeetCode‚Ä¶‚Ä¶</p>
]]></content>
      <categories>
        <category>ÈöèÁ¨î</category>
        <category>Âë®ËÆ∞</category>
      </categories>
      <tags>
        <tag>weekly journal</tag>
      </tags>
  </entry>
  <entry>
    <title>ËÆ°ÁÆóÊú∫ÁªÑÊàêÁ¨îËÆ∞</title>
    <url>/2022/09/26/ji-suan-ji-zu-cheng-bi-ji/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="551b927f6228e4573b53112a0b3d3954b96977a7e09a1d214c3fc3cdd897a322"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">ËØ∑ËæìÂÖ•ÈÇÄËØ∑Á†Å</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>Computer Organization</category>
      </categories>
      <tags>
        <tag>CO</tag>
      </tags>
  </entry>
  <entry>
    <title>ÂéÜÂë®ËÆ∞(2022-09-12 - 2022-09-18)</title>
    <url>/2022/09/18/2022-w37/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="ÂØπÂë®ËÆ∞ÁöÑ‰∏ÄÁÇπÊÄùËÄÉ">ÂØπÂë®ËÆ∞ÁöÑ‰∏ÄÁÇπÊÄùËÄÉ</h2>
<p>ÊàëÂú®Ëøô‰∏™ÂçöÂÆ¢ÂèëÁöÑÁ¨¨‰∏ÄÁØáÂë®ËÆ∞‰∏≠Â∞±ËØ¥Êòé‰∫ÜÔºåÊàëÂºÄËøô‰∏™Âë®ËÆ∞‰∏ªË¶ÅÊòØÊÉ≥ÈÄºËø´Ëá™Â∑±ËæìÂá∫ÂÄíÈÄºËæìÂÖ•„ÄÇ‰∏çËøá‰∏âÂë®‰∏ãÊù•ÔºåÊàëÂèëÁé∞Ëá™Â∑±ÁîüÊ¥ª‰∏≠ÂÄºÂæóËÆ∞ÂΩïÁöÑ‰∏úË•øÁöÑÁ°Æ‰∏çÂ§ö„ÄÇËÄÉÁ†î‰∫∫ÁöÑÁîüÊ¥ªÂæÄÂæÄÊú¥ÂÆûÊó†Âçé‰∏îÊûØÁá•„ÄÇËã•ÊòØ‰∏ÄÊùø‰∏ÄÁúºÂú∞Â∞ÜÊàëÊüêÊüêÊó•ÂÅö‰∫Ü‰ªÄ‰πàÈ¢òÁúã‰∫ÜÂì™Êú¨‰π¶ËÆ∞ÂΩï‰∏äÊù•ÔºåÈÇ£ÁÆÄÁõ¥ÂÉèÊòØÂÜôÊàëËá™Â∑±ÁöÑ‰ΩøÁî®ËØ¥Êòé‰π¶„ÄÇÈöæÂÖç‰∏çÂá∫‰∏âÂ§©Â∞±Áúã‰∏ç‰∏ãÂéªÊÑ§ËÄåÂà†‰πã‰∫Ü„ÄÇ‰ΩÜÂë®ËÆ∞ÂÜôÊàêÈöèÁ¨îÈõÜ‰ºº‰πé‰πü‰∏çÂ§ßÂêàÈÄÇ‚Äî‚ÄîÊàëÁöÑ‚ÄúÈöèÁ¨î‚ÄùÁõÆÂΩï‰∏≠ÂÖ®ÊòØ‰∏ÄÁØáÁØá‚ÄúÂéÜÂë®ËÆ∞‚ÄùÔºåÈáåÈù¢ËóèÁùÄÁúüÊ≠£ÁöÑÈöèÊÑü„ÄÇËøôËá≥Â∞ë‰∏çÂ§ßÂà©‰∫éÊ£ÄÁ¥¢ÂÜÖÂÆπ„ÄÇ<br>
ÊÄªÁöÑÊù•ËØ¥ÊàëËøòÊòØÂ∞ΩÂèØËÉΩÂú∞Âú®ÊâæÂë®ËÆ∞ÂíåÊàë‰∏ÄÂë®‰∏≠ÁöÑÁîüÊ¥ªÁöÑÂ∑ßÂ¶ôÈÖçÊØî„ÄÇ~~ÂΩìÁÑ∂ÊàëÂè™ÊòØÈöèÂè£‰∏ÄËØ¥Ôºå‰∏çÂà∞‰∏ãÁ¨îÂÜôÂë®ËÆ∞Êó∂ÊàëÊ†πÊú¨‰∏ç‰ºöÂéªÊÉ≥ËøôÁßç‰∫ãÊÉÖ„ÄÇ~~‰πüËÆ∏‰ªÄ‰πàÊó∂ÂÄô‰ºöËÄÉËôëÂ∞ÜÊàëÊØèÂ§©ÁöÑÈÄüËÆ∞Â∞èÂç°ÁâáÊï¥ÂêàÂà∞ÊàëÁöÑÂë®ËÆ∞‰∏≠ÂéªÔºåÂÉè‰∏äÂë®Âë®ËÆ∞ÈÇ£Ê†∑ÁöÑÂçÉÂ≠óÈïøÊñá‰∏çÂ¶®ÂçïÁã¨ÊëòÂá∫Êù•ÂΩìÊàêÂçöÊñáÂèëÈÄÅ„ÄÇ<br>
Âè¶Â§ñ‰∏Ä‰∏™ÈóÆÈ¢òÂ∞±ÊòØÂë®ËÆ∞ÂØπÊàëÁöÑÊäÄÊúØÁ¨îËÆ∞ËæìÂá∫ÈáèÁöÑÊå§Âéã„ÄÇËøôÁªàÁ©∂ÊòØ‰∏™ÊäÄÊúØÂçöÂÆ¢ÔºåÊàë‰∏çÂ§™Â∏åÊúõËøô‰∏™ÂçöÂÆ¢ÂèòÊàêÊàëÁöÑÂ∞èÊ†ëÊ¥û„ÄÇÂú®Êé•‰∏ãÊù•ÁöÑÊó•Â≠êÈáåÊàë‰ºöÂ∞ΩÂäõÂ¢ûÂä†ÊàëÁöÑÊäÄÊúØÂçöÂÆ¢ËæìÂá∫ÈáèÔºàÂêåÊó∂Â∞ΩÈáè‰øùËØÅË¥®ÈáèÔºâÔºåÂ¶ÇÊûúÂèëÁé∞Ëá™Â∑±ÂÆûÂú®Ê≤°ÂäûÊ≥ïÂπ≥Ë°°‰∫åËÄÖ‰πãÈó¥ÁöÑÊï∞ÈáèÂíåË¥®ÈáèÔºåÊàë‰ºöËÄÉËôëÂ∞ÜÂë®ËÆ∞Âèò‰∏∫ÂèåÂë®ËÆ∞ÊàñÂπ≤ËÑÜÂà†ÊéâÂπ∂ÂÅúÊõ¥Â§ßÊâπÈöèÁ¨îÈÉ®ÂàÜÁöÑÂÜÖÂÆπ„ÄÇ<br>
ÈÇ£‰πàÊé•‰∏ãÊù•ÔºåËøôÂë®Âë®ËÆ∞ÔºåËÆ©Êàë‰ª¨ËÅä‰∏Ä‰∫õÊõ¥ÁêêÁ¢éÔºå‰ΩÜÂèàÊõ¥Ë¥¥ËøëÊàë‰∏ÄÂë®ÁîüÊ¥ªÁöÑËØùÈ¢ò„ÄÇ</p>
<h2 id="planing-is-nothing-doing-is-everything">Planing Is Nothing, Doing Is Everything</h2>
<p>ÂÖ∂ÂÆû‰∏äÈù¢ËØ¥Êàë‰∏ç‰ºöÂú®Âë®ËÆ∞‰∏≠ËÆ∞ÂΩïÊàëÊØèÂ§©ÁöÑÂ≠¶‰π†Áä∂ÂÜµÔºåÈô§‰∫ÜÊàë‰∏çËÉΩÂøçÂèóÊµÅÊ∞¥Ë¥¶Â§ñÔºåËøòÊúâ‰∏Ä‰∏™ÂéüÂõ†‚Äî‚ÄîÊàëÁöÑÂ≠¶‰π†ËøõÂ∫¶ÂÆûÈôÖ‰∏äÊ†πÊú¨‰∏çÂÄºÂæó‰∏ÄËÆ∞„ÄÇËøôÂú®ËÄÉÁ†îÂè™Ââ©‰πùÂçÅÂ§öÂ§©ÁöÑÊó•Â≠êÈáåÁúüÁöÑÈùûÂ∏∏ËÆ©‰∫∫ÊãÖÂøÉ„ÄÇÊàëÂú®Áä∂ÊÄÅÈùûÂ∏∏Â•ΩÁöÑÊó∂ÂÄôÔºåÊØèÂ§©ÊúâÊïàÂ≠¶‰π†Êó∂Èó¥ÂèØ‰ª•ËææÂà∞ÂçÅ‰∏™Â∞èÊó∂Ôºå‰ΩÜ‰πãÂêéÊÄª‰ºöÁªèÂéÜ‰∏Ä‰∏§Â§©ÁöÑÈïøÊó∂Èó¥ÊëÜÁÉÇ„ÄÇÂÖ∂‰ªñÊó∂ÂÄôÔºåÊàëÊØèÂ§©ÁöÑÊúâÊïàÂ≠¶‰π†Êó∂Èó¥ÂÆûÈôÖ‰∏äÂè™ÊúâÂÖ≠‰∏™Â∞èÊó∂Â∑¶Âè≥„ÄÇÂΩìÂàùÁúãBÁ´ôËÄÉÁ†îup‰∏ª‰ª¨‰∏ÄÂ§©10+Â∞èÊó∂ÁöÑÂ≠¶‰π†ËÆ°ÂàíÂêé‰πüÂÖ¥ÂÜ≤ÂÜ≤Âú∞Ëá™Â∑±Âà∂ÂÆö‰∫Ü‰∏Ä‰ªΩ‰∏™‰∫∫Â≠¶‰π†Êó∂Èó¥Ë°®‚Äî‚ÄîÁïôË∂≥‰∫ÜÂÖÖÂàÜÁöÑÂ≠¶‰π†„ÄÅÂçà‰ºëÂíåËøêÂä®Êó∂Èó¥„ÄÇ‰ΩÜËøô‰ªΩÊó∂Èó¥Ë°®‰ºº‰πéÊ≤°ÁªôÊàëÂ∏¶Êù•‰ªÄ‰πàÂ•Ω‰∏úË•ø„ÄÇ<br>
Ëµ∑ÂàùÔºåÂÆÉÂ∏¶Áªô‰∫ÜÊàëÈïøËææÂçä‰∏™ÊúàÁöÑÁÑ¶Ëôë„ÄÇËøôÁßçÁÑ¶ËôëÊàëÂú®<a href="https://jzy-planet.com/2022/09/04/2022-w35/">Á¨¨‰∏ÄÂë®Âë®ËÆ∞</a>‰∏≠ÊèèËø∞Ëøá„ÄÇÊàëÊÄª‰ºöÂõ†‰∏∫ÂêÑÁßçÂêÑÊ†∑ÁöÑ‰∫ãÊÉÖËÄΩËØØÊàëÊª°Êª°ÂΩìÂΩìÁöÑÊó∂Èó¥Ë°®ÔºåÁÑ∂Âêé‰∏çÂæó‰∏çÁÜ¨Â§ú„ÄÅÁâ∫Áâ≤ÊîæÊùæÊó∂Èó¥Êù•Âº•Ë°•Ê∂àÂ§±ÁöÑÂ≠¶‰π†ËøõÂ∫¶„ÄÇÊàëÂ≠¶‰π†ÁöÑÊó∂Èó¥Â∞±Ë∂äÊãñË∂äÊôö„ÄÇÊúÄÂêéÔºåÊàëÁöÑ‰ΩúÊÅØÊó∂Èó¥Áõ¥Êé•È¢†ÂÄí‰∫ÜËøáÊù•ÔºåÊôö‰∏äÊØ´Êó†Âõ∞ÊÑèÔºåÂú®Â∫ä‰∏äÈ¢†Êù•ÂÄíÂéª‰∏Ä‰∏™Â§öÂ∞èÊó∂Êó†ÊûúÂêéÔºåËµ∑Â∫äÂ≠¶Âà∞Á¨¨‰∫åÂ§©Êó©Êô®ÂÖ≠ÁÇπÔºåÂêÉÂÆåÊó©ÁÇπÂêéÂõ∞ÊÑèÈ©¨‰∏äÂà∞Êù•„ÄÇÔºàËøôÁßçÊÅ∂Âä£‰ΩúÊÅØËÆ©Êàë‰∏Ä‰∏™ÂÅáÊúüËÉñ‰∫ÜÂçÅÂÖ¨Êñ§ÔºåÁé∞Âú®Ê≠£Âú®Ëâ∞ÈöæÂú∞ÂáèÈáç„ÄÇÁ≠âÂáèÈáçÊàêÂäüÂΩìÂë®ÔºåÂë®ËÆ∞Â∞±Ê∞¥Ëøô‰∏™ËØùÈ¢ò~Ôºâ„ÄÇÂÜçÂêéÊù•ÔºåÂÆÉÂ∏¶ÁªôÊàë‚ÄúÊó¢ÁÑ∂Êó†Ê≥ïÂÆåÊàêÂ≠¶‰π†ËÆ°ÂàíÔºåÈÇ£‰πàÊòéÂ§©‰∏ÄÂÆö‚ÄùÁöÑ‰π†ÂæóÊÄßÊó†Âä©„ÄÇÊàëÂÅö‰∫Ü‰∏Ä‰∏™Ëøë‰πéÂÆåÁæéÁöÑËÆ°ÂàíÔºå‰∏∫‰ªÄ‰πàÂ§±Ë¥•‰∫ÜÂë¢ÔºüÊàëÊÉ≥Ôºå‰πüËÆ∏ÂæàÂ§öÊó∂ÂÄôÔºå‚ÄúÂÅöËÆ°Âàí‚ÄùÊòØ‰∏ÄÁßçË°®ÊºîÊÄßË°å‰∏∫ÔºåÊàë‰ª¨ÈúÄË¶ÅÂØπ‚ÄúÂÅöËÆ°Âàí‚ÄùÊú¨Ë∫´ÁöÑÈáçË¶ÅÊÄßËøõË°å‰∏Ä‰∏™ÂêàÁêÜÁöÑËØÑ‰º∞„ÄÇÊàëÊÉ≥Â§ßÊ¶ÇÊúâÂ¶Ç‰∏ãÂá†‰∏™ËÄÉËôëÔºö</p>
<ol>
<li>ÂÅöËÆ°ÂàíÂèØËÉΩËÄóË¥πÂ∑®Â§ß„ÄÇ‰∏Ä‰∏™ÂØπÁé∞ÂÆûÊúâÊåáÂØºÊÑè‰πâÁöÑËÆ°ÂàíÂèØËÉΩ‰ª£‰ª∑È´òÊòÇÔºåÂÆÉÈúÄË¶ÅÂØπËØ•ËÆ°ÂàíÁöÑÁõÆÊ†áÊúâË∂≥Â§üÁöÑ‰∫ÜËß£ÂíåË∞ÉÁ†îÔºåÂÖÖÂàÜËÄÉËôëÁé∞ÊúâËµÑÊ∫êÊâçËÉΩÂÆåÊàê„ÄÇÂ¶ÇÊûú‰∏Ä‰∏™ËÆ°ÂàíÊú¨Ë∫´ÁöÑ‰ª£‰ª∑È´òÂá∫Êàë‰ª¨ÊâÄË¶ÅÂÆåÊàêÁöÑÁõÆÁöÑÔºåÂ∞±‰∏çÂÄºÂæó‰∫Ü„ÄÇÊØîÊñπËØ¥‰Ω†‰∏çÂ∫îËØ•Áî®‰∏§‰∏™Â∞èÊó∂Êù•ËÆ°ÂàíÂéªÂì™ÈáåÂêÉÈ•≠üòÇ„ÄÇ</li>
<li>‰∏Ä‰∏™Êó†Ê≥ïÊâßË°åÁöÑËÆ°ÂàíÊ≤°Êúâ‰ªª‰Ωï‰ª∑ÂÄº„ÄÇÊàëÊÉ≥Âú®ÂÅö‰∏Ä‰ª∂‰∫ãÊÉÖÔºåÂ∞§ÂÖ∂ÊòØ‰∏Ä‰ª∂ÈïøÊúüÊÄßÁöÑ‰∫ãÊÉÖÊó∂ÔºåÈúÄË¶ÅËÆ§ÁúüÂú∞Âå∫ÂàÜ‰∏Ä‰∏ãÁõÆÁöÑÂíåÊâãÊÆµÔºåËÄåÊâãÊÆµÊ∞∏ËøúÂ∫îÂΩìÔºå‰∏îÂè™Â∫îÂΩì‰∏∫Ëøô‰∏™ÁõÆÁöÑÊúçÂä°„ÄÇ‰∏Ä‰∏™Êó†Ê≥ïÊâßË°åÁöÑÔºåÊºÇ‰∫ÆÁöÑËÆ°Âàí‰π¶Êú¨Ë∫´ÔºõÈô§‰∫ÜÂèëÂà∞Á§æ‰∫§Â™í‰Ωì‰∏≠ÂÆåÊàê‰∏ÄÊ¨°Ë°®ÊºîË°å‰∏∫Ëé∑Âæó‰∏ÄÁÇπÁÇπËµûÂèØËÉΩËøòÊúâÁÇπ‰ª∑ÂÄºÂ§ñÔºåÊòØÊ≤°Êúâ‰ªª‰ΩïÊÑè‰πâÁöÑ„ÄÇ</li>
<li>‰∏çË¶ÅÂøΩËßÜ‰∫∫ÊúàÁ•ûËØùÁöÑÈ≠îÂäõ„ÄÇ‰∏Ä‰ªΩËÆ°ÂàíÁöÑ‰ΩúÁî®ÊòØÂáèÂ∞ëÊâßË°åËøáÁ®ã‰∏≠ÁöÑÊó†Áî®Ê≠•È™§ÂíåÈÄâÊã©‰ª£‰ª∑ÔºåÂú®Âä†ÈÄüÈ°πÁõÆÊú¨Ë∫´ÊñπÈù¢Âπ∂Ê≤°ÊúâÊòæËëó‰ΩúÁî®„ÄÇÊâÄ‰ª•Âú®Âà∂ÂÆöËÆ°ÂàíÊó∂‰∏çË¶ÅÂØπËøô‰ªΩËÆ°ÂàíÊú¨Ë∫´ÊúâËøáÈ´òÊúüÊúõ„ÄÇ</li>
<li>Ê∞∏Ëøú‰∏çË¶ÅÂøòËÆ∞Á≥ªÁªüÂ§ñÂπ≤Êâ∞„ÄÇ‰ªäÂ§©Á¶ªËÄÉÁ†îËøòÊúâ96Â§©ÔºåÊâÄ‰ª•Êàë‰ª¨Â∞±Êã•Êúâ96Â§©ÁöÑÂ§ç‰π†Êó∂Èó¥ÂêóÔºüÁªùÈùûÂ¶ÇÊ≠§Ôºå‰Ω†‰∏ÄÂÆö‰ºöÈÅáÂà∞ÂêÑÁßçÂêÑÊ†∑ÁöÑ‰∫ãÊÉÖÊå§Âç†‰Ω†ÁöÑÊó∂Èó¥„ÄÇÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÂÖ∂‰ªñËÄÉËØï„ÄÅÊëÜÁÉÇË°å‰∏∫„ÄÅÁ§æ‰∫§Â∫îÈÖ¨„ÄÅÁîüÁóÖÊä±ÊÅôÁ≠âÁ≠â„ÄÇËøôÁßçÊó†Ê≥ïÊéßÂà∂ÁöÑÁ™ÅÂèë‰∫ã‰ª∂ÁöÑÂ§öÂ∞ëÊúâ‰∏ÄÂÆöÈÉ®ÂàÜÂèñÂÜ≥‰∫é‰Ω†ÂØπÁîüÊ¥ªÁöÑÊéßÂà∂Á®ãÂ∫¶Âíå‰Ω†Êñ≠ËàçÁ¶ªÁöÑÁ®ãÂ∫¶Ôºå‰ΩÜÊ∞∏ËøúÊúâ‰∏Ä‰∏™‰∏ãÈôê„ÄÇÊàëÁöÑÂ≠¶‰π†Êó∂Èó¥ÊúâÂ§öÂ∞ëÔºüÊàë‰ºöÁªôÂÆÉ‰πò‰ª•‰∏Ä‰∏™80%ÁöÑÁ≥ªÊï∞„ÄÇÊâÄ‰ª•Âè™Ââ©‰∏çÂà∞77Â§©‰∫Ü„ÄÇ<s>ÂÆåËõãÔºÅ</s></li>
<li>ÊèêÈ´òÊâßË°åÂäõÂíåÊâßË°åÊïàÁéáÊ∞∏ËøúÊòØÊúÄÂÖ≥ÈîÆÁöÑ‰∫ãÊÉÖ„ÄÇ‰∏çË¶ÅÊääÁ≤æÂäõÊµ™Ë¥πÂú®ÈÇ£‰∫õË¥πËÄå‰∏çÊÉ†ÁöÑÂΩ¢Âºè‰∏ª‰πâ‰∏ä‰∫Ü„ÄÇ</li>
</ol>
<h2 id="ËÅäËÅäÊù®Á¨†">ËÅäËÅäÊù®Á¨†</h2>
<p>ËøôÊòØ‰∏Ä‰∏™Êúâ‰∫õ‰∫âËÆÆÁöÑËØùÈ¢ò„ÄÇÁ¨¨‰∏ÄÊ¨°Âê¨Âà∞Êù®Á¨†ÊòØÁ¨¨‰∏âÂ≠£ËÑ±Âè£ÁßÄÂ§ß‰ºö‰∏≠ÔºåÊù®Á¨†ÁàÜÂá∫‰∫ÜËëóÂêçÁöÑ‚ÄúÊôÆÈÄöÂèàËá™‰ø°‚ÄùÁöÑÊ¢ó„ÄÇËøô‰∏™Â∏¶Êúâ‰∏Ä‰∫õÊÄßÂà´ÂØπÁ´ãËâ≤ÂΩ©ÔºåÂèà‰∏äÂçáÂÖ®‰ΩìÁî∑ÊÄßÁöÑË®ÄËÆ∫Áû¨Èó¥ÁàÜÁÅ´ÔºåË∞©È™ÇËÄÖÂíåÊîØÊåÅËÄÖÁöÜ‰ºó„ÄÇÈöèÂêéÂèà‰ª•‚ÄúÊôÆ‰ø°Áî∑‚Äù„ÄÅ‚ÄúÊôÆ‰ø°Â•≥‚ÄùÁöÑmemeÂ≠òÂú®‰∫é‰∫íËÅîÁΩë‰∏≠ÔºåÊàê‰∏∫ÁΩëÂèã‰ª¨‰∫íÁõ∏Ë∞É‰æÉÂíåÊâ£Â∏ΩÂ≠êÁöÑÂ∑•ÂÖ∑„ÄÇ‰∏çËøáÈªëÁ≤â‰πüÊòØÁ≤âÔºåÊù®Á¨†ÂæàÊòØÂÄüËøô‰∏ÄÊ≥¢ÁÉ≠Â∫¶Êé•‰∫Ü‰∏çÂ∞ëÂπøÂëä„ÄÇ<br>
Á¨¨ÂõõÂ≠£ËÑ±Âè£ÁßÄÂ§ß‰ºöÔºåÊù®Á¨†ÊàñËÆ∏Êúâ‰∫õË∑ØÂæÑ‰æùËµñÔºåÂèàÂÜç‰∏ÄÊ¨°ÁàÜ‰∫Ü‰∏ÄÊ≥¢‚ÄúÊÄßÂà´ÂØπÁ´ã‚ÄùtypeÁöÑË®ÄËÆ∫Ôºö‚ÄúÁî∑‰∫∫ÈÉΩÊòØÂûÉÂúæ‚Äù„ÄÇÈöèÂêéË¢´‰∏Ä‰∏™‰∫∫ÂæàÂ∑ßÂ¶ôÂú∞Êé•‰∫Ü‰∏ãÂéªÔºö‚ÄúÂ¶ÇÊûúËØ¥Áî∑‰∫∫ÊòØÂûÉÂúæÁöÑËØùÔºåÈÇ£Êù®Á¨†ÁöÑÊúÄÂ§ßÊÑøÊúõÂ∞±ÊòØÊ¥ªÂú®ÂûÉÂúæÂ†ÜÈáå„ÄÇ‚Äù‰ªéÁªìÊûÑÂíåÊäÄÂ∑ß‰∏äÊù•ËØ¥ÔºåËøô‰∏™Êé•Ê≥ïÂ∞±ÊØîÊù®Á¨†È´òÁ∫ßÂ§ö‰∫Ü„ÄÇ<br>
Â¶ÇÊûúËØ¥Á¨¨‰∏âÂ≠£ÁöÑ‚ÄúÊôÆÈÄö‰∏îËá™‰ø°‚ÄùÊòØÂØπÁé∞ÂÆûÁîüÊ¥ª‰∏≠ÁöÑ‰∏Ä‰∫õ‚ÄúÁàπÂë≥Áé∞Ë±°‚ÄùÁöÑÊúâÂäõÊä®ÂáªÔºåÈÇ£Á¨¨ÂõõÂ≠£ÁöÑËøô‰∏™ÊÆµÂ≠êÂ∞±Êúâ‰∫õËé´ÂêçÂÖ∂Â¶ô‰∫Ü„ÄÇËÄå‰ªéËÑ±Âè£ÁßÄÁöÑËßíÂ∫¶Êù•ËØ¥ÔºåËøôÁßçÂçïÁ∫ØÁöÑË∞©È™Ç‚Äî‚ÄîÂ∞±Ë∑üÈ™Ç‰∏Ä‰∏™‰∫∫ÂÇªÈÄº‰∏ÄÊ†∑‚Äî‚ÄîÂÖ∂ÂÆûÊ≤°Êúâ‰ªª‰ΩïÂπΩÈªòÊÑüÂèØË®ÄÔºõÂÆÉÂπ∂Ê≤°ÊúâÊè≠Á§∫Ëá™Â∑±ÊÉ≥Ë¶ÅËÆΩÂà∫ÁöÑËøôÈÉ®ÂàÜÁæ§‰ΩìÂÜÖÂú®ÁöÑÁâπÊÄßÔºå‰πüÊ≤°ÊúâÁªÜÊåñËøôÁßçÁüõÁõæÊÄßÂ∏¶Êù•ÁöÑÂπΩÈªòÊÑüÔºåËÄåÂè™ÊòØÂçïÁ∫ØÂú∞Â∞ÜÊÅ∂ÊÑèÂΩì‰ΩúÁ¨ëÁÇπ„ÄÇÂè™ÊòØ‰∏ÄÁßçÂ§ßËåÉÂõ¥ÁöÑ‚Äú‰º¶ÁêÜÊ¢ó‚ÄùÁΩ¢‰∫Ü„ÄÇÂÖ∂ÂÆûÁúãÂà∞ËøôÈáåÊàëÊòØÈ¢á‰∏∫Â§±ÊúõÁöÑÔºåËÑ±Âè£ÁßÄÂ§ß‰ºö‰∏≠ÂÖ∂ÂÆûËæìÂá∫‰∫Ü‰∏çÂ∞ëÂÖ∑ÊúâÂπ≥ÊùÉÁ≤æÁ•ûÁöÑÊÆµÂ≠êÔºåÂ¶ÇËøô‰∏ÄÂ≠£È¢úÊÄ°È¢úÊÇ¶ÂÖ≥‰∫é‚ÄúÂ•≥ÊÄßË°£ÊúçÂè£Ë¢ã‚ÄùÔºåÂíåÈ∏üÈ∏üÁöÑ‚Äú‰∏ãÂé®Êàø‚ÄùÊÆµÂ≠êÔºåÈÉΩÈùûÂ∏∏‰∏çÈîôÔºõ‰ΩÜÁàÜÁÅ´ÁöÑÂ¶ÇÊûúÁ´üÊòØËøôÁßçÂçïÁ∫ØÁöÑË∞©È™ÇÔºå‰∏çÁ¶ÅËÆ©‰∫∫Êúâ‰∫õÂèπÊúç‰∫éÁé∞Âú®ÁöÑÊÄßÂà´ÂØπÁ´ãÁ®ãÂ∫¶„ÄÇ<br>
ÂΩìÁÑ∂ÔºåËøô‰∏ÄÂ≠£ÁöÑÊù®Á¨†È¢áÁªô‰∫ÜÊàë‰∏Ä‰∫õÊÉäÂñú„ÄÇÈù†ÁÖΩÂä®Áî∑Â•≥ÂØπÁ´ãËé∑Âæó‰∫ÜÂ¶ÇÊ≠§Â§öÊµÅÈáèÁöÑÂ•πÔºå‰∏çÂÜçÂá≠ÂÄüËøô‰∏ÄÊâãÊÆµÂê∏ÂºïÊµÅÈáèÔºåËÄåÊòØÂæàËÆ§ÁúüÂú∞ËØ¥ÊÉ≥Ë¶ÅÈù†‰∏Ä‰∫õÊäÄÊúØÊÄßÁöÑÊÆµÂ≠êÊù•ÂèÇËµõ„ÄÇÂ∏åÊúõÂ•πËÉΩÂ§üÊé¢Á¥¢Âá∫Êõ¥Âä†‰ºòÁßÄÁöÑÈ£éÊ†º„ÄÇ</p>
<p>Áî±‰∫éÊó∂Èó¥ÂÖ≥Á≥ªÔºåÊöÇ‰∏îËÅä‰∏ÄÁÇπÂêß„ÄÇ‰ª•ÂêéÊàñËÆ∏‰ºöÂçïÁã¨ÂºÄ‰∏Ä‰∏™ÈöèÁ¨îÈ°µÔºåÂ•ΩÂ•ΩËÅä‰∏ÄËÅäÊàëÁöÑËßÇÁÇπ„ÄÇ</p>
<p>ÈÇ£Â∞±Á•ùÂ§ßÂÆ∂Âú®‰∏ãÂë®Âø´‰πêÔºÅ</p>
]]></content>
      <categories>
        <category>ÈöèÁ¨î</category>
        <category>Âë®ËÆ∞</category>
      </categories>
      <tags>
        <tag>weekly journal</tag>
      </tags>
  </entry>
  <entry>
    <title>ÂéÜÂë®ËÆ∞(2022-09-05 - 2022-09-11)</title>
    <url>/2022/09/10/2022-w36/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>ÂèàÊòØ‰∏ÄÂë®ÁªìÊùüÁöÑÊó•Â≠ê„ÄÇËøôÂë®ÁªèÂéÜ‰∫ÜÂíΩÂñâÊ∫ÉÁñ°„ÄÅËøîÊ†°„ÄÅÈöîÁ¶ª„ÄÅÂÅöÊ†∏ÈÖ∏ÊçÖÂñâÂíô‚Ä¶‚Ä¶Âè™ËßâÂæóÊµëÊµëÂô©Âô©‰∫ÜÂ•ΩÂá†Â§©ÔºõÊ≤°ÊÉ≥Âà∞Ëøô‰πàÂø´Â∞±ÂèàÂà∞‰∫Ü‰∏ÄÂë®ÁªìÊùüÁöÑÊó•Â≠ê‰∫Ü„ÄÇÊôÆÈÄö‰∫∫ÁöÑÁîüÊ¥ªÔºåÂæÄÂæÄË¶ÅÊãøÁùÄÊîæÂ§ßÈïúÊâçËÉΩÊâæÂà∞‰∫õËÆ∏ÂÄºÂæóËÆ∞ÂΩïÁöÑÁâáÊÆµÁöÑ„ÄÇÊÉ≥‰∫ÜÊÉ≥ÔºåËøáÂéª‰∏ÄÂë®Â•ΩÂÉèÊ≤°‰ªÄ‰πàÁâπÂà´ÂÄºÂæóËÆ∞ÂΩïÁöÑ„ÄÇÈÇ£Â∞±ÂÜôÁÇπÂä°ËôöÁöÑÂêß„ÄÇ</p>
<h2 id="ËØóÂøÉÂíåËøúÂéªÁöÑËØóÂøÉ">ËØóÂøÉÂíåËøúÂéªÁöÑËØóÂøÉ</h2>
<p>Âú®ÊàëÂæàÂ∞èÁöÑÊó∂ÂÄôÔºåÊõæ‰∏ÄÂ∫¶ÈùûÂ∏∏ÂñúÊ¨¢ËØóËØç„ÄÇËôΩÁÑ∂ÊúÄÊó©Êé•Ëß¶ËØóËØçÁöÑÂéüÂõ†ÊòØ‰∏∫‰∫ÜÂíåÂ•≥Â≠©Â≠êËÅäÂ§©ÊúâËØùÈ¢òÔºå‰ΩÜÂæàÂø´ÔºåÊàëÂ∞±Ë¢´ËØóËØçËø∑‰Ωè‰∫Ü„ÄÇÊâæËØùÈ¢òÊó∂Êä±ÁùÄÂéöÂéöÁöÑ‰π¶Á±çÔºå‰πüÈ¢áÊúâÁßçÈÜâÁøÅ‰πãÊÑè‰∏çÂú®ÈÖíÁöÑÊÑèÂë≥‰∫Ü„ÄÇÂ∞èÊó∂ÂÄôÂìÅÂë≥‰∏çÊòØÂæàÈ´òÔºåÁúãÂ§ö‰∫ÜÊ±âËµãÂíåÂ©âÁ∫¶ËØçÔºåÂè™ËßâÊûÅÂ∞ΩÂçé‰∏Ω‰πãËæûËóªÔºåÊ¨≤Á©∑Â§©Â∑•‰πãÊñáÁ´†„ÄÇËØªËøô‰∫õÊñáÂ≠óÂ∞±Â•ΩÂÉèÁúãÂà∞‰∫Ü‰∏ÄÂπÖÂπÖÁîªÂç∑ÔºåÁúãÂà∞È£éËµ∑‰∫éÈùíËòã‰πãÊú´ÔºåËçâËâ≤ÊëáÂä®ÔºõÁúãÂà∞‰∏âÁßãÊ°ÇÂ≠êÔºåÂçÅÈáåËç∑Ëä±ÔºõÁúãÂà∞Â∞èÂßëÂ®òÁùÄË¢úÊ¨≤Ëµ∞ÔºåÂç¥ÂèàË£Ö‰ΩúÂóÖÁùÄÈùíÊ¢ÖÔºåÂÄöÈó®ÂÅ∑ÂÅ∑ÊúõÁùÄÊù•ÂÆ¢‚Ä¶‚Ä¶<br>
ÊàëÂæàÂπ∏ËøêÂú∞Ê≤°ÊúâÂ≠¶Âà∞Ëøô‰∫õÊñáÂ≠óÁöÑÈ£éÊ†ºÔºå‰∏çËá≥‰∫éÂÜôÂá∫‰∏ÄÂ†ÜÊãôÁï•Ê®°‰ªøÔºåËá≠‰∏çÂèØÈóªÁöÑÁîüÂÉªËØçÂè†Âè†‰πê„ÄÇ‰ΩÜËøô‰∫õÊñáÂ≠óÁ°ÆÂÆûËÆ©ÂπºÊó∂ÁöÑÊàëÊÑüÂèóÂà∞‰∫ÜÊñáÂ≠óÁöÑÁæé„ÄÇÁé∞Âú®ÊÉ≥Êù•ÔºåÈÇ£Â§ßÊ¶ÇÊòØÊàë‰∏∫Êï∞‰∏çÂ§öÂú∞ÔºåÊª°ÊÄÄÂ•ΩÂ•á‰∏éÊøÄÂä®Êé¢Á¥¢‰∏ÄÊú¨‰π¶ÁöÑÊó∂ÂÖâÔºõ‰πüÊòØÊàëÁªùÊó†‰ªÖÊúâÁöÑÔºå‰∏∫‰∫ÜÂíåÂ•≥Â≠©Â≠êËÅäÂ§©ÈÇ£‰πàËÆ§ÁúüÁöÑÊó∂ÂÖâ‰∫Ü„ÄÇ<br>
ÂÜçÂêéÊù•ÔºåÂÆ°ÁæéÊ∞¥Âπ≥ÊúâÊâÄÊèêÈ´òÔºåÊàëÂºÄÂßãÊé•Ëß¶ËØóËØçÁöÑÈ£éÊ†º‰πüÊ∏êÊ∏êÊµÅÂèò„ÄÇË±™ÊîæÊ¥æ„ÄÅÊµ™Êº´Ê¥æÁ≠âÁ≠â‰∏ç‰∏ÄËÄåË∂≥„ÄÇÈô§‰∫ÜÂØπÊùéÂ§™ÁôΩÁöÑËØóËØçÊÑüÂà∞È´òÂ±±‰ª∞Ê≠¢Ê∑±Ê∑±ÂèπÊúçÂ§ñÔºåËãèËΩº„ÄÅËãèÈó®ÂºüÂ≠ê„ÄÅÂßúÂ§îÁ≠âËÆ∏Â§öËØç‰∫∫ÁöÑ‰ΩúÂìÅÊàë‰πüÈùûÂ∏∏ÂñúÊ¨¢„ÄÇÈô§‰∫ÜÊùéÊùúËøô‰∏™Êó†Ê≥ïÊîÄÁà¨ÁöÑÈ´òÂ≥∞Â§ñÔºåÊàëÊúÄÂñúÊ¨¢ÁöÑÂ§ßÊ¶ÇÊòØËæõÂºÉÁñæ‰∫ÜÂêß„ÄÇÊó†ËÆ∫ÊòØ„ÄäÁ†¥ÈòµÂ≠ê„Äã„ÄÅ„ÄäÊ∞¥ÈæôÂêü„ÄãÁ≠âÊª°ÊÄÄË±™ÊÉÖÂ£ÆÂøóÁöÑËØçÔºåÊäëÊàñÊòØ„ÄäËè©Ëê®ËõÆ„Äã„ÄÅ„ÄäÊ∞¥Ë∞ÉÊ≠åÂ§¥¬∑Â£¨Â≠ê‰∏âÂ±±Ë¢´Âè¨ÈôàÁ´Ø‰ªÅÁªô‰∫ãÈ•ÆÈ•ØÂ∏≠‰∏ä‰Ωú„ÄãÁöÑÊÄÄÊâç‰∏çÈÅá„ÄÇÈ¢áËÆ∞ËΩΩ‰∫ÜÈÇ£Êó∂È¢áÂ≠§Áã¨ÂÜÖÂêëÔºåÂèàÊúâ‰∫õ‰∏≠‰∫åÁöÑÂøÉË∑Ø„ÄÇ<br>
Èô§‰∫ÜÁúãËØóÔºåÊàëËøòÊúâÊäÑËØóÁöÑ‚ÄúÁôñÂ•Ω‚Äù„ÄÇÂàùÈ´ò‰∏≠„ÄÅÂ§ß‰∏ÄÂ§ß‰∫åÊó∂ÔºåÊØèÂΩìÂøÉ‰∫ã‰∏çÁïÖÈÉÅÈÉÅ‰∫éÊÄÄÔºåÊäëÊàñÊòØÈó≤Êù•Êó†‰∫ãÊó∂ÔºåÊàëÈÉΩ‰ºöÈÉëÈáçÂÖ∂‰∫ãÂú∞ÊãøÂá∫ÊàëÁöÑËØóÊäÑÁ¨îËÆ∞Êú¨ÔºåÁøªÂºÄ‰∏ÄÊú¨ËØóËØçÈõÜÔºåÊäÑÔºÅ‰∫éÊòØÔºåÊØèÂΩì‰∏ÄÂπ¥ÁªìÊùüÔºåÊàëÂ∞±‰ºöÊã•Êúâ‰∏ÄÊú¨ÂÜôÂæóÊª°Êª°ÂΩìÂΩìÁöÑÁ¨îËÆ∞Êú¨ÔºåÈáåÈù¢ËÆ∞ÁùÄËÆ∏Â§öËØóÂè•È¢òÊ≥®„ÄÇÊàëÂú®Ëøô‰∏ÄÊú¨Êú¨ËØóÊäÑ‰∏≠ÁªÉ‰ºö‰∫Ü‰∏ÄÊâãÈáéÁîüÁöÑÁ°¨Á¨îÁò¶ÈáëÔºå‰πüËÉå‰ºö‰∫ÜÂá†Âè•ÂèØ‰ª•Ëß¶ÊôØÁîüÊÉÖÁöÑËØóÂè•„ÄÇËøôÂá†È¶ñËØóËØçÔºåÂíåÊàëÈó≤Êù•ÁúãËøáÁöÑÂá†Êú¨ÊùÇ‰π¶„ÄÅÂá†ÁØáÂè§ÊñáÈ¢áËÆ©ÊàëÊâæÂà∞‰∫ÜÂá†‰∏™ÊñáÁßëÁöÑÊúãÂèã‰∏ÄËµ∑‰∫§ÊµÅËßÇÁÇπ„ÄÇ<br>
Ëøô‰∏ÄÂàáÔºåÁúãËµ∑Êù•ÈÉΩÂÉèÊòØ‰∏Ä‰∏™ÂÖ∏ÂûãÁöÑÊñáÈùíÊâç‰ºöÂπ≤ÁöÑ‰∫ãÊÉÖ„ÄÇÁÑ∂ËÄåÔºåÈöèÁùÄÊó∂Èó¥ÁöÑÊµÅÈÄùÔºåÊàë‰ºº‰πéÊ∏êÊ∏êÂú∞Â§±Âéª‰∫ÜËøô‰ªΩËØóÂøÉ„ÄÇÂæàÈöæËØ¥ËøôÁßçÊîπÂèòÊòØÊ∫ê‰∫éÂì™‰∏™ÁâπÊÆä‰∫ã‰ª∂ÔºõÊàëÂè™ÊòØÈÄâÊã©Â∞ÜÊàëÁöÑ„ÄäËØóËØçÊ†ºÂæã„ÄãÊîæÂú®‰∫ÜÂÆ∂ÈáåÔºõÁÑ∂ÂêéÂ∞ÜÊàëÁöÑËØóËØç‰π¶Á±çÊîæÂú®‰π¶Ê©±ËÄåÈùûÂ∫äÂ§¥Ê°àÂ§¥ÔºõÁÑ∂ÂêéËÆ©ÂÆÉÂú®‰π¶Ê©±ÈáåËíôÂ∞ò„ÄÇÊàëÁöÑ‰π¶Êüú‰∏äÊ∏êÊ∏ê‰∏çËßÅ‰∫ÜËØóËØçÈõÜÔºåËÄåÊòØ‰∏ÄÊú¨Êú¨Ê≤°ËØªÂÆåÁöÑÁ§æ‰ºöÂ≠¶„ÄÅÂéÜÂè≤Â≠¶Ëëó‰ΩúÔºåÈöèÊâãË¶ÅÊü•ÁöÑÊú∫Ê¢∞Â∑•‰∏öÂá∫ÁâàÁ§æÂ§ßÈªë‰π¶ÂíåÊ∞∏ËøúÂú®ÂæÖËØªÂêçÂçïÈáåÁöÑÂ∞èËØ¥„ÄÇÂÜçÂêéÊù•ÔºåË∂äÊù•Ë∂äÂ§öÁöÑËÆ°ÁÆóÊú∫‰π¶Á±çÂ∞ÜËøô‰∫õÁ§æÁßëÁ±ª‰π¶Á±ç‰πüÊå§‰∫Ü‰∏ãÂéª„ÄÇÊàëÂèëÁé∞Ëá™Â∑±ÂÜçÊ≤°ÊúâÈõÖÂÖ¥ÊâìÂºÄ‰∏ÄÊú¨ËØóËØçÈõÜÁªÜÁªÜÊè£Êë©ÔºåÊõ¥Ê≤°ÊúâÂøÉÊÉÖÂéªÂùêÁùÄÊäÑËØó‰∫Ü„ÄÇ<br>
ÁÑ∂ËÄåÔºåÊú¨ÊñáÂπ∂ÈùûÊó®Âú®ÊèèÁªò‰∏Ä‰∏™ÊñáÈùíÁöÑËøúÂéªÔºå‰πüÊó†ÊÑè‰∫éÂú®Ëøô‰∏™Âü∫Á°Ä‰∏ä‰º§Êò•ÊÇ≤Áßã‰∏ÄÁï™„ÄÇÊàëÊõæÂíå‰∏Ä‰∏™ÊúãÂèãËÅäÂ§©Êó∂Ë∞àËµ∑‰∫Ü‚ÄúËØóÂøÉÂ∑≤Ê≠ª‚ÄùÁöÑÈóÆÈ¢òÔºåÈÇ£‰ΩçÊúãÂèãÂæàÁÑ¶ÊÄ•Âú∞ËØ¥Ôºö‚ÄúËøô‰∏™ÈóÆÈ¢òÂæà‰∏•ÈáçÂïäÔºÅ‚ÄùËÄåÊàëÁ¨ë‰∫ÜÁ¨ëÔºö‚ÄúÂÖ∂ÂÆû‰∏çÁÑ∂„ÄÇ‚ÄùÂú®ÊàëÁúãÊù•ÔºåËØóËØçÁöÑÁ¶ªÂéª‰∫éÊàëËÄåË®ÄÂπ∂ÈùûÁæéÊÑüÁöÑ‰∏ßÂ§±ÔºåËÄå‰ªÖ‰ªÖÊòØ‰∏ÄÊ¨°Áà±Â•ΩÁöÑÊµÅÂèò„ÄÇÊàëÂØπËØóËØçÁöÑÂñúÁà±ÂÅúÁïôÔºåÂÅúÁïôÔºå‰πü‰ªÖ‰ªÖÂÅúÁïôÂú®‰∫ÜÊ¨£ËµèÁöÑÈò∂ÊÆµ„ÄÇÂú®ÈòÖËØª‰∫ÜÂ§ßÈáè‰ºòÁßÄÁöÑËØóËØçÂêéÔºåÈ¢áÊúâ‰∫õ‚ÄúÊõæÁªèÊ≤ßÊµ∑Èöæ‰∏∫Ê∞¥‚Äù‰πãÊÉÖÔºå‰∏çÂ§™ÁúãÂæó‰∏ãÂéªÈÇ£‰∫õÊ¨°‰∏ÄÁ≠âÁöÑËØó‰Ωú‰∫Ü„ÄÇËÄåÊàë‰∏ÄÊù•Ê≤°ÊúâÂÖªÊàêÂàõ‰ΩúÁà±Â•ΩÔºõ‰∫åÊù•ÂõΩÂÜÖÁöÑÂè§‰ΩìËØóËØç‰∫∫ÊâçÂáãÊïùÔºåÈöæ‰ª•Êé•Ëß¶Êõ¥Â§öÊõ¥Â•ΩÁöÑ‰ΩúÂìÅ„ÄÇËá≥Â∞ëÂè§ËØóËØçÈ¢ÜÂüüÔºåÊÉ≥Ë¶ÅÂØªÊâæËÆ©ÊàëÊÑüÂÖ¥Ë∂£ÁöÑ‰ΩúÂìÅÁõ∏ÂØπË∂äÊù•Ë∂äÈöæ‰∫Ü„ÄÇ‰πüÊòØÊó∂ÂÄôÂíåÂè§ËØóËØçËØ¥ÂÜçËßÅ‰∫Ü„ÄÇÊàëÊÉ≥Ëøô‰πüÂπ∂‰∏çËÉΩÊÑèÂë≥ÁùÄÊàëÂØπ‚ÄúÁæé‚ÄùÁöÑÊÑüÂèó‰∏ßÂ§±‰∫ÜÔºàËôΩÁÑ∂ÊàëÁöÑÁ°ÆË∂äÊù•Ë∂äÂÉè‰∏™ÁêÜÁßëÁîü‰∫ÜÔºâÔºåÊàëÁöÑÁîüÊ¥ª‰∏≠‰ªçÁÑ∂ÊúâÁªòÁîªÔºåÊúâÈü≥‰πêÔºåÊúâÁ§æÁßëÁöÑÊÄùËÄÉÔºåÊúâ‰∏•ÂØÜÊû∂ÊûÑ‰∫éÊï∞Â≠¶„ÄÅÁâ©ÁêÜ‰πã‰∏äÔºå‰ª§ÊàëÊó†ÊØîÂ•ΩÂ•áÁöÑËÆ°ÁÆóÊú∫ÁßëÂ≠¶„ÄÇÂÆÉ‰ª¨Â∞±ÂÉèÊõæÁªèÁöÑËØóËØçÈÇ£Ê†∑Âê∏ÂºïÁùÄÊàë„ÄÇ<br>
ÊüêÁßçÁ®ãÂ∫¶‰∏äËØ¥ÔºåËøôÁßçÁà±Â•ΩÁöÑÊµÅÂèòÂíåÊÅãÁà±Êúâ‰∏ÄÂÆöÁöÑÁõ∏‰ººÂ§Ñ„ÄÇÂá∫‰∫éÂÜÖÂøÉÁöÑÊÇ∏Âä®ÂíåÂØπÊñπÁöÑÂê∏ÂºïÔºå‰Ω†ÁÉ≠ÊÉÖÂú∞Â∞ÜÂØπÊñπÈÇÄËøõ‰∫Ü‰Ω†ÁöÑÁîüÊ¥ª„ÄÇÂØπÊñπÁöÑÁà±Â•Ω„ÄÅÂÖ¥Ë∂£„ÄÅÈó™ÂÖâÁÇπÂíå‰π†ÊÉØÂΩ±Âìç‰Ω†ËâØÂ§ö„ÄÇÂ¶ÇÊûúÂá∫‰∫éÁßçÁßçÂéüÂõ†ÔºåÂØπÊñπ‰∏çËÉΩÂíå‰Ω†‰∏ÄÁõ¥Ëµ∞‰∏ãÂéª‰∫Ü„ÄÇÂæàËá™ÁÑ∂Âú∞Ôºå‰Ω†ÂèØËÉΩ‰∏çÂæó‰∏çÈù¢ÂØπÁîüÊ¥ª‰∏≠ÈÄêÊ∏êÊ∂àÂ§±ÁöÑÔºåÂØπÊñπÁöÑÁóïËøπ„ÄÇ‰ΩÜÂØπÊñπÊõæÁªèÂΩ±ÂìçËøá‰Ω†ÁöÑÈÇ£‰∫õ‰∫ãÊÉÖÔºåÊàñÂº∫ÁÉàÊàñÂæÆÂº±Âú∞ÔºåËøòÊòØ‰ºöÊ∂¶Áâ©Êó†Â£∞Âú∞Âú®‰Ω†Ë∫´‰∏ä‰ΩìÁé∞Âá∫Êù•„ÄÇ<br>
ËøôÊ¨°Âë®ËÆ∞Áî±‰∫éÊó∂Èó¥ÂéüÂõ†ÔºåÂπ∂Ê≤°ÊúâÂú®ÂΩìÂë®Âë®Â§©ÂÆåÊàêÔºå‰∏ÄÁõ¥ÊãñÂà∞‰∫ÜÊ¨°Âë®ÁöÑÂë®‰∫å„ÄÇÂú®ËøôÂ§©ÔºåÂè∞È£é‚ÄúÊ¢ÖËä±‚Äù‰∏∫Êù≠Â∑ûÂ∏¶Êù•‰∫ÜËøûÂ§©ÁöÑÈò¥Èõ®ÔºåÂπ∂Â∞ÜÊåÅÁª≠ÂΩ±ÂìçÂêéÈù¢‰∏§Â§©ÁöÑÈ£éÈõ®Ê∞îÂÄô„ÄÇÁé∞Âú®ÔºåÁ™óÂ§ñÊ≠£‰∏ãÁùÄ‰∏çÂ∞èÁöÑÈõ®„ÄÇ‚ÄúÂ∏òÂ§ñÈõ®ÊΩ∫ÊΩ∫ÔºåÊò•ÊÑèÈòëÁèäÔºåÁΩóË°æ‰∏çËÄê‰∫îÊõ¥ÂØí„ÄÇ‚ÄùËøôÈ¶ñÊùéÂêé‰∏ªÁöÑËØçËì¶ÁÑ∂Ëπ¶‰∫ÜÂá∫Êù•„ÄÇÊù≠Â∑ûÁöÑÊôöÈ£éÂíåÈõ®Â£∞‰∏≠Ôºå‰ºº‰πéÈÅ•ÈÅ•ÊÑüÂèóÂà∞‰∫ÜÊùéÂêé‰∏ªÁöÑÂá≠Ê†èÊÑèÔºàÂáÜÂ§áËÄÉÁ†îÊó∂‰πüÊòØËøôÁßçÊÑüÂèóÔºâ„ÄÇËØóÂøÉËøúÂéª‰∫ÜÔºåËØóËØçÂØπÊàëÁöÑÂΩ±ÂìçÂπ∂‰∏ç‰ºöËøú„ÄÇ<br>
Ë∞¢Ë∞¢‰Ω†Êù•Ëøá„ÄÇ</p>
<h2 id="Êú¨Âë®Â≠¶‰π†ÂõûÈ°æ">Êú¨Âë®Â≠¶‰π†ÂõûÈ°æ</h2>
<p>Êú¨Âë®Èô§‰∫ÜËøîÊ†°„ÄÅÈöîÁ¶ªÁöÑÁßçÁßçÊó∂Èó¥Ê∂àËÄóÂ§ñÔºåÊï¥‰Ωì‰∏äÁ®≥Ê≠•ËøõË°åÁùÄ„ÄÇÂú®Â≠¶‰π†‰πã‰ΩôÔºåÊàëÂÖ≥Ê≥®Âπ∂ÈòÖËØª‰∫ÜÊå∫Â§öÁõ∏ÂÖ≥ÁöÑÊäÄÊúØÂçöÂÆ¢Êù•Â¢ûÂä†ÊàëÁöÑÂ§ñËØ≠ÈòÖËØªÈáèÔºå‰πüÊèêÈ´òÊàëÂØπÁõ∏ÂÖ≥ÊñπÂêëÁöÑ‰∫ÜËß£„ÄÇ‰ΩÜ‰ªçÁÑ∂Êó†Ê≥ïÊª°ÊïàÁéáÂú∞ÊâßË°åÊàëÁöÑÂ≠¶‰π†Êó∂Èó¥Ë°®„ÄÇ</p>
]]></content>
      <categories>
        <category>ÈöèÁ¨î</category>
        <category>Âë®ËÆ∞</category>
      </categories>
      <tags>
        <tag>weekly journal</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 188. Best Time to Buy and Sell Stock IV</title>
    <url>/2022/09/10/188.best-time-to-buy-and-sell-stock-iv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="analyse">Analyse</h2>
<p>This is another dynamic programming problem similar to <a href="https://jzy-planet.com/2022/09/01/1687.delivering-boxes-from-storage-to-ports/">1687. Delivering Boxes from Storage to Ports</a>. And however, with a limitation of purchase times. We can just use two iteration on this question. One is the iteration of vector prices(obviously), and another is the iteration of purchase times k.<br>
What‚Äôs more, we need to purchase a good before selling it. Thus we need to record the purchases. And the code is as below</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, vector&lt;<span class="keyword">int</span>&gt;&amp; price)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">profit</span><span class="params">(<span class="number">2</span>*k+<span class="number">1</span>, INT_MIN)</span></span>;</span><br><span class="line">        <span class="comment">//if we do nothing, the profit is 0 without doubt</span></span><br><span class="line">        profit[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//the iteration of prices vector</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; price.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="comment">//the iteration of transaction times</span></span><br><span class="line">			<span class="comment">/*for each i, profit[i+1] is the profit with a good in stock,</span></span><br><span class="line"><span class="comment">			 *and profit[i+2] is the profit after selling goods.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i+<span class="number">2</span> &lt;= <span class="number">2</span>*k; i += <span class="number">2</span>)&#123;</span><br><span class="line">                profit[i+<span class="number">1</span>] = <span class="built_in">max</span>(profit[i+<span class="number">1</span>], profit[i]-price[j]);</span><br><span class="line">                profit[i+<span class="number">2</span>] = <span class="built_in">max</span>(profit[i+<span class="number">2</span>], profit[i+<span class="number">1</span>]+price[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(profit.<span class="built_in">begin</span>(), profit.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1>Reference</h1>
<p><a href="https://jzy-planet.com/2022/09/01/1687.delivering-boxes-from-storage-to-ports/">1687. Delivering Boxes from Storage to Ports</a><br>
<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/2555708/Easy-solution-Explained-oror-Beginner-Friendly-oror-Best-Method">‚úÖEasy solution Explained || Beginner Friendly üî•||‚úîÔ∏è Best Method</a></p>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>LeetCodeÁ¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>ÂéÜÂë®ËÆ∞(2022-08-29 - 2022-09-04)</title>
    <url>/2022/09/04/2022-w35/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>ËøôÊòØÊàëÂú®ÂçöÂÆ¢‰∏äÂÜôÁöÑÁ¨¨‰∏ÄÁØáÂë®ËÆ∞ÔºåÂ∏åÊúõËÉΩÁî®Âë®ËÆ∞ÁöÑÂΩ¢ÂºèÊù•ËÆ∞ÂΩïËá™Â∑±ÁöÑÁîüÊ¥ªÂíå‰∏Ä‰∫õÊÑüÊÇü„ÄÇ‰πüËÉΩÁî®ËæìÂá∫ÂÄíÈÄºËæìÂÖ•ÁöÑÊñπÂºèËÆ©Ëá™Â∑±ÂéªÊõ¥Â§öÂú∞Ê∂âÁåé‰∏Ä‰∫õÂÜÖÂÆπ„ÄÇÊàëÂßãÁªàËßâÂæóÊñáÁêÜÁßëÂπ∂‰∏çÊòØ‰∫∫ÁîüÂøÖÈ°ª‰∫åÈÄâ‰∏ÄÁöÑÈÄâÈ°πÔºå‰∏Ä‰∏™Á®ãÂ∫èÂ∑•Á®ãÂ∏àÂêåÊ†∑ÈúÄË¶Å‰∫∫ÊñáÊÉÖÊÄÄÂíå‰∫∫ÊñáÁ¥†ÂÖªÔºåÊâçËÉΩÊõ¥Â•ΩÂú∞ÂºÄÂèëÂá∫Âê∏ÂºïÂíåÊª°Ë∂≥‰ªñ‰∫∫ËØâÊ±ÇÁöÑ‰∫ßÂìÅ„ÄÇ<br>
ÊàëÂú®‰∏ä‰∏ÄÂë®Ôºå‰πÉËá≥ËøáÂéªÁöÑ‰∏Ä‰∏™ÊúàÊØèÂ§©Êôö‰∏äÈÉΩ‰π†ÊÉØÊÄßÂú∞ÂºÄÂßãÂÜô‰ª£Á†ÅÔºå‰∏ÄÁõ¥ÁÜ¨Âà∞Ê∑±Â§úËß£ÂÜ≥ÈóÆÈ¢òÊâç‰∏äÂ∫ä„ÄÇÁÑ∂ÂêéË¢´ËìùÂÖâËæêÂ∞ÑÂú∞ÊØ´Êó†Âõ∞ÊÑèÔºåÊâìÂºÄÁ§æ‰∫§Â™í‰ΩìÂà∑Âà∑Âà∑Ôºå‰∏ÄÁõ¥Âà∑Âà∞ÊòèÊòèÊ≤âÊ≤âÂú∞Áù°Âéª„ÄÇÁ¨¨‰∫åÂ§©Ë¢´ÈóπÈìÉÂè´ÈÜíÔºå‰πüÊâçÂ†™Â†™Áù°Â§üÂÖ≠‰∏™Â∞èÊó∂„ÄÇÊó∂Èó¥‰∏ÄÈïøÔºåÁîüÁâ©ÈíüÂ∞±ÂΩªÂ∫ï‰π±Êéâ‰∫ÜÔºåÊàëÂºÄÂßãÈó¥Ê≠áÊÄßÂóúÁù°„ÄÅÊÑüÂÜíÊµÅÊ∂ï‰∏çÊ≠¢ÔºåÊØèÊó•Ë∑ëÊ≠•‰πüÊÑüËßâË∑ë‰∏çÂä®‰∫Ü„ÄÇËøôËÆ©ÊàëÂºÄÂßãÊÄùËÄÉ‰∏Ä‰∏™WLB(Work&amp;Life Balance) ÁöÑÈóÆÈ¢ò„ÄÇËøô‰πüÊòØÊú¨Ê¨°Âë®ËÆ∞ÁöÑËØùÈ¢ò„ÄÇ</p>
<h2 id="Â¶Ç‰ΩïÁúãÂæÖ-wlb">Â¶Ç‰ΩïÁúãÂæÖ WLB</h2>
<p>ÂØπËÆ∏Â§öÂ§ßÂ≠¶Â≠¶ÁîüËÄåË®ÄÔºåÊàë‰ª¨ÂØπ WLB ÂÖ∂ÂÆûÁº∫‰πèÊ∏ÖÊô∞ÁöÑËÆ§Áü•„ÄÇ‰∏ÄÊñπÈù¢ÔºåÂ≠¶ÁîüÔºåÂ∞§ÂÖ∂ÊòØÂ§ßÂ≠¶ÁîüÔºåÂπ∂Ê≤°Êúâ‰∏•Ê†ºÁöÑÂ∑•‰Ωú‰∏éÊó∂Èó¥ÁöÑÁïåÈôê„ÄÇÂá∫‰∫é‰∏™‰∫∫ËßÑÂàí‰∏éÁõÆÊ†áÁöÑ‰∏çÂêåÔºåÊó•Êó•Âà∑Âõæ‰π¶È¶ÜËÄÖÊúâ‰πãÔºåÁàÜËÇùÂÅöÈ°πÁõÆËÄÖÊúâ‰πãÔºåÊØèÂ§©Êë∏È±ºÁõ¥Âà∞ËÄÉËØïÂë®ÁÜ¨Â§úË°•Â§©ËÄÖ‰∫¶Êúâ‰πã„ÄÇ  Âè¶‰∏ÄÊñπÈù¢ÔºåÂ≠¶ÁîüÁöÑÂ∑•‰ΩúÊó∂Èó¥ÂæÄÂæÄ‰∏çÊÄé‰πàÂèóÂà∞ÈáçËßÜÔºàÂõ†‰∏∫Â§ßÂ≠¶ÁîüÊòØÊûÅÂ•ΩÁöÑÂªâ‰ª∑Âä≥Âä®ÂäõÔºâÔºåÊó∂Â∏∏ÊòØÂè¨‰πãÂç≥Êù•Êå•‰πãÂç≥ÂéªÔºåËøô‰πüÂØºËá¥Â≠¶ÁîüÁöÑÂ∑•‰Ωú/Â≠¶‰π†Êó∂Èó¥ÊûÅ‰∏çÂõ∫ÂÆö„ÄÇ<br>
ËøôÁßçÂ§ßÂ≠¶ÁîüÊ¥ªËôΩÁªô‰∫ÜÊàë‰ª¨ÊûÅÂ§ßÁöÑËá™Áî±ÔºåËÆ©Êàë‰ª¨ÂèØ‰ª•Ê†πÊçÆËá™Â∑±ÈúÄÊ±ÇÊù•ÂàÜÈÖçÊó∂Èó¥Ôºå‰ΩÜÊàëËÆ§‰∏∫Âú®ÊüêÁßçÁ®ãÂ∫¶‰∏äËøôÂπ∂‰∏çÊòØ‰∏ÄÁßçÂ•Ω‰∫ã„ÄÇ‰∏ÄÊñπÈù¢ÔºåÊàë‰ª¨ÈúÄË¶ÅÂÖªÊàêÂØπ‚ÄúÂ∑•‰Ωú‚ÄùÁöÑÊ¶ÇÂøµÔºåÊâæÂà∞Ëá™Â∑±ËÆ§ÂèØÁöÑÔºåËÉΩÂ§üÂÆûÁé∞Ëá™Êàë‰ª∑ÂÄºÁöÑ‰∫ã‰∏öÔºåÁÑ∂Âêé‰∏çÊñ≠Á≤æËøõ‚Äî‚ÄîÊ≥®ÊÑèÔºåËøôÈáåÈúÄË¶ÅÁöÑÊòØ‰∏ÄÁßçËá™ÂèëËÄåËá™ËßâÁöÑÂ∑•‰ΩúÔºõÂè¶‰∏ÄÊñπÈù¢ÔºåÊàë‰ª¨‰πüÈúÄË¶ÅÊéåÊè°Ë∞ÉÂâÇÂ∑•‰Ωú‰∏éÁîüÊ¥ªÁöÑËâ∫ÊúØÔºåÊâæÂà∞ÈÄÇÂêàËá™Â∑±ÁöÑÂ∑•‰ΩúËäÇÂ•èÂíå‰∫´ÂèóÁîüÊ¥ªÁöÑÊÄÅÂ∫¶„ÄÇ‰ªéËøôÁßçÊÑè‰πâ‰∏äÊù•ËØ¥ÔºåÂÖ´Â∞èÊó∂Â∑•‰ΩúÂà∂ÊòØ‰∏ÄÁßçÂæàÂÄºÂæóÂÄüÈâ¥ÁöÑÁîüÊ¥ªÊñπÂºè‚Äî‚ÄîÊØèÊó•ÁªôÂ∑•‰ΩúÁïôË∂≥‰∏ÄÂÆöÁöÑÊó∂Èó¥ÔºåÂâ©‰∏ãÁöÑÊó∂Èó¥Áî®‰∫é‰∫´ÂèóÁîüÊ¥ªÔºàÂΩìÁÑ∂Ôºå‰πüÂèØ‰ª•Áî®‰∫éÂèëÂ±ïÂÖ¥Ë∂£„ÄÅÊé¢Á¥¢‰∏çÂêå‰∫éÊó•Â∏∏Â∑•‰ΩúÁöÑÔºåÂèØ‰ª•ÊèêÂçáËá™Â∑±ÁöÑÈÇ£‰∏ÄÈÉ®ÂàÜÔºâÔºåÊÄª‰πãÔºå‰∏éÂ∑•‰Ωú‰øùÁïôÂá∫Ë∂≥Â§üÁöÑË∑ùÁ¶ª„ÄÇ‰ª•ÂÖçËøáÂø´Âú∞Ê∂àËÄóËá™Â∑±ÁöÑÊøÄÊÉÖÂíåÂèëÂ±ïÊΩúÂäõ„ÄÇ<br>
Âú®‰∏§Â§©ÂâçÔºåÊàëÁªà‰∫éÂ†™Â†™Ë∞ÉÊï¥Â•Ω‰∫ÜËá™Â∑±ÁöÑÁîüÁâ©ÈíüÔºå‰πüËøõ‰∏ÄÊ≠•ËßÑÂàíÂ•Ω‰∫ÜËá™Â∑±ÁöÑÂ≠¶‰π†Êó∂Èó¥Ë°®„ÄÇ‰∏ªË¶Å‰ªªÂä°Â∞±ÊòØÊääËá™Â∑±ÁöÑÁºñÁ®ãÂíåÂ≠¶‰π†ËÆ°ÁÆóÊú∫Áü•ËØÜÁöÑÊ¥ªÂä®Ë∞ÉÂà∞‰∏ãÂçàÔºå‰ª•ÂÖçËá™Â∑±Ê≤âËø∑Â≠¶‰π†Êó†Ê≥ïËá™ÊãîÔºåÂÜçÊ¨°Èô∑ÂÖ•ÁÜ¨Â§úÁöÑ‰∏çËâØÂæ™ÁéØ‰∏≠Âéª„ÄÇ‰ΩÜÊòØÁªàÊûÅÁõÆÊ†á‰ªçÁÑ∂ÊòØÂùöÊåÅËá™Â∑±ÁöÑÊó∂Èó¥Ë°®Ôºå‰∏çË¶Å‰∏∫‰ªªÂä°ÊâÄÂõ∞„ÄÇÂà∞ÁÇπÂêéÔºåËÆ∞ÂΩïÂÆåËá™Â∑±ÁöÑÁä∂ÊÄÅÂíåtodo-listÔºåÁÑ∂ÂêéËøÖÈÄüÂõûÂΩíÁîüÊ¥ª„ÄÇ‰∏çË¶ÅÈô∑ÂÖ•Âë®ÊúüÊÄßÁöÑ<a href="https://asana.com/zh-tw/resources/parkinsons-law">Â∏ïÈáëÊ£Æ</a>Âç±Êú∫‰∏≠Âéª„ÄÇ</p>
<h2 id="Êó∂Èó¥ÂÜó‰ΩôÁöÑÊúÄÂ§ßÊùÄÊâã">Êó∂Èó¥ÂÜó‰ΩôÁöÑÊúÄÂ§ßÊùÄÊâã</h2>
<p>ËØ•Êù°ÂºïËá™<a href="https://twitter.com/Svwang1">Á°ÖË∞∑ÁéãÂ∑ù</a>ÁöÑÊé®ÁâπÔºö</p>
<blockquote>
<p>ÊúÄÈáçË¶ÅÁöÑ‰∏Ä‰∏™ÂÜó‰ΩôÊòØÊó∂Èó¥ÂÜó‰ΩôÔºåÊúâÂ§ßÊääÁöÑÈó≤ÊöáÊó∂Èó¥ÂéªÂÅöËá™Â∑±ÊÑøÊÑèÂÅöÁöÑ‰∫ãÊÉÖÔºåËÄåÊääÂú®‰∏çÊÑøÊÑèÂÅöÁöÑ‰∫ãÊÉÖ‰∏äËÄóË¥πÁöÑÊó∂Èó¥Â∞ΩÈáèÂéãÁº©Âà∞Êé•Ëøë‰∫éÈõ∂„ÄÇ</p>
<p><strong>Êó∂Èó¥ÂÜó‰ΩôÁöÑÁ¨¨‰∏Ä‰∏™ÊùÄÊâãÊòØÔºöÊµ™Ë¥πÊó∂Èó¥ÂéªËæ©ËÆ∫ÔºåÊàñËØïÂõæËØ¥ÊúçËÆ§Áü•‰∏çÂêåÁöÑ‰∫∫Êé•ÂèóËá™Â∑±ÁöÑËßÇÁÇπ„ÄÇ</strong></p>
<p>Êó∂Èó¥ÂÜó‰ΩôÁöÑÁ¨¨‰∫å‰∏™ÊùÄÊâãÔºåÊòØÊ≤°ÊúâÊääËá™Â∑±ÁªèÂ∏∏Ë¶ÅÂÅöÁöÑ‰∏Ä‰∫õ‰∫ãÊÉÖËá™Âä®ÂåñÔºåÁÑ∂ÂêéÂèëÁé∞Ëá™Â∑±Âøò‰∫ÜÔºåÂèàË¶ÅËÄóË¥πÊó∂Èó¥Á≤æÂäõÂÜç‰∫∫Â∑•Âπ≤È¢Ñ„ÄÇ</p>
<p>Êó∂Èó¥ÂÜó‰ΩôÁöÑÁ¨¨‰∏â‰∏™ÊùÄÊâãÔºå<strong>ÊòØÊ≤°ÊúâÊ≥®Èáç‰∫éÂèØ‰ª•‰∏çÊñ≠Â§öÊ¨°ÈáçÂ§ç‰ΩøÁî®ÔºåÁßØÁ¥ØÁöÑË°å‰∏∫ÔºõËÄåËÄóË¥πÂ§ßÈáèÁ≤æÂäõÂú®‰Ωé‰ª∑ÂÄºÔºåÊó†Ê≥ïÈáçÂ§çÂà©Áî®ÁöÑË°åÂä®‰∏ä„ÄÇ</strong></p>
<p>Êó∂Èó¥ÂÜó‰ΩôÁöÑÁ¨¨Âõõ‰∏™ÊùÄÊâãÔºåÊòØÊ≤°ÊúâÂãáÊ∞îÂíåÊÑèÊÑøÈöîÊñ≠ÂêÑÁßç‰ΩéÊïàÁîöËá≥Êúâ‰º§ÂÆ≥ÊÄßÁöÑÁ§æ‰∫§Â∫îÈÖ¨ÔºåËÆ©‰∏Ä‰∫õ sb Èöè‰æøÁöÑÊé•Ëøë‰Ω†ÁöÑÁ©∫Èó¥ÔºåÊàñËÄÖÂÖÅËÆ∏‰∏Ä‰∫õÁæ§‰ΩìÁöÑÈîôËØØÈ£éÊ∞îÊΩúÁßªÈªòÂåñÁöÑÂπ≤Êâ∞‰Ω†ÁöÑÁã¨Á´ãÊÄùËÄÉ„ÄÇ</p>
<p>Êó∂Èó¥ÂÜó‰ΩôÁöÑÁ¨¨‰∫î‰∏™ÊùÄÊâãÔºåÊòØÊ≤°ÊúâÊ≥®ÊÑè‚ÄúËäÇÂà∂È•ÆÈ£ü - ÈÄÇÂ∫¶ËøêÂä® - ÂÖÖË∂≥Áù°Áú†&quot;, ÈöèÁùÄÂπ¥ÈæÑÂ¢ûÈïøÔºåÂêÑÁßçËÇ©ÈÖ∏ËÉåÁóõÔºåËßÜÂäõ‰∏ãÈôçÔºåÁ•ûÁªèË°∞Âº±ÔºåÈ´òË°ÄÁ≥ñË°ÄËÑÇÔºåÂøÉË°ÄÁÆ°Á≠âÊØõÁóÖ‰∏çÊñ≠Âä†ÂâßÔºåÊÅ∂ÊÄßÂæ™ÁéØÔºåËÑæÊ∞î‰πüË∂äÂèëÊö¥ÊàæÔºåËøÖÈÄüÊªëÂêëËÄÅÂπ¥Áó¥ÂëÜÔºåÊàê‰∫Ü‰∏Ä‰∏™‰∫ãÂÆû‰∏äÁöÑÂ∫ü‰∫∫„ÄÇ</p>
<p>Êó∂Èó¥ÂÜó‰ΩôÁöÑÁ¨¨ÂÖ≠‰∏™ÊùÄÊâãÔºåÊòØÊú¨Êù•ÂèØ‰ª•Ëä± N Â∞èÊó∂Êää‰∏Ä‰∏™‰∫ãÊÉÖÂÅöÂæóÂ∑Æ‰∏çÂ§öË∂≥Â§üÂ•ΩÂ∞±Êî∂Êâã‰∫ÜÔºåÁ°¨ÊòØË¶ÅËä± 3N, 4N ÁîöËá≥Êõ¥Â§öÂÄçÁöÑÊó∂Èó¥Ôºå‰ªÖ‰ªÖÊääÊïàÁõäÂÜçÊèêÈ´òÁôæÂàÜ‰πãÂá†ËÄåÂ∑≤ÔºåÁîöËá≥ÁîªËõáÊ∑ªË∂≥ÔºåÂ§ö‰ΩôÁöÑÂä™ÂäõÂèçËÄåÊää‰∫ãÊÉÖÊêûÁ†∏‰∫Ü„ÄÇ</p>
<p>Âà§Êñ≠Ëá™Â∑±&quot;Êó∂Èó¥ÂÜó‰Ωô&quot;ÁöÑÊ∞¥Âπ≥ÁöÑ‰∏Ä‰∏™ËßíÂ∫¶ÊòØÔºå‰Ω†Â¶ÇÊûú‰ªÄ‰πàÈÉΩ‰∏çÂÅöÔºå‰∏Ä‰∏™ÊúàÔºå‰∏â‰∏™ÊúàÔºåÁîöËá≥ÂÉè Rip Van Winkle ‰∏ÄÊ†∑Áù°ÂæàÂ§öÂπ¥ÁöÑËßâÂÜçÈÜíÊù•Ôºå‰Ω†ÁöÑÁä∂ÂÜµ (Ë¥¢Âä°ÊàñËÄÖÂà´ÁöÑÊñπÈù¢) ÊòØ‰∏çÊòØÂèØ‰ª•Áª¥ÊåÅÁé∞Áä∂ÔºåÁîöËá≥‰ºöÂèòÂæóÊØîÁé∞Âú®Êõ¥Â•Ω? Â¶ÇÊûúÊúâÂì™‰∫õÂú∞ÊñπÈúÄË¶Å‰∫∫Â∑•Âπ≤È¢ÑÔºåÊòØÂê¶ÂèØ‰ª•Áé∞Âú®Â∞±Êú™Èõ®Áª∏Áº™ÔºåÊääÂÆÉÈ¢ÑÂÖàËá™Âä®ËÆæÁΩÆÂ•ΩÔºü</p>
<p>‚ÄúÊó∂Èó¥ÂÜó‰Ωô‚ÄùÂπ∂‰∏çÂÆåÂÖ®Á≠âÂêå‰∫é‚ÄúÈ´òÊïàÁéá‚ÄùÔºåÂè¶‰∏Ä‰∏™ËßíÂ∫¶ÊòØÂΩìÊÑèËØÜÂà∞Ëá™Â∑±ÁöÑÊñπÂêëÊòØÈîôËØØÁöÑÊó∂ÂÄôÔºåÂèØ‰ª•ËøÖÈÄüË∞ÉÊï¥Á∫†ÈîôÁöÑËÉΩÂäõ„ÄÇÂ¶ÇÊûúÊñπÂêëÈîôËØØÔºåÊÑèËØÜÂà∞ÈîôËØØÂêéÂõ†‰∏∫ÂêÑÁßçÈôêÂà∂ËÄåÊó†Ê≥ïËøÖÈÄüÊäΩË∫´Á¶ªÂºÄÔºåÈÇ£‰πà‰∏çÁÆ°ÊïàÁéáÂ§öÈ´òÔºå‰πüÊòØÊûâÁÑ∂„ÄÇ</p>
<p>‰ªª‰Ωï‰∫ãÊÉÖÔºåÂ¶ÇÊûú‰∏çËÉΩÈöèÊó∂ÊäΩË∫´Á¶ªÂéªÔºåËÄåË¶ÅÊó∂Â∏∏‰∫ãÂøÖË∫¨‰∫≤ÔºåÊòØ‰∏Ä‰∏™ÊΩúÂú®ÁöÑÊó∂Èó¥‰∏äÁöÑË¥üËµÑ‰∫ßÔºåÊòØÂØπÊó∂Èó¥ÂÜó‰ΩôÁöÑÂ∑®Â§ßÊçüÂÆ≥„ÄÇÂæÄÂæÄ‰∏ÄÂºÄÂßãÊ≤°ÊúâÂú®ÊÑèÔºåÂá∫‰∫ÜÈóÆÈ¢òÂêéÊâçÊÑèËØÜÂà∞‰ª£‰ª∑Â∑®Â§ß„ÄÇ</p>
</blockquote>
<p>Êàë‰ª¨ÂæÄÂæÄÊÑèËØÜ‰∏çÂà∞Êó∂Èó¥ÊòØÂ§ö‰πàÂú∞ÂÆùË¥µÔºå‰ª•Ëá¥‰∫éÂ∞ÜÂÆÉËΩªÊé∑Âà∞ÈÇ£‰∫õÊ≤°Êúâ‰ª∑ÂÄºÁöÑÂú∞ÊñπÂéªÔºåÈô∑ÂÖ•Êó†Â∫ïÁöÑÊó∂Èó¥Êº©Ê∂°Êó†Ê≥ïËá™Êãî„ÄÇÊàëÈùûÂ∏∏ËÆ§ÂèØËøô‰∏™‚ÄúÊó∂Èó¥ÂÜó‰Ωô‚ÄùÁöÑÂÅöÊ≥ïÔºå‰ª•Ââç‰πüËä±‰∫ÜÂæàÂ§öÁöÑÁªèÂéÜÊù•Êé¢Á¥¢‚ÄúËá™Âä®ÂåñÂ∑•ÂÖ∑ÊµÅ‚Äù„ÄÇ‰ΩÜËøôÊÆµËØùÁöÑÁ°ÆÁªô‰∫ÜÊàëÊõ¥Â§öÁöÑÂêØÁ§∫ÔºöÂ∞ÜÊó∂Èó¥Êµ™Ë¥πÂú∞ÁîªÂú®‰∏çÂÄºÂæóÁöÑÂú∞ÊñπÂêåÊ†∑ÊòØ‰∏ÄÁßç‰∏çË¥üË¥£‰ªª„ÄÇÂ¶ÇÊûúÂøÖÈ°ªÊµ™Ë¥πÊó∂Èó¥ÔºåÈÇ£Â∞±Â∞ÜÊó∂Èó¥Êµ™Ë¥πÁªôËá™Â∑±ÂíåËá™Â∑±Áà±ÁöÑ‰∫∫Ë∫´‰∏äÂêß„ÄÇËã•ÊòØÊó†Ë∞ìÂú∞ËôöÊé∑Êó∂Èó¥ËÄåÊÉ≥Ë¶ÅËé∑ÂæóÂø´‰πêÔºåÊñØ‰ª•‰ºêÊ†πËÄåÊ±ÇÊú®ËåÇÔºåÂ°ûÊ∫êËÄåÊ¨≤ÊµÅÈïø‰πü„ÄÇ</p>
]]></content>
      <categories>
        <category>ÈöèÁ¨î</category>
        <category>Âë®ËÆ∞</category>
      </categories>
      <tags>
        <tag>weekly journal</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1687. Delivering Boxes from Storage to Ports</title>
    <url>/2022/09/01/1687.delivering-boxes-from-storage-to-ports/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="analyse">Analyse</h2>
<p>As the dynamic programming solution‚Äôs max time complexity is <img src="https://math.now.sh?inline=%5Ctext%20O%28n%5E2%29" style="display:inline-block;margin: 0;">. We could simply get the first solution:<br>
This Code comes from <a href="https://leetcode.com/linshan007/">linshan077</a>. And it is almost the best implement of DP. Where the trip assist to decline the cost of repeatedly judging <code>boxes[j][0] == boxes[j-1][0]</code> and <code>dp</code> is the common implement of dynamic programming.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">boxDelivering</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; boxes, <span class="keyword">int</span> portsCount, <span class="keyword">int</span> maxBoxes, <span class="keyword">int</span> maxWeight)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">trips</span><span class="params">(boxes.size())</span></span>;</span><br><span class="line">        trips[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; boxes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (boxes[i][<span class="number">0</span>] == boxes[i<span class="number">-1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">                trips[i] = trips[i<span class="number">-1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trips[i] = trips[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp[i+1] is minimum trips assuming i is the last box to deliver and will return to port afterwards. </span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(boxes.size()+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            dp[i+<span class="number">1</span>] = INT_MAX;</span><br><span class="line">            <span class="keyword">int</span> sum_weights = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j&gt;=<span class="number">0</span> &amp;&amp; i-j+<span class="number">1</span> &lt;= maxBoxes; --j) &#123;</span><br><span class="line">                sum_weights += boxes[j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (sum_weights &gt; maxWeight) <span class="keyword">break</span>;</span><br><span class="line">                dp[i+<span class="number">1</span>] = std::<span class="built_in">min</span>(dp[i+<span class="number">1</span>], dp[j]+<span class="number">2</span>+trips[i]-trips[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>However, it got a TLE.  And we translate<code>min(dp[j]+2+trips[i]-trips[j])</code> into <code>2+trips[i]+min(dp[j]-trips[j])</code>. It turns to a question: find the minimum in a Slide window(Which we can easily solve by a deque with total time complexity <img src="https://math.now.sh?inline=%5Ctext%20O%28n%29" style="display:inline-block;margin: 0;">).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">boxDelivering</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; boxes, <span class="keyword">int</span> portsCount, <span class="keyword">int</span> maxBoxes, <span class="keyword">int</span> maxWeight)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">trips</span><span class="params">(boxes.size())</span></span>;</span><br><span class="line">        trips[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; boxes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (boxes[i][<span class="number">0</span>] == boxes[i<span class="number">-1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">                trips[i] = trips[i<span class="number">-1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trips[i] = trips[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt; <span class="title">weights</span><span class="params">(boxes.size()+<span class="number">1</span>)</span></span>;</span><br><span class="line">        weights[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; boxes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            weights[i+<span class="number">1</span>] = weights[i]+boxes[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(boxes.size()+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">long</span>&gt; <span class="title">weight</span><span class="params">(boxes.size()+<span class="number">1</span>)</span></span>;</span><br><span class="line">        weight[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i != boxes.<span class="built_in">size</span>()+<span class="number">1</span>; ++i)</span><br><span class="line">            weight[i] = weight[i<span class="number">-1</span>] + boxes[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        deque&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; dq;</span><br><span class="line">        <span class="keyword">int</span> temp, totalWeight, totalBoxes;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        dq.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>,dp[<span class="number">0</span>] - trips[<span class="number">0</span>]&#125;);</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span> + trips[<span class="number">0</span>] + dq.<span class="built_in">front</span>().second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; boxes.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            temp = dp[i] - trips[i];</span><br><span class="line">            <span class="keyword">while</span> (!dq.<span class="built_in">empty</span>() &amp;&amp; dq.<span class="built_in">back</span>().second &gt; temp)</span><br><span class="line">                dq.<span class="built_in">pop_back</span>();</span><br><span class="line">            dq.<span class="built_in">push_back</span>(&#123;i,temp&#125;);</span><br><span class="line">            totalWeight = weight[i+<span class="number">1</span>] - weight[j];</span><br><span class="line">            totalBoxes = i - j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (totalWeight &gt; maxWeight || totalBoxes &gt; maxBoxes)&#123;</span><br><span class="line">                dq.<span class="built_in">pop_front</span>();</span><br><span class="line">                j = dq.<span class="built_in">front</span>().first;</span><br><span class="line">                totalWeight = weight[i+<span class="number">1</span>] - weight[j];</span><br><span class="line">                totalBoxes = i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i+<span class="number">1</span>] = <span class="number">2</span> + trips[i] + dq.<span class="built_in">front</span>().second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The above code deducts the cost of  repetitive calculation of <code>dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j])</code> And turns <img src="https://math.now.sh?inline=%5Ctext%20O%28mn%29" style="display:inline-block;margin: 0;">(where m is the maxBoxes) into <img src="https://math.now.sh?inline=%5Ctext%20O%28n%29%20%2B%20%5Ctext%20O(n)%20%3D%20%5Ctext%20O(n)" style="display:inline-block;margin: 0;">.</p>
<h2 id="reference">Reference</h2>
<ol>
<li><a href="https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/discuss/1369248/C%2B%2B-DP-solution-with-thinking-process%3A-brute-force-greater-priority-queue-greater-mono-queue">C++ DP solution with thinking process: brute force -&gt; priority queue -&gt; mono queue</a></li>
<li><a href="https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/discuss/2330389/Java-or-From-O(N2)-to-O(N)-or-MonoQueue-w-DP">Java | From O(N^2) to O(N) | MonoQueue w/ DP</a></li>
</ol>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>LeetCodeÁ¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ÁöÑ 0/3/5 ËßÑÂàô</title>
    <url>/2022/08/30/c-0-3-5-rule/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>ÁºñÁ®ã‰∏âÂ§ßÈîôËßâÔºö<br>
ÊàëÊØîÁºñËØëÂô®ËÅ™Êòé<br>
ÊàëË∂ÖË∂ä‰∫ÜÊ†áÂáÜÂ∫ì<br>
ÊàëËÉΩÁÆ°Â•ΩÂÜÖÂ≠ò</p>
</blockquote>
<h2 id="ÈóÆÈ¢òÊèèËø∞">ÈóÆÈ¢òÊèèËø∞</h2>
<p>Áî±‰∫éÊúÄËøëÂú®Áúã„ÄäÁÆóÂØº„ÄãÔºåÊàëÂ∞±ËêåÁîü‰∫ÜÂÆûÁé∞ÁÆóÂØºÁöÑÊÉ≥Ê≥ï„ÄÇ‰πãÂâçÂÆûÁé∞ÁöÑÁ∫øË°®List.hÊñá‰ª∂‰∏ÄÁõ¥Á®≥ÂÆöËøê‰ΩúÔºå‰ΩÜÂú®ÁªèÂéÜ‰∫ÜÂçïÂÖÉÊµãËØïÂπ∂Á®≥ÂÆöËøêË°åÊï∞Â§©ÂêéÔºåÂΩìÊàëÂ∞ÜÂÆÉÂ∫îÁî®Âà∞ÊàëÁöÑÊñ∞‰ª£Á†ÅÈÉ®ÂàÜÊó∂ÔºåÂá∫Áé∞‰∫Ü‰∏Ä‰∏™bug„ÄÇ<br>
ÊàëÁöÑ‰ª£Á†ÅÊñá‰ª∂Â¶Ç‰∏ãÔºö<br>
List.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">List</span>() : <span class="built_in">head</span>(<span class="keyword">new</span> class Node&lt;T&gt;), <span class="built_in">tail</span>(<span class="keyword">new</span> class Node&lt;T&gt;) &#123;</span><br><span class="line">        head-&gt;nextNode = tail;</span><br><span class="line">        tail-&gt;prevNode = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>(T rs) : <span class="built_in">List</span>() &#123;</span><br><span class="line">        <span class="built_in">insert</span>(rs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">List</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (class Node&lt;T&gt; *pointer = tail; pointer != head;) &#123;</span><br><span class="line">            <span class="keyword">auto</span> temp = pointer;</span><br><span class="line">            pointer = pointer-&gt;prevNode;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(T rs)</span></span>&#123;</span><br><span class="line">	    <span class="keyword">auto</span> pointer = <span class="keyword">new</span> class Node&lt;T&gt;(rs, tail-&gt;prevNode, tail);</span><br><span class="line">    	tail-&gt;prevNode = pointer;</span><br><span class="line">    	pointer-&gt;prevNode-&gt;nextNode = pointer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Vertex</span>, <span class="keyword">class</span> <span class="title">Edge</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjacentList</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::map&lt;shared_ptr&lt;Vertex&gt;,List&lt;Edge&gt;&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Vertex</span>, <span class="keyword">class</span> <span class="title">Edge</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> AdjacentList&lt;Vertex, Edge&gt;::<span class="built_in">insert</span>(std::shared_ptr&lt;Vertex&gt; origin, std::shared_ptr&lt;Vertex&gt; next, <span class="keyword">double</span> w) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!graph[origin])</span><br><span class="line">        graph[origin] = List&lt;Edge&gt;();</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="built_in">Edge</span>(next, w);</span><br><span class="line">    graph[origin].<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Êé•‰∏ãÊù•Áªô‰Ω†‰∏âÂàÜÈíüÔºåËØïËØïËÉΩ‰∏çËÉΩÊâæÂá∫bugÂú®Âì™Ôºü</p>
<p>Â¶ÇÊûú‰Ω†Êâæ‰∏çÂá∫bugÂú®Âì™ÈáåÔºåËØ∑Êé•ÁùÄÂæÄ‰∏ãÁúãÔºö<br>
C++‰∏∫Êàë‰ª¨Êèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÊô∫ËÉΩÊåáÈíàÔºåÁî®Êù•ÁÆ°ÁêÜËµÑÊ∫êÁöÑÁîüÂëΩÂë®Êúü„ÄÇÂ§ßÈÉ®ÂàÜÊÉÖÂÜµ‰∏ãÊàë‰ª¨Âè™Ë¶ÅÁî®Â•ΩÊô∫ËÉΩÊåáÈíàÊù•ÁÆ°ÁêÜËµÑÊ∫êÂ∞±Â•Ω„ÄÇ‰∏çËøáÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºåÊàë‰ª¨ÂèØËÉΩ‰ºöÈÅáÂà∞Á©∫Èó¥‰∏çË∂≥ÔºåÊàñÊòØÈúÄË¶ÅËá™ÂÆöÂà∂ÁöÑËµÑÊ∫êÁÆ°ÁêÜÁ±ª„ÄÇÁÑ∂ËÄåÔºåÁºñÂÜôËµÑÊ∫êÁÆ°ÁêÜÁ±ªÂæàÂõ∞ÈöæÔºå‰Ω†ÂæàÈöæÊ£ÄÊµãÂíåÊéíÈô§ÂÜÖÂ≠òÊ≥ÑÊºèÊàñÁ©∫ÊÇ¨ÊåáÈíàÁöÑÁé∞Ë±°„ÄÇ<br>
ÂõûÂà∞Êàë‰ª¨‰∏äÈù¢ÁöÑËøô‰∏™ÂáΩÊï∞ÔºåbugÂÆûÈôÖ‰∏äÂá∫Áé∞Âú®</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!graph[origin])</span><br><span class="line">        graph[origin] = List&lt;Edge&gt;();</span><br></pre></td></tr></table></figure>
<p>ËøôÈáå„ÄÇÂú®ËøôÈáåÔºåÊàë‰ª¨‰∏çÊòØÂàùÂßãÂåñÔºåËÄåÊòØ‰ΩøÁî®Â§çÂà∂ËµãÂÄºËøêÁÆóÁ¨¶</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ClassType &amp;operate=(ClassType &amp;rs);</span><br></pre></td></tr></table></figure>
<p>‰∏∫mapÁöÑsecondÂÄºËµãÂÄº„ÄÇÁî±‰∫éÊàë‰ª¨ÁöÑListÁ±ªÂπ∂Ê≤°ÊúâËá™ÂÆö‰πâÂ§çÂà∂ËµãÂÄºËøêÁÆóÁ¨¶ÔºåC++ÁöÑÈªòËÆ§Â§çÂà∂ËµãÂÄºËøêÁÆóÁ¨¶ÁöÑÊìç‰ΩúÊòØÂ∞ÜÂéüÊù•Á±ªÁöÑÊØè‰∏Ä‰∏™ÊàêÂëòÂèòÈáèËµãÂÄºÁªôÊñ∞ÁöÑÁ±ª„ÄÇÊâÄ‰ª•ËøôÈáåÔºå<code>graph[origin]</code>ÂæóÂà∞‰∫Ü‰∏Ä‰∏™<code>List&lt;Edge&gt;()</code>Á±ªÁöÑheadÂíåtailÊåáÈíàÔºàÊ≥®ÊÑèÔºåËøôÊ†∑ÈùûÂ∏∏Âç±Èô©ÔºÅË¶Å‰πà‰∏§‰∏™ListÂú®Âêå‰∏ÄÂùóÈìæË°®‰∏äËøõË°åÊèíÂÖ•Âà†Èô§Êìç‰ΩúÔºåË¶Å‰πàÈÄ†ÊàêÂÜÖÂ≠òÊ≥ÑÊºèÁöÑÂêéÊûúÔºâ<br>
Êàë‰ª¨Âú®ListÁöÑinsertÂáΩÊï∞Â§ÑÊâì‰∏Ä‰∏™Êñ≠ÁÇπÔºåÁúãÁúã‰ºöÂèëÁîü‰ªÄ‰πàÔºö<br>
<img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1661856814/gxKom_ztdkff.png" alt="debug1"><br>
ÂèØ‰ª•ÁúãÂà∞Ôºå<code>graph[origin]</code>ÁöÑheadÂíåtailÁöÑÂâçÂêéÊåáÈíàËâØÂ•Ω„ÄÇ‰ΩÜÊàë‰ª¨ÂÜçÊâßË°å‰∏ÄÊ≠•ÁúãÁúãÔºö<br>
<img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1661856811/J6n22_szifw4.png" alt="debug2"><br>
‰Ω†‰ºöÂèëÁé∞ÔºöÂèòÈáèpointerÁ´üÊåáÂêë‰∏Ä‰∏™‚ÄúÂ∑≤ÂàÜÈÖç‚ÄùÁöÑÊåáÈíà<code>graph[origin].head</code>ÔºÅËøôÊòØ‰∏∫‰ªÄ‰πàÂë¢Ôºü<br>
ÂÖ∂ÂÆûÂà∞ËøôÈáåÈóÆÈ¢òÂ∑≤ÁªèÊØîËæÉÊ∏ÖÊô∞‰∫ÜÔºö‰∏∫<code>graph[origin]</code>ËµãÂÄºÁöÑ<code>List&lt;Edge&gt;()</code>ÊòØ‰∏Ä‰∏™Âè≥ÂÄºÔºåÂú®ÂÆåÊàêËµãÂÄºËØ≠Âè•‰πãÂêéÂ∞±Ë¢´ÊûêÊûÑ‰∫Ü„ÄÇÊàë‰ª¨Ëá™ÂÆö‰πâÁöÑÊûêÊûÑÂáΩÊï∞‰ªétailÂºÄÂßãÈÄê‰∏™ÂêëÂâçÔºåÂ∞ÜÊâÄÊúâÊåáÈíàÊåáÂêëÁöÑËµÑÊ∫êÈáäÊîæÊéâ„ÄÇÈÇ£‰∏∫‰ªÄ‰πàÂú®dubuggerËøôÈáåËøòËÉΩÁúãÂà∞head„ÄÅtailÂíåÂÆÉ‰ª¨ÊåáÂêëÁöÑÂÄºÂë¢ÔºüËøôÊòØÂõ†‰∏∫ÁºñËØëÂô®Âú®Â∞ÜËµÑÊ∫êËøîÂõûÁªôÂä®ÊÄÅÂÜÖÂ≠òÊ±†ÁöÑÊó∂ÂÄô‰∏ç‰ºöÊâßË°åÁΩÆÈõ∂Êìç‰ΩúÔºåËÄåÊòØÁÆÄÂçïÂú∞Â∞ÜËØ•Âú∞ÂùÄÂÖ•Ê†àÁ≠âÂæÖ‰∏ã‰∏ÄÊ¨°Ë∞ÉÁî®„ÄÇÊâÄ‰ª•ÊåáÂêëËØ•Âú∞ÂùÄÁöÑÁ±ª‰ªçÁÑ∂ÂèØ‰ª•Ëß£Èáä‚Äî‚Äî‚Äî‚ÄîËôΩÁÑ∂ÂÆÉÊó©Â∑≤Ë¢´ÊûêÊûÑ‰∫Ü„ÄÇ<br>
ÈÇ£ËøôÁßçÈóÆÈ¢òÊÄéÊ†∑Ëß£ÂÜ≥Âë¢Ôºü‰∏ÄÁßçÊñπÂºèÊòØÊ≠£Â∏∏Ë∞ÉÁî®ÂÆÉÁöÑÊûÑÈÄ†ÂáΩÊï∞‰ª•‰æø‰πãÂêéË∞ÉÁî®ÊàêÂëòÂáΩÊï∞Ôºö</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!graph[origin])</span><br><span class="line"><span class="comment">//construct graph[origin]</span></span><br><span class="line">      graph[origin];</span><br></pre></td></tr></table></figure>
<p>‰ΩÜÂè¶‰∏Ä‰∏™Êõ¥ÈáçË¶ÅÁöÑÊìç‰ΩúÊòØÔºåÊõ¥ÊîπListÁöÑÁ±ªÂáΩÊï∞</p>
<h2 id="0-3-5ËßÑÂàô">0/3/5ËßÑÂàô</h2>
<h3 id="Èõ∂ËßÑÂàô">Èõ∂ËßÑÂàô</h3>
<p>ËßÑÂàôÁöÑÈõ∂ÈÉ®ÂàÜËßÑÂÆöÔºåÂú®ÂàõÂª∫Á±ªÊó∂Ôºå‰Ω†ÂèØ‰ª•‰∏çÁºñÂÜô‰ªª‰ΩïÁâπÊÆäÊàêÂëòÂáΩÊï∞ÔºàËÄåÁî±ÁºñËØëÂô®ÈªòËÆ§ÁîüÊàêÔºâ„ÄÇ</p>
<h3 id="‰∏âËßÑÂàô">‰∏âËßÑÂàô</h3>
<blockquote>
<p>Â¶ÇÊûú‰Ω†ÁöÑÁ±ªÈúÄË¶Å‰ªª‰Ωï</p>
<ul>
<li>‰∏Ä‰∏™Â§çÂà∂ÊûÑÈÄ†ÂáΩÊï∞Ôºå</li>
<li>ËµãÂÄºËøêÁÆóÁ¨¶Ôºå</li>
<li>ÊûêÊûÑÂáΩÊï∞Ôºå</li>
</ul>
<p>ÊòéÁ°ÆÂÆö‰πâÔºåÈÇ£‰πàÂæàÂèØËÉΩÈúÄË¶ÅËøô‰∏â‰∏™„ÄÇ</p>
</blockquote>
<p>Âõ†‰∏∫ÂÆÉ‰ª¨‰∏â‰∏™ÈÄöÂ∏∏ÈÉΩÁî®‰∫éÁÆ°ÁêÜËµÑÊ∫êÔºåÂ¶ÇÊûú‰Ω†ÁöÑÁ±ªÁî®Êù•ÁÆ°ÁêÜËµÑÊ∫êÔºåÂàôÈÄöÂ∏∏ÈúÄË¶ÅÁÆ°ÁêÜÂ§çÂà∂ÂíåÈáäÊîæ„ÄÇ<br>
Â¶ÇÊûúÂ§çÂà∂Á±ªÁÆ°ÁêÜÁöÑËµÑÊ∫êÊ≤°ÊúâËâØÂ•ΩÁöÑËØ≠‰πâÔºåÂàôËÄÉËôëÈÄöËøáÂ∞ÜÂ§çÂà∂ÊûÑÈÄ†ÂáΩÊï∞ÂíåËµãÂÄºËøêÁÆóÁ¨¶Â£∞Êòé‰∏∫<code>=delete;</code>ÔºàÈºìÂä±ÔºâÊàñÊîæÂÖ• private scope Âπ∂‰∏çËøõË°åÂÆö‰πâ„ÄÇ</p>
<h3 id="‰∫îËßÑÂàô">‰∫îËßÑÂàô</h3>
<p>Âú®‰∏âËßÑÂàôÁöÑÂü∫Á°Ä‰∏äÔºåC++11Ê†áÂáÜÂºïÂÖ•‰∫ÜÂè≥ÂÄº„ÄÇÊâÄ‰ª•ËøòÈúÄË¶ÅËÄÉËôëÁßªÂä®ÊûÑÈÄ†ÂáΩÊï∞ÂíåÁßªÂä®ËµãÂÄºÂáΩÊï∞ÔºåÂç≥</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassExample</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	~<span class="built_in">ClassExample</span>() = &#123;<span class="comment">/*details or default*/</span>&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">ClassExample</span>(ClassExample &amp;) = &#123;<span class="comment">/*details or default*/</span>&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">ClassExample</span>(ClassExample &amp;&amp;) = &#123;<span class="comment">/*details or default*/</span>&#125;</span><br><span class="line">	</span><br><span class="line">	ClassExample &amp;<span class="keyword">operator</span>=(ClassExample &amp;) = &#123;<span class="comment">/*details or default*/</span>&#125;</span><br><span class="line">	</span><br><span class="line">	ClassExample &amp;<span class="keyword">operator</span>=(ClassExample &amp;&amp;) = &#123;<span class="comment">/*details or default*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="‰ª£Á†ÅÊîπËøõ">‰ª£Á†ÅÊîπËøõ</h2>
<p>Êàë‰ª¨Â¢ûÂä†ÁßªÂä®ËµãÂÄºÊìç‰ΩúÁöÑÂÆö‰πâÔºåÂèØ‰ª•ÁªÉ‰π†‰∏Ä‰∏ãÂÖ∂‰ªñÂá†‰∏™ÂáΩÊï∞ÁöÑÂÆö‰πâ„ÄÇ<br>
Áî±‰∫éListÁ±ªÁöÑ<code>head</code>Âíå<code>tail</code>‰∏∫Âì®ÂÖµÂÖÉÁ¥†ÔºåÊàë‰ª¨Êó†ÈúÄËÄÉËôëÔºå‰πüÊó†ÈúÄÂ§çÂà∂„ÄÇËÄåÊòØÂ∞ÜListÁ±ª‰∏≠ÁöÑÂÖÉÁ¥†Â§çÂà∂ËøáÊù•„ÄÇ</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	List&lt;T&gt; &amp;<span class="keyword">operator</span>=(List&lt;T&gt; &amp;&amp;rs)&#123;</span><br><span class="line">		<span class="comment">//free this class&#x27;s element but reserve guard elements</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> pointer = tail-&gt;prevNode; pointer != head;)&#123;</span><br><span class="line">			<span class="keyword">auto</span> temp = pointer;</span><br><span class="line">			pointer = pointer-&gt;prevNode;</span><br><span class="line">			<span class="keyword">delete</span> temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//duplicate rs&#x27; elements</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> pointer = rs.head-&gt;nextNode; pointer != rs.tail; pointer = pointer-&gt;nextNode)&#123;</span><br><span class="line">			<span class="built_in">insert</span>(*pointer);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>codingËøáÁ®ã‰∏≠Ë∏©ËøáÁöÑÂùë</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>linuxÂ¶Ç‰ΩïÈÄöËøáSMTPÊúçÂä°Âô®ÂèëÈÄÅQQÈÇÆ‰ª∂</title>
    <url>/2022/06/28/linux-ru-he-tong-guo-smtp-fu-wu-qi-fa-song-qq-you-jian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>ËøôÊòØ„ÄäËÆ°ÁÆóÊú∫ÁΩëÁªú‚Äî‚ÄîËá™È°∂Âêë‰∏ãÊñπÊ≥ï„ÄãÈáåÁöÑ‰∏Ä‰∏™Â∞èÂÆûÈ™åÔºåÂØπÁêÜËß£smtpÁöÑ‰∫§ÊµÅÂíåÁîµÂ≠êÈÇÆ‰ª∂ÁöÑÊä•Â§¥ÈÉΩÂæàÊúâÂ∏ÆÂä©„ÄÇÊòØ‰∏™ÂæàÂÄºÂæóÂ∞ùËØïÁöÑÂÆûÈ™å„ÄÇ</p>
<p>È¶ñÂÖàÔºåÊàë‰ª¨ÈúÄË¶Å‰∏ãËΩΩ telnet</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install telnetd -y</span><br></pre></td></tr></table></figure>
<p>ÂÖ∂Ê¨°ÔºåÊåâÁÖßËøô‰∏™ÊñáÊ°£ÊâÄÁ§∫ÁöÑÊñπÂºèÂºÄÂêØQQÈÇÆÁÆ±ÁöÑSMTPÊúçÂä°<br>
<a href="https://www.ujcms.com/documentation/351.html"># ‰ΩøÁî®QQÈÇÆÁÆ±ÂèëÈÄÅÈÇÆ‰ª∂ÔºåQQÈÇÆÁÆ±ÁöÑsmtpËÆæÁΩÆ</a><br>
Âπ∂ËÆ∞‰ΩèËá™Â∑±ÁöÑË∫´‰ªΩËÆ§ËØÅÂØÜÁ†Å„ÄÇ</p>
<p>Êé•‰∏ãÊù•ÔºåÊâìÂºÄlinusÁ≥ªÁªüÁöÑ<strong>xshell</strong>ÔºàÂø´Êç∑ÈîÆ ctrl+alt+TÔºâÔºåËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet smtp.qq.com 25</span><br></pre></td></tr></table></figure>
<p>‰ºöÁúãÂà∞Â¶Ç‰∏ãËøîÂõûÔºö<br>
<img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1657184045/Pasted_image_20220627002748_uocva7.png" alt="terminal"></p>
<p>‰æùÊ¨°ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auth login  //ËæìÂÖ•ÂëΩ‰ª§È™åËØÅË∫´‰ªΩ</span><br><span class="line">334 VXNlcm5hbWU6  //ÊúçÂä°Âô®ËøîÂõûUsername:ÁöÑbase64ÁºñÁ†ÅÁ¨¶</span><br><span class="line">******** //ËæìÂÖ•Ëá™Â∑±ÈÇÆÁÆ±Âè∑Ôºå‰æã123456789@qq.comÁöÑbase64ÁºñÁ†ÅÂÄº</span><br><span class="line">334 UGFzc3dvcmQ6  //ÊúçÂä°Âô®ËøîÂõûPassword:ÁöÑbase64ÁºñÁ†ÅÁ¨¶</span><br><span class="line">******** //ËæìÂÖ•Ëá™Â∑±Ë∫´‰ªΩËÆ§ËØÅÂØÜÁ†ÅÁöÑbase64ÁºñÁ†ÅÂÄº</span><br><span class="line">235 Authentication successful  //ËøûÊé•ÊàêÂäü</span><br></pre></td></tr></table></figure>
<p>base64ÁºñÁ†ÅÂèØ‰ª•‰∏äÁΩëÈöè‰æøÊâæËΩ¨Êç¢Â∑•ÂÖ∑Ôºå‰øùÈô©Ëµ∑ËßÅÈÇÆÁÆ±Âè∑ÂíåË∫´‰ªΩËÆ§ËØÅÂØÜÁ†ÅÂàÜÂà´Áî®‰∏§‰∏™‰∏çÂêåÁöÑÁΩëÁ´ôÁºñÁ†Å„ÄÇÊàñËá™Â∑±ÂÜô‰∏Ä‰∏™‰πüË°å„ÄÇ</p>
<p>ËøûÊé•ÊàêÂäüÂêéÂ∞±ÂèØ‰ª•ÊåâÁÖß‰π¶‰∏äÁöÑÊ≠•È™§Ôºö</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Helo ****  //‰∏ªÊú∫ÂêçÔºåÂèØÂ°´ÈÇÆÁÆ±Âè∑</span><br><span class="line">250-newxmesmtplogicsvrsza9.qq.com-9.21.152.27-66638923</span><br><span class="line">250-SIZE 73400320</span><br><span class="line">250 OK</span><br><span class="line">mail from: &lt;123456789@qq.com&gt; //Â°´‰Ω†ÁöÑÈÇÆÁÆ±Âè∑</span><br><span class="line">250 OK</span><br><span class="line">rcpt to: &lt;123456789@gmail.com&gt;  //Â°´‰Ω†ÊÉ≥ÂèëÈÄÅÁöÑÈÇÆÁÆ±Âè∑</span><br><span class="line">250 OK</span><br><span class="line">data</span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br><span class="line">//Êä•Â§¥ÂøÖ‰∏çÂèØÂ∞ëÔºåÂê¶ÂàôÂèØËÉΩË¢´ÂΩìÊàêÂûÉÂúæÈÇÆ‰ª∂ÈÄÄÂõû</span><br><span class="line">From: 123456789@qq.com</span><br><span class="line">To: 123456789@gmail.com</span><br><span class="line">Subject: It may be a huge joke!</span><br><span class="line"></span><br><span class="line">Just a test</span><br><span class="line">Could you reach this message?</span><br><span class="line">.</span><br><span class="line">250 OK: queued as.</span><br></pre></td></tr></table></figure>
<p>ÈöèÂêéÔºåÂ∞±ËÉΩÊàêÂäüÊî∂Âà∞Ëøô‰ªΩÈÇÆ‰ª∂‰∫ÜÔºÅ<br>
<img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1657184045/Pasted_image_20220627004011_n06trm.png" alt="Êé•Êî∂ÈÇÆ‰ª∂"></p>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>Computer Networking</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>ÈªéÊòéÈùôÊÇÑÊÇÑ</title>
    <url>/2021/09/07/li-ming-jing-qiao-qiao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1>ÈªéÊòéÈùôÊÇÑÊÇÑ</h1>
<h2 id="Â≠êÂ§ú">Â≠êÂ§ú</h2>
<blockquote>
<p>She was still too young to know that life never gives anything for nothing, and that a price is always exacted for what fate bestows.</p>
<p align="right"><i>Marie Antoinette: Bildnis eines mittleren</i></p>
</blockquote>
<p>Âú®ÊàëÂπ¥Á∫™Â∞öÂ∞èÊó∂ÔºåÂπ≥Êó•ÊÄªÂñúÊ¨¢Êä±ÁùÄ‰∏ÄÊú¨‰π¶ÁúãÔºåÂ§ßÊ¶ÇÊòØ‰∏∫‰∫ÜÊ∂àÈÅ£Ôºå‰πüÊúâ‰∫õÊñáÈùíÊÉÖÊÄÄËøòÊú™ÈÄÄÂç¥„ÄÇÂèØÊÉúÊàëÂØπÊñáÂ≠¶ÁöÑÁÉ≠Áà±Âπ∂‰∏çÂ¶Ç‰ΩïÊµìÈÉÅ‚Äî‚ÄîÂÆÉËøú‰∏çËÉΩ‰ΩøÊàëÂüãÂ§¥Ê°àÁâçÁöìÈ¶ñÁ©∑ÁªèÔºåÈ°∂Â§öÊòØËÆ©ÊàëËØª‰∏§Êú¨ÂÖ•Èó®Èó®Êßõ‰∏çÈÇ£‰πàÈ´òÔºå‰∏é‰ªñ‰∫∫Èó≤ËÅäÊó∂ËÉΩÂºïÈÇ£‰πà‰∏Ä‰∏§Âè•ÁöÑÂõæ‰π¶ÁΩ¢‰∫Ü„ÄÇËÄå‰∏îÂæàÊòéÊòæÊàëÁöÑÁ≠õÈÄâËÉΩÂäõ‰πüÂπ∂‰∏çÂº∫‚Äî‚ÄîÊØèÂΩìÊúâÂ•≥Â≠©Â≠êÁúãËßÅÊàëÂú®ËØª‰π¶ÔºåÂáëËøáÊù•ÈóÆ‰∏ÄÂè•Ôºö‚Äú‰Ω†Âú®ËØª‰ªÄ‰πà‰π¶ÂïäÔºü‚ÄùÔºå‰∏çÂá∫ÊÑèÂ§ñÂ•π‰ª¨ÊÄª‰ºöË¢´‰π¶ÂêçÂêìËµ∞„ÄÇÂç≥‰ΩøÂá∫‰∫ÜÊÑèÂ§ñÔºåÂ•π‰ª¨‰πüÂ§ßÊ¶ÇÁéáË¢´ÊàëÊé•‰∏ãÊù•Â∞ùËØïÊ¶ÇÊã¨‰π¶Êú¨ÂÜÖÂÆπÁöÑËØùÂêìËµ∞‚Äî‚ÄîËøôËØÅÊòéÊàëÂØπÈó®ÊßõÁöÑÂà§Êñ≠ËøòÊòØÊúâÁÇπÈ´ò‰∫Ü„ÄÇ</p>
<p>Êú¨ËäÇÂºÄÂ§¥ÂºïÁöÑËøôÂè•ËØùÂá∫Ëá™ÊñØËíÇËä¨¬∑Ëå®Â®ÅÊ†ºÁöÑ„ÄäÊñ≠Â§¥ÁöáÂêé„Äã„ÄÇÂæàÊòæÁÑ∂Ôºå‰Ωú‰∏∫‰∏Ä‰∏™ÊñáÈùíÔºåÊàëÂ∫îËØ•ÊòØÂú®Êüê‰∏ÄÊúüÁöÑ„ÄäÊÑèÊûó„ÄãÊàñ„ÄäËØªËÄÖ„Äã‰∏äÁúãÂà∞‰∫ÜËøôÂè•ËØùÁÑ∂ÂêéËÆ∞‰∫Ü‰∏ãÊù•ÔºõËá≥‰∫éËøôÊú¨‰π¶ÔºåÈÇ£ÊòØ‰∏á‰∏á‰∏çÂèØËÉΩËØªÁöÑ„ÄÇÂΩìÁÑ∂ÔºåÊúâ‰∫õ‰π¶ËØªÂÆå‰ª•ÂêéÔºå‰Ω†Á°ÆÂÆûËÉΩÊÑüËßâÂà∞Êï¥Êú¨‰π¶ÂîØ‰∏ÄÊúâ‰ª∑ÂÄºÁöÑÂú∞ÊñπÂ∞±ÊòØ‰π¶Â∞Å‰∏äÂÜôÁöÑÈÇ£Âè•‚ÄúÂêçË®Ä‚Äù‚Äî‚ÄîÂΩìÁÑ∂‰∏çÊòØËøôÊú¨‰π¶ÔºåËøôÊú¨‰π¶ÊàëÁ°ÆÂÆûÊ≤°ËØªËøá„ÄÇÂºïËøôÂè•ËØùÁöÑÁºòÁî±Âë¢ÔºåÊòØÊàë‰∏Ä‰∏™ÊúãÂèãÊâòÊàëÂÜôÊñáËÆ∞ÂΩï‰∏Ä‰ª∂‰∫ãÊÉÖÔºå‰ªñÁöÑ‰∫ãÊÉÖËÆ©ÊàëÊÉ≥Ëµ∑‰∫ÜËøôÂè•ËØù„ÄÇÂΩìÁÑ∂ÔºåÂêéÈù¢‰ºöÂºïÁöÑ‰∏Ä‰∫õËØ≠Âè•ÂíåÂÜôÊ≥ïÔºåÊèêÂâçÂ£∞Êòé‰∏Ä‰∏ãÔºåÈÉΩÂá∫‰∫éÊàë‰πãÊâã„ÄÇÊàëÁöÑËøô‰∏™ÊúãÂèãÊòØ‰∏™Á∫ØÁêÜÂ∑•Áõ¥Áî∑ÔºåÂçäÁÇπÊñáÂ≠¶ÁªÜËèåÈÉΩÊ≤°ÊúâÔºåÂêéÈù¢ÁöÑÁêÜÂ∑•ÁßëÊúØËØ≠ÈÉΩÂá∫Ëá™‰ªñ‰πãÂè£„ÄÇ</p>
<p>ÊïÖ‰∫ãÁöÑÂºÄÂ§¥ÊòØÊÉØ‰æãÁöÑÂÅáËØ≠ÊùëË®Ä„ÄÅÁúü‰∫ãÈöê‰ªÄ‰πàÁöÑÔºåÊàë‰ª¨ÊùÉÁß∞ÊàëÁöÑËøô‰∏™ÊúãÂèãÂè´yzjÂêß„ÄÇÊó©Âú®ÂçÅ‰ΩôÂ§©ÂâçÔºåyzjÊ≠£Ê∏©Ê∏©ÂêûÂêûÂú∞Ëµ∂ÁùÄËá™Â∑±ÊüêÈó®ËØæÁ®ãÁöÑÂ§ß‰Ωú‰∏ö„ÄÇÂΩºÊó∂Ë∑ùddlÂ∞öÊó©ÔºåÂèàÂÖºÂ§ß‰Ωú‰∏öÁöÑË¶ÅÊ±ÇÂæàÈöêÊô¶Ôºå‰∏ç‰∏äÊâãÊ†πÊú¨ÊéÇ‰∏çÂá∫Êñ§‰∏§„ÄÇÁ≤óÁûü‰∫Ü‰∏§ÁúºË¶ÅÊ±ÇÊñá‰ª∂ÁöÑyzj‰ªóÁùÄËá™Â∑±Â≠¶Ëøá‰∏ÄÁÇπÁõ∏ÂÖ≥ËØæÁ®ãÔºå‰ºö‰∏§Âè•C++ËØ≠Ê≥ïÔºå‰∏çÂÖçÊúâ‰∫õÈ£òÈ£òÁÑ∂„ÄÇÂ∞ΩÁÆ°ËÄÅÂ∏àÊèêÈÜíÂú®ÂÖàÔºåyzjÊÄªËßâÂæóËá™Â∑±‰∏çÁÆóÊâÄË∞ìÁöÑ‚ÄúÂæàÂ§öÂêåÂ≠¶‚Äù„ÄÇÂêéÊù•ÁöÑ‰∫ãÂÆûËØÅÊòé‰∫Ü‰ªñÁöÑËßÇÁÇπÔºåyzjÁ°ÆÂÆû‰∏çÁÆóÂæàÂ§öÂêåÂ≠¶ÔºåËÄåÊòØÊ≠£ÊÄÅÂàÜÂ∏ÉÊõ≤Á∫øÊúÄÂ∑¶ËæπÁöÑÈÇ£‰∏ÄÊíÆ„ÄÇ</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908023538649_axllra.png" alt></p>
<p>ÊÄªËÄåË®Ä‰πãÔºåyzjÂú®ddlÂçÅ‰ΩôÂ§©ÂâçÊâçÊñ∞Âª∫‰∫ÜÂêç‰∏∫finalprojectÁöÑÊñá‰ª∂Â§πÔºåÂºÄÂßã‰∫ÜÈÄ†ËΩÆÂ≠ê‰πãÊóÖ„ÄÇËµ∑Âàù‰∏∫‰∫ÜÂÜôÂæóÈ°∫ÊâãÔºå‰ªñÊåâÁÖßmatlabÁöÑÊìç‰ΩúÊñπÂºèÂÜô‰∫Ü‰∏™Áü©ÈòµÁ±ªÔºåËøô‰∏™Á±ªÈáçËΩΩ‰∫ÜÂæàÂ§öÊñπÊ≥ïÔºå‰πüÂÜô‰∫Ü‰∏Ä‰∫õÂü∫Êú¨ÁöÑËÆ°ÁÆóÔºåÂä†‰∫ÜÂæàÂ§öËØ≠Ê≥ïÁ≥ñ„ÄÇÊçÆyzjË°®Á§∫ÔºåËøôÊòØ‰ªñÂêéÈù¢ÂÜôÂÖ∂‰ªñ‰ª£Á†ÅÊó∂ÂîØ‰∏ÄÁöÑÊÖ∞Á±çÔºåÁî®Ëµ∑Êù•Â§™È°∫Êâã‰∫Ü„ÄÇËÄå‰∏îËøô‰∏™Á±ª‰∏Ä‰∏™ÂæàÂ§ßÁöÑÂ•ΩÂ§ÑÂ∞±ÊòØÊºÇ‰∫ÆÔºåÂæàÂ•ΩÂú∞ÈÅµÂæ™‰∫ÜËÆæËÆ°Ê®°ÂºèÔºå‰πüÈíàÂØπÊÄßËÉΩÂÅö‰∫ÜÂæàÂ§ö‰ºòÂåñ„ÄÇ‰∏çËøáÊçÆ‰ªñÂèçÊÄùÔºåÂú®È°πÁõÆÂÆåÊàêÂâçÂ∞±Êêû‰ºòÂåñÊòØÂ§ßÂøåÔºåÂ±û‰∫éÊñ∞ÊâãÂ∞èÁôΩÊúÄÂÆπÊòìÁäØÁöÑÈîôËØØ‰πã‰∏Ä„ÄÇËøô‰∏™ÂæàÊºÇ‰∫ÆÁöÑËΩÆÂ≠êËä±‰∫Ü‰ªñÂæàÂ§öÊó∂Èó¥ÔºåÁ≠âÂà∞‰ªñÁúüÁöÑÂºÄÂßãÊé•Ëß¶Ê†∏ÂøÉËÆ°ÁÆó‰ª£Á†ÅÊó∂ÔºåÊó∂Èó¥Â∑≤Áªè‰∏çÂÖÅËÆ∏‰ªñËÆæËÆ°ÊºÇ‰∫ÆÁöÑÁ±ª‰∫Ü„ÄÇ</p>
<h2 id="È∏°È∏£">È∏°È∏£</h2>
<blockquote>
<p>Is life always this hard, or is it just when you‚Äôre working on your ddl?</p>
<p>Always like this.</p>
<p align="right"><i>re-creation from L√©on</i></p>
</blockquote>
<p>ÂÖ∂ÂÆûËÆæËÆ°‰∏ç‰∫ÜÊºÇ‰∫ÆÁöÑÁ±ª‰∏çÁÆó‰∏Ä‰∏™Â§ßÈóÆÈ¢ò„ÄÇËôΩÁÑ∂Â∞±yzjÊâÄË®ÄÔºå‰ªñËÆæËÆ°‰∫Ü‰∏Ä‰∏™Â∞ÅË£ÖÂú∞Ê≤πÁõê‰∏çËøõ‰∏ùÊØ´‰∏çÊºèÁöÑÁ±ªÁî®Êù•ÂÇ®Â≠òÊï∞ÊçÆÔºåÂêéÊù•ÊâçÂèëÁé∞ÂæàÂ§öÂáΩÊï∞„ÄÅÊñπÊ≥ïÈÉΩË¶ÅÁî®Âà∞ËøôÈáåÈù¢ÁöÑÊï∞ÊçÆÔºå‰∏çÂæó‰∏çËÆæËÆ°‰∏Ä‰∏™‰∏™Â•áÊÄ™ÁöÑÊé•Âè£‰ª•‰æõÊìç‰ΩúÔºõÊúÄÂêéÁîöËá≥ÊÅ®‰∏çÂæóÊääprivate scopeÊîπÊàêpublic scope‰∏ÄÂä≥Ê∞∏ÈÄ∏„ÄÇÁÑ∂ËÄåÂ∞±Á¨îËÄÖÊù•ÁúãÔºåËøôÂØπÊ≤ªÁñóÊàëËøô‰∏™ÊúãÂèãÂêπÊØõÊ±ÇÁñµÁöÑÂÆ°ÁæéÊ¥ÅÁôñÁÆÄÁõ¥ÊòØÂ§ßÂäü‰∏Ä‰ª∂„ÄÇËÄå‰∏îÊàëËøô‰∏™ÊúãÂèãÂÜôÂá∫Êù•ÁöÑÊãôÂä£‰ª£Á†ÅÔºåËøôËæàÂ≠êÈÉΩ‰∏çÂèØËÉΩÊúâÁ¨¨‰∫å‰∏™‰∫∫ÂéªÁúã‰∫ÜÔºàÂì¶ÔºåÈô§‰∫ÜËøôÈó®ËØæÁöÑÂèØÊÄúÂä©ÊïôÔºåmay destiny bless himÔºâÔºå‰πüÂÖçÂæóÊãñÁ¥ØÂà´‰∫∫ÔºåÂ∞èÈóÆÈ¢òÂ∞èÈóÆÈ¢ò„ÄÇ</p>
<p>Âú®ÊàëÁúãÊù•ÔºåÊõ¥Â§ßÁöÑÈóÆÈ¢òÂú®‰∫é,‰Ω†Ë¶ÅÂÖàËß£ÂÜ≥‰∏Ä‰∏™ÈóÆÈ¢òÔºåÁÑ∂ÂêéÊâçÂÜçËÄÉËôëÂ¶Ç‰ΩïÊºÇ‰∫ÆÂú∞Ëß£ÂÜ≥ÈóÆÈ¢ò„ÄÇÊàëËøô‰∏™ÊúãÂèãÊó∂Â∏∏Êãé‰∏çÊ∏ÖËøô‰∏§ËÄÖ‰πãÈó¥ÁöÑÂÖ≥Á≥ª„ÄÇËøôÂú®Âπ≥Êó•Èáå‰ªñËá™Â≠¶‰∏Ä‰∫õ‰∏úË•øÁöÑÊó∂ÂÄôÈóÆÈ¢òÂÄí‰πü‰∏çÂ§ßÔºåÊúâÂÖÖË∂≥ÁöÑÊó∂Èó¥ÊãøÊù•Â§ÑÁêÜÁªÜËäÇ„ÄÇËÄå‰∏î‰ªñËá™Â≠¶ÁöÑÊó∂ÂÄôÊÄªÊòØÊãøÁªèÂÖ∏ÊïôÊùê‰∏ÄÂº†Âº†Âú∞ÁøªËøáÂéªÔºåËøô‰∫õÊïôÊùêÊÄªÊòØ‰∫ãÊó†Â∑®ÁªÜÂú∞ÂàóÂá∫ÊâÄÊúâÁªÜËäÇÔºåËøôÂæÄÂæÄÂèØ‰ª•Ëß£Á≠îyzjÁöÑÂõ∞ÊÉë„ÄÇÁÑ∂ËÄåÂÆûÊìçÈ°πÁõÆÊó∂ÔºåÈóÆÈ¢òÂ∞±ÂèòÂæó‰∏çÂèØÊéß‰∫ÜËµ∑Êù•„ÄÇÈÅáÂà∞ÁöÑÈóÆÈ¢òÂæÄÂæÄÂæàÂÅèÔºå‰πüÊ≤°ÊúâË∂≥Â§üËØ¶ÁªÜÁöÑËß£ÂÜ≥ÊñπÊ°àÔºõÁΩë‰∏äÁöÑÊïôÁ®ãÂ§öÂçäÊùÇÊãº‰π±Âáë‰∏çÊ±ÇÁîöËß£ÔºåyzjÁîöËá≥ÈÅáÂà∞Âá†‰∏™GoogleÈÉΩÊ≤°ÂäûÊ≥ïËß£Á≠îÁöÑbug„ÄÇËøôÁßçÊó∂ÂÄô‰∏ÄËà¨‰∫∫‰ºöÊç¢‰∏™ÊñπÊ≥ïÊàñÊÄùË∑ØÔºå‰ΩÜÊàëËøô‰∏™ÊúãÂèãÔºå‰ªñËøòÊúâÂº∫Ëø´Áóá‚Äî‚Äî‰ªÄ‰πà‰∫∫ÂëêËøôÊòØ‚Äî‚Äî‰ªñ‰ºöÁªßÁª≠Ê≠ªÁ£ïÔºåÁõ¥Âà∞ÊíûÂçóÂ¢ô‰∏∫Ê≠¢„ÄÇ‰∏æ‰∏™‰æãÂ≠êÔºåyzj‰∏ÄÂºÄÂßãÊÉ≥Ëá™Â∑±ÂÜôÁªòÂõæÂåÖÔºåÂ∞ùËØï‰∫Ü‰∏§Â§©ÂèëÁé∞Ëá™Â∑±Ê∞¥Âπ≥‰∏çÂ§üÔºå‰∫éÊòØÊç¢‰∫Ü‰∏Ä‰∏™ÂºÄÊ∫êÁöÑÁªòÂõæÂåÖ„ÄÇËøô‰∏™ÂåÖÂÄíÊòØËÉΩË∑ëÔºåÂèØÊÉúÂ§™‰∏ëÔºåyzj‰∏çÊª°ÊÑèÔºåË∑ëÂéªÂÜôpythonÁªòÂõæÈÄªËæë„ÄÇÂÜôÂÆåÂêé‰ªñ‰∏ÄÊãçÂ§ßËÑëÊÉ≥ÊêûÂµåÂÖ•‰ª£Á†ÅÔºåÈÅÇËø∑‰πãËá™‰ø°Âú∞Ë∑ëÂéªË∑ëÂéªÁúãCython tutorialÔºåÁΩë‰∏äÁöÑÊïôÁ®ãÂæàÂ∞ëÔºå‰πüËß£ÂÜ≥‰∏ç‰∫ÜyzjÁöÑÈóÆÈ¢òÔºå‰ªñÂèàË∑ëÂéªÁúãCython Document„ÄÇË¢´ÁéØÂ¢ÉÂèòÈáèÁªïÊôïÂêéÂèàË∑ëÂéªÁúãCMake DocumentÔºà‰ªñÂº∫ÁÉàË¶ÅÊ±ÇÊàë‰∏çÂëäËØâ‰Ω†‰ª¨Ôºå‰ªñ‰∏ÄÂºÄÂßãËøòÁúã‰∫ÜÂá†Â§©Makefile DocumentÔºâ„ÄÇ‰∏ÄÁï™‰∏ãÊù•ÔºåÂá†Â§©ÂÖâÈò¥ËôöÂ∫¶ÔºåÈ°πÁõÆ‰∏ÄÁÇπÊ≤°ÂÅö„ÄÇÁ∫µËßÇyzjÁöÑÊï¥‰∏™È°πÁõÆÊµÅÁ®ãÔºåÂü∫Êú¨‰∏äÈÉΩËÄóÂú®ËøôÁßçÁªÜÊûùÊú´ËäÇ‰ΩÜÂæÄÂæÄËÄóË¥πÂ∑®ÁªÜÁöÑÂú∞Êñπ‰∏ä‰∫Ü„ÄÇÂØπ‰∫ÜÔºåyzjË°®Á§∫CythonÁ°ÆÂÆûÂæàÊúâÊÑèÊÄùÔºåÊÉ≥Â°´Âà∞Ëá™Â∑±ÁöÑÊäÄÊúØÊ†àÈáå„ÄÇÊó¢ÁÑ∂Â§ß‰Ωú‰∏öddlÂ∑≤ÁªèÁªìÊùü‰∫ÜÔºåÊé•‰∏ãÊù•‰ªñÂ§ßÊ¶Ç‰ºöÁªßÁª≠ÁúãCython DocumentÂπ∂ÂÜô‰∫õÂçöÂÆ¢Á¨îËÆ∞‰ªÄ‰πàÁöÑÂêß„ÄÇ</p>
<p>ÊÄª‰πãÊàëËøô‰∏™ÊúãÂèãË∫´‰∏äËøòÊúâ‰∫õÂ≠¶ÁîüÊÄùÁª¥Ê≤°ËΩ¨ÂèòËøáÊù•ÔºåËøôÊàëÂæóÂ•ΩÂ•ΩÂäùÂäù‰ªñ„ÄÇ</p>
<p>Á´ôÂú®‰∏Ä‰∏™ÊóÅ‰∫∫ÁöÑËßíÂ∫¶Ôºå‰∏äÈù¢ÁöÑËØùËØ≠ÂèØËÉΩÊúâ‰∫õÂπ≥Ê∑°ÔºåÂ•ΩÂÉèÂú®ËÆ≤Ëø∞‰∏Ä‰∏™Âπ≥Âπ≥Êó†Â•áÁöÑÊïÖ‰∫ã„ÄÇÁÑ∂ËÄåÁ´ôÂú®ÂΩì‰∫ã‰∫∫ÁöÑËßíÂ∫¶ÔºåÊó∂Èó¥ÁöÑÊµÅÈÄùÂç¥ÊòØÊó†ÊØîÁúüÂàáÁöÑ„ÄÇÊØèÂ§©ÊòæÁ§∫Â±èÂ∑¶‰∏ãËßíÁöÑÊó•ÊúüÈÉΩ‰ºöË∑≥‰∏Ä‰∏™Êï∞Â≠óÔºåËøôÊò≠Á§∫ÁùÄËá™Â∑±ÂèØ‰ª•ÊãøÊù•Ëµ∂ddlÁöÑÊó∂Èó¥ÂèàÂ∞ë‰∫Ü‰∏ÄÂ§©„ÄÇÂ±èÂπïÂ∑¶‰∏äËßíÁöÑtodo-list‰πüÊÄªÊúâ‰∏Ä‰∏§‰∏™‰ªªÂä°ÂèòÊàêÁ∫¢Ëâ≤‚Äî‚ÄîËøôÊÑèÂë≥ÁùÄ‰ªñÊ≤°ÊúâÂú®Ëá™Â∑±ËÆæÂÆöÁöÑÊúüÈôêÂâçÂÆåÊàêËøô‰∏™Ê®°Âùó„ÄÇÊàëÁöÑËøô‰∏™ÊúãÂèãÔºå‰∏çÁü•ÈÅìÂá∫‰∫éÂéãÂäõËøòÊòØ‰ªÄ‰πàÂéüÂõ†ÔºåÂÅúÊéâ‰∫ÜÊôö‰∏äÁöÑË∑ëÊ≠•ÔºåÂíåÂÖ∂‰ªñ‰∫∫ÁöÑËÅäÂ§©‰πü‰ºöÂ∞ΩÂø´ÁªìÊùüÊéâÔºåÊØèÂ§©Êôö‰∏äÁù°ËßâË∂äÊù•Ë∂äËøüÔºåÁ¨¨‰∫åÂ§©‰∏≠ÂçàÊâçËÉΩÈÜíÊù•ÔºõÊó•Â∏∏Ê¥ªÂä®‰πüÂèòÊàê‰∫ÜÊØèÂ§©‰∏§Ê¨°ÁöÑÂèñÂ§ñÂçñ„ÄÇÂèØÊÉú‰ªñÂèëË¥®Â•ΩÔºåÂ∞±ËøôÊ†∑ÁöÑÁîüÊ¥ªËøá‰∫ÜÂá†Â§©ÈÉΩ‰∏çÊéâÂ§¥ÂèëÔºåÊÆä‰∏∫ÂèØÊ∞î„ÄÇ</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908163738_xhqv9u.jpg" alt></p>
<h2 id="Âπ≥Êó¶">Âπ≥Êó¶</h2>
<blockquote>
<p>A half-million years in the future that twinkling of curiosity would have led his mind out into the universe to explore the mathematical mysteries of relativity. Now ‚Ä¶</p>
<p align="right"><i>Dragon's Egg</i></p>
</blockquote>
<p>Ëµ∂ddlÁöÑËøáÁ®ãÁöÑÁ°ÆÁóõËã¶ÔºåÁÑ∂ËÄåÂΩì‰Ω†ÂèëÁé∞ÂÖ∂‰ªñ‰∫∫Âíå‰Ω†‰∏ÄÊ†∑ÁóõËã¶ÁöÑÊó∂ÂÄôÔºåËøôÁßçÁóõËã¶Â∞±‰ºöÊó†ÂΩ¢‰πã‰∏≠ÂáèËΩª‰∏ÄÁÇπ„ÄÇ</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908165420_zwxqgw.png" alt></p>
<p>ÂΩìÁÑ∂Ôºå‰∏äËø∞Ë°®ÊÉÖÂåÖÁ∫ØÂ±ûÂºÄÁé©Á¨ë„ÄÇÂú®yzjËµ∂ddl‰∏≠ÔºåÂèëÁé∞ËøôÊ¨°Â§ß‰Ωú‰∏öÁ°ÆÂÆûÊúâÁÇπË∂ÖÁ∫≤Ôºå‰∏çÂ∞ëÂêåÂ≠¶ÈÉΩË°®Á§∫Èöæ‰ª•‰∏ãÊâã„ÄÇÂÜôÁ¥Ø‰∫ÜÂíåÂêåÂú®ËÇù‰Ωú‰∏öÁöÑÂêåÂ≠¶&amp;ÊúãÂèãÂêêÊßΩ‰æøÊàê‰∫ÜyzjÊûØÁá•ÁîüÊ¥ªÁöÑÂ∞ëÊúâÁöÑ‰πêË∂£„ÄÇÊûúÁÑ∂‰∏ñÁïå‰∏äÊ≤°ÊúâÁúüÊ≠£ÁöÑÊÑüÂêåË∫´ÂèóÔºåÂè™ÊúâÁúüÁöÑÁªèÊ≠§‰∏ÄÂä´ÔºåyzjÊâçÊòéÁôΩËãèËÅîÁ¨ëËØù‰∏∫‰ªÄ‰πà‰ºöÊàê‰∏∫‰∏ñÁïåÈùûÈÅó„ÄÇ</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908170757983_gr2gzm.png" alt></p>
<p>ÂΩìÁÑ∂Ôºå‰πüÊúâÂ§ß‰Ω¨ÊØîËæÉË∂ÖËÑ±ÔºåÈù†Ëá™Â∑±Âá∫Ëâ≤ÁöÑËã±ÊñáÊñáÁåÆÈòÖËØªËÉΩÂäõ‰∏é‰ª£Á†ÅËÉΩÂäõ‰∏ÄÈ™ëÁªùÂ∞ò‰∫éyzjËøôÁ≠âÂá°Â§´‰øóÂ≠ê„ÄÇ‰ªñÁöÑËøõÂ∫¶ËøúÂø´‰∫éÂÖ∂‰ªñ‰∫∫Ôºå‰πüÂú®ddlËøáÁ®ã‰∏≠Áªô‰∫à‰∫ÜyzjË∂≥Â§üÁöÑÂ∏ÆÂä©„ÄÇÂú®Ê≠§Ë∞®‰ª£Ë°®yzjÂêë‰ªñËá¥‰ª•Ê∑±Ê∑±ÁöÑrespect„ÄÇ</p>
<p>Âú®ÂêÑÁßçÂêÑÁßçË∞É‰æÉÂíåÂ∏ÆÂä©‰∏ãÔºåyzjËøòÊòØÊÖ¢ÊÖ¢Âú∞ÊääËá™Â∑±ÁöÑÂ§ß‰Ωú‰∏öÂÅö‰∫ÜÂá∫Êù•„ÄÇ‰ªé‰∏ÄÂºÄÂßãÁöÑÊúõ‰πã‰∏ç‰ºº‰∫∫ÂΩ¢ÁöÑÊãüÂêàÂõæÂΩ¢Âà∞Ê∏êÊ∏êËÉΩÁúãÂá∫Â§ßÊ¶ÇËΩÆÂªìÔºåÂÜçÂà∞Â§öÂ∞ëÊúâÈÇ£‰πà‰∏ÄÁÇπÊÑüËßâ„ÄÇÔºàÂèØ‰ª•ÁúãÂá∫ÊúÄÂêé‰∏ÄÂº†ÂõæËøòÊòØÊúâÂºÇÂ∏∏ÁÇπÔºåÂèØËÉΩÊòØÂá∫‰∫éËÆ°ÁÆóÊú∫Á≤æÂ∫¶ÂíåÂºÇÂ∏∏Áü©ÈòµÁöÑÂéüÂõ†ÔºåÊàñÊòØËøòÊúâyzjÊ≤°ÊúâËÄÉËôëÂà∞ÁöÑbugÔºõ‰∏çËøáÂÆûÂú®Â§™Á¥ØÂ∞±Ê≤°ÂøÉÊÉÖË∞É‰∫ÜÔºâ</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908200114_dsy4ru.png" alt></p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908200123_adlhe8.png" alt></p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114185/QQ%E5%9B%BE%E7%89%8720210908200126_z2hzqn.jpg" alt></p>
<p>ÂÅöÂá∫ÊïàÊûúÂêéÔºåÂêéÈù¢ÁöÑÈ¢òÂ∞±Â•ΩÂÅö‰∫ÜÂæàÂ§ö„ÄÇÂâçÈù¢ÁöÑÊàêÊûúÂíåËΩÆÂ≠ê‰πüËÉΩÁªßÁª≠Ë∑ë‰∏ãÂéª„ÄÇyzjÁî®ÊúÄÂêé‰ªÖÂâ©ÁöÑ‰∏§‰∏âÂ§©Êó∂Èó¥Á¥ßËµ∂ÊÖ¢Ëµ∂Âú∞ÂÅöÂÆå‰∫ÜÂêéÈù¢ÁöÑË¶ÅÊ±Ç„ÄÇ</p>
<h2 id="Á†¥Êôì">Á†¥Êôì</h2>
<blockquote>
<p>There is only one heroism in the world: to see the world as it is and to love it.</p>
<p align="right"><i>Romain Rolland</i></p>
</blockquote>
<p>Êó∂Èó¥Êù•Âà∞‰∫Ü9Êúà8Êó•ÂáåÊô®Êúâ‰Ωô„ÄÇÁ¶ª‰∫§‰Ωú‰∏öÁöÑddlËøòÊúâÁ∫¶‰πù‰∏™Â∞èÊó∂„ÄÇËøôÊó∂ÂÄôÔºåyzjÂ∑≤ÁªèÂÆûÁé∞‰∫ÜÂ§ß‰Ωú‰∏öÁöÑÂü∫Êú¨Ë¶ÅÊ±ÇÔºåÁÑ∂ËÄåËøòÊúâÂè¶Â§ñ‰∏Ä‰∫õË¶ÅÊ±ÇÁ≠âÂæÖÂÆûÁé∞„ÄÇ‚ÄúÂèçÊ≠£ÈÉΩÁÜ¨‰∫ÜËøô‰πàÂ§öÂ§©‰∫ÜÔºåÂÜçÁÜ¨‰∏ÄÂ§©ÊääÂäüËÉΩÂÅöÂÆåÂêß„ÄÇ‚ÄùyzjÂøÉÊÉ≥ÔºåÈöèÊú∫ÂàõÂª∫‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑheader fileÔºåÊâìÂºÄ‰∫ÜÊñáÁåÆÂíåGoogle„ÄÇ</p>
<blockquote>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908204043478_bdmuin.png" alt></p>
</blockquote>
<p>9Êúà8Êó•ÂáåÊô®‰∏§ÁÇπÔºåyzjÁúãÂÆåËÆ∫ÊñáÂÜÖÁöÑÁõ∏ÂÖ≥ÁÆóÊ≥ïÂêéÂèà‰∏äGoogleÊêú‰∫Ü‰∏Ä‰∏ãÊàêÁÜüÁöÑÂâçÁΩÆÁÆóÊ≥ïÔºåÂèëÁé∞Ëá™Â∑±Âç≥‰ΩøÂà∑Á©ø‰∫ÜÂ§úÔºå‰πüÂèØËÉΩÂÆå‰∏çÊàêÂâ©‰∏ãÁöÑÂÜÖÂÆπ‰∫Ü„ÄÇÂú®Ëá™Â∑±ÁöÑdocumentÈáåÊîæ‰∏Ä‰∏™ÂÆåÊàê‰∫Ü‰∏ÄÂçäÔºåÁîöËá≥Ê≤°ÊúâÂèØËßÜÂåñÂíåÂèØ‰ª•‰æõ clients Ë∞ÉÁî®ÁöÑ interfaceÔºåÁ∫ØÈù†‰∏çÊàê‰ΩìÁ≥ªÁöÑ‰ª£Á†ÅÂ§ÆÊ±ÇÂä©ÊïôÁªôÁÇπÂàÜÂÆûÂú®‰∏çÂ§ß‰ΩìÈù¢„ÄÇÂÜµ‰∏î‰∏ªË¶ÅÂäüËÉΩÈÉΩÂÅöÂá∫Êù•‰∫ÜÔºåÂ§ßÈÉ®ÂàÜÁöÑÂàÜÈÉΩËÉΩÊãøÂà∞ÔºåÁ¥¢ÊÄßÁõ¥Êé•‰∫§‰∫ÜÔºå‰πüÂÖçÂæóÊéâÂ§¥Âèë„ÄÇ‰∫éÊòØÔºåyzjÊää‰ª£Á†ÅÂèàË∞ÉËØï‰∫ÜÊúÄÂêé‰∏ÄÈÅçÔºåÊ£ÄÊü•‰∫Ü‰∏Ä‰∏ãËá™Â∑±ÁöÑdocumentÔºåÂ∞ÜÂÆÉ‰ª¨ÊâìÂåÖÂ•ΩÔºåÈÇÆ‰ª∂ÂèëÁªô‰∫ÜÂä©Êïô„ÄÇÁ≤óÁÆó‰∫Ü‰∏Ä‰∏ãÔºåÊúÄÁªàÊñá‰ª∂‰∏ÄÂÖ±1300Ë°åÂ∑¶Âè≥ÁöÑ‰ª£Á†ÅÈáèÔºå4.5kbÁöÑÊµãËØïÁî®‰æãÔºàËÄÉËôëÂà∞‰ª£Á†ÅÂÜôÂæóÂÆûÂú®Â§™ÁÉÇÁöÑÂõ†Á¥†ÔºåÊúâÊïà‰ª£Á†ÅÂèØËÉΩË¶ÅÊâìÂØπÊäòÊàñ‰∏âÂàÜ‰πã‰∏ÄÔºâ„ÄÇËøôÁöÑÁ°ÆÂè™ÊòØ‰∏Ä‰∏™Â∞èÁöÑ‰∏çËÉΩÂÜçÂ∞èÁöÑÈ°πÁõÆ‰ª£Á†ÅÈáè‰∫ÜÔºå‰ΩÜÂØπ‰∫éÊ≤°Â§öÂ∞ëÈ°πÁõÆÁªèÈ™åÁöÑyzjÊù•ËØ¥ÔºåËøôÁ°ÆÂÆûÊòØ‰∏Ä‰∏™ÂÄºÂæó‰∏ÄÊèêÁöÑÊåëÊàò„ÄÇËøô‰πüÊèêÈÜí‰∫ÜyzjÔºåËøòÊòØË¶ÅÊ≥®ÊÑèÈ°πÁõÆÁªèÈ™åÁöÑÁßØÁ¥Ø„ÄÇ</p>
<p>ÊçÆyzjË°®Á§∫ÔºåÂΩì‰ªñÁÇπÂáª‰∫ÜÈÇÆÁÆ±ÁïåÈù¢ÈÇ£‰∏™Â∞èÂ∞èÁöÑ„ÄêÂèëÈÄÅ„ÄëÊåâÈíÆÔºåÂè™ËßâÂæóÊµëË∫´ÁöÑË¥üÊãÖ‰∏ÄÊâ´ËÄåÁ©∫„ÄÇ‰ªñÂá†‰πéÂú®‰∏ÄÁû¨Èó¥Â∞±ÂøòÊéâ‰∫ÜÂèëÁé∞Ëá™Â∑±Ê≤°ÂäûÊ≥ïÂÆûÁé∞Â§ß‰Ωú‰∏öÂÖ∂‰ªñË¶ÅÊ±ÇÊó∂ÁöÑÊáäÊÅº„ÄÇËøô‰πüËÆ©‰ªñÊúâÁÇπÊÉ≥Âà∞ÔºåËÆ©Ëá™Â∑±Ëøô‰πàÂ§öÂ§©ÁÜ¨Â§úÂíåËá™Èó≠ÁöÑÂéãÂäõÁ©∂Á´üÊù•Ëá™‰∫éÂì™Èáå„ÄÇ</p>
<p>‰∏ÄË∫´ËΩªÂêéÔºåyzjËøòÊòØÊ≤°Êúâ‰ªÄ‰πàÁù°ÊÑèÔºå‰∫éÊòØÊâìÂºÄ‰∫Ü‰∏Ä‰∏™ÊñáÊ°£ÔºåÊÉ≥ËÆ∞ÂΩï‰∏Ä‰∏ãËá™Â∑±ÁöÑÂøÉÊÉÖ„ÄÇyzjÂàöÈÄâ‰∏äËØæÊó∂ÔºåËøôÈó®ËØæÁöÑËÄÅÂ∏àÂ∞±ÊõæÊèêÈÜíËøáÂ§ßÂÆ∂ÔºåËøôÈó®ËØæÊØîËæÉÈöæÔºåÈúÄË¶Å‰ªòÂá∫Êõ¥Â§öÁöÑÂä™ÂäõÔºå‰πüÈöè‰πãËÉΩÂ§üËé∑ÂæóÊõ¥Â§öÁöÑÊî∂Ëé∑„ÄÇÂú®‰∏äËØæÁöÑËøáÁ®ã‰∏≠ÔºåyzjÁöÑÁ°ÆÊÑüÂèóÂà∞‰∫ÜËøôÈó®ËØæËÄÅÂ∏àÊÉ≥Ë¶Å‰º†ÈÅìÊéà‰∏öÁöÑËã¶ÂøÉ„ÄÇ‰ªñ‰∏ÄÈÅçÂèà‰∏ÄÈÅçÂú∞ÂêëÂ§ßÂÆ∂ÈòêËø∞ÈÅìÔºö‚ÄúÊï∞Â≠¶ÊòØÁæéÁöÑÔºåÂ≠¶Êï∞Â≠¶ÊòØÊé¢ÂØªÁæéÂèëÁé∞ÁæéÁöÑËøáÁ®ãÔºåËÄåÈùûÊ≠ªËÆ∞Á°¨ËÉåÁöÑËøáÁ®ã„ÄÇ‚ÄùÁÑ∂ËÄåÂ•à‰ΩïyzjÊÑö‰∏îÈ≤ÅÔºå‰∏çËÉΩ‰Ωì‰ºöÂà∞ÊâÄË∞ìÁöÑÊï∞Â≠¶‰πãÁæé„ÄÇ‰ΩÜÂú®ÂÅöËøôÈó®Â§ß‰Ωú‰∏öÁöÑËøáÁ®ã‰∏≠yzjÁ°ÆÂÆûÂ≠¶Âà∞‰∫ÜÂæàÂ§öÁü•ËØÜ„ÄÇÊúâ‰∫Ü‰∏Ä‰∏™‰ª£Á†ÅÈáèÂêàÈÄÇÁöÑÂèØ‰ª•ËÆ≠ÁªÉËá™Â∑± C++ programing language ÁöÑÊú∫‰ºöÔºå‰πü‰∫ÜËß£‰∫Ü‰∏Ä‰∫õÂíåÁºñËØëÂô®Áü•ËØÜÔºåÂèØ‰ª•ÂíåÊõ¥Â∫ïÂ±ÇÁöÑ‰∏úË•øÊâì‰∫§ÈÅì„ÄÇ‰πüË¢´ËÄÅÂ∏àÂÆâÂà©‰∫ÜlinuxÁ≥ªÁªüÂπ∂Ë¢´Ê∑±Ê∑±Âê∏ÂºïÔºàlinux ubuntuÁúüÁöÑË∂ÖÁ∫ßËµûÔºåÈÉΩÂéªËØïÔºÅÔºâ„ÄÇÁÑ∂ËÄåÂ≠¶Âà∞Ëøô‰πàÂ§ö‰∏úË•øÁöÑËøáÁ®ãÂç¥Âπ∂ÈùûÊòØÂú®ËØæÁ®ã‰∏≠ÔºåËÄåÊòØÂú®Ëá™Â∑±Áã¨Ëá™ÂÅöÂ§ß‰Ωú‰∏öÁöÑËøáÁ®ã‰∏≠„ÄÇËøô‰∏™ËÄÅÂ∏àÁöÑËßíËâ≤Êõ¥ÂÉèÊòØ‰∏Ä‰∏™Èû≠Á≠ñËÄÖÔºåÁî®‰∏ÄÈó®Êúâ‰∫õË∂ÖÁ∫≤ÁöÑÂ§ß‰Ωú‰∏ö‰øÉ‰ΩøyzjÁªßÁª≠Â≠¶‰∏ãÂéª„ÄÇÂóØÔºåÂÖ∂ÂÆû‰πüÊúâÊ¶úÊ†∑ÁöÑ‰ΩúÁî®ÔºåÂØπyzjÊù•ËØ¥ÔºåËøô‰∏™ËÄÅÂ∏àË∫´‰∏äÁöÑËÆ§ÁúüÔºåÂíå‰ªñÂØπÂæÖËá™Â∑±ÁÉ≠Áà±ÁöÑ‰∏úË•øÊó∂ÁöÑÊÄÅÂ∫¶ÁÆÄÁõ¥Ëá™Â∏¶ÂÖâÁéØ„ÄÇ</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908211520814_reitge.png" alt></p>
<p>Á∫¶ÂáåÊô®ÂõõÁÇπÔºåÂêåÊ†∑ÈÄâ‰∫ÜËøô‰∏™ËÄÅÂ∏àËØæÁöÑÂÆ§Âèã‰πüÂÆåÊàê‰∫ÜËá™Â∑±ÁöÑÂ§ß‰Ωú‰∏ö„ÄÇ‰ªñÊãç‰∫ÜÊãçyzjÁöÑËÇ©Â§¥ÔºåËΩªËΩªËØ¥‰∫ÜÂ£∞Ôºö‚ÄúÊàëÂÖàÁù°‰∫Ü„ÄÇ‚ÄùyzjÁÇπ‰∫ÜÁÇπÂ§¥„ÄÇÁúã‰∫ÜÁúãÁ™óÂ§ñÔºåÂ∑≤ÁªèÊúâÁÇπÂæÆÊõ¶ÁöÑÊô®ÂÖâ‰∫Ü„ÄÇÈªéÊòéÈùôÊÇÑÊÇÑÁöÑÔºåÂè™ÊúâÂÅ∂Â∞î‰º†Êù•ÁöÑÊûÅËΩªÂæÆÁöÑÈ∏üÈ∏£„ÄÇ</p>
<p>ÂèàÊòØÊñ∞ÁöÑ‰∏ÄÂ§©‰∫Ü„ÄÇ</p>
]]></content>
      <categories>
        <category>ÈöèÁ¨î</category>
      </categories>
      <tags>
        <tag>Essay</tag>
      </tags>
  </entry>
  <entry>
    <title>ÈìæÊé•Âô®Êü•ÊâæËåÉÂõ¥</title>
    <url>/2021/07/08/lian-jie-qi-cha-zhao-fan-wei/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1>Ëß£ÂÜ≥Visual StudioÁöÑ LNK2019 Âíå LNK1120 ÈîôËØØ</h1>
<h2 id="ÈóÆÈ¢òÊèèËø∞">ÈóÆÈ¢òÊèèËø∞</h2>
<p>ÂÜô‰∫Ü‰∏Ä‰∏™ text searching ÁöÑ‰ª£Á†Å„ÄÇËØ•‰ª£Á†ÅËÆæËÆ°‰∫ÜÊï∞‰∏™Á±ªÔºåÂπ∂Êúâ‰∏Ä‰∏™ interface class ÈÄöËøáÊåáÂêë base class ÁöÑ shared_ptr ÈÄöËøá dynamic binding Êù•ËøêË°å„ÄÇÁÑ∂ËÄåÁªìÊûÑËÆæËÆ°ÁöÑ‰∏çÊòØÁâπÂà´Â•ΩÔºåËøô‰πüÂ∞±ÂØºËá¥ÊàëÈÅáÂà∞‰∫Ü‰∏ãÈù¢ÁöÑÈóÆÈ¢òÔºö</p>
<span id="more"></span>
<blockquote>
<p>interface class header fileÔºö</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;, <span class="keyword">const</span> QueryResult &amp;);</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>interface class source file</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="keyword">const</span> QueryResult &amp;query) &#123;</span><br><span class="line">	<span class="comment">// details</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>base class header file, which is included by interface class header file</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span> &#123;</span></span><br><span class="line">		<span class="comment">//‰∏ãÈù¢ÁöÑËØ≠Âè•ÊòØÈîôËØØÊù•Ê∫ê</span></span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">inline</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;, <span class="keyword">const</span> QueryResult &amp;);</span><br><span class="line">		<span class="comment">//details</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>Êé•ÁùÄÂú®Â∞ùËØïËøêË°åÊó∂Â∞±ÂèëÁé∞‰∫Ü <a href="https://docs.microsoft.com/zh-cn/cpp/error-messages/tool-errors/linker-tools-error-lnk2019?f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(LNK2019)%26rd%3Dtrue&amp;view=msvc-160">LNK2019</a> Âíå <a href="https://docs.microsoft.com/zh-cn/cpp/error-messages/tool-errors/linker-tools-error-lnk1120?f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(LNK1120)%26rd%3Dtrue&amp;view=msvc-160">LNK1120</a> ÈîôËØØ„ÄÇ‰ª•‰∏ã‰∏∫ÈîôËØØÊèèËø∞Ôºö</p>
<blockquote>
<p>Êó†Ê≥ïËß£ÊûêÁöÑÂ§ñÈÉ®Á¨¶Âè∑ ‚Äúclass std::basic_ostream&lt;char,struct std::char_traits<char> &gt; &amp; __cdecl operator&lt;&lt;(class std::basic_ostream&lt;char,struct std::char_traits<char> &gt; &amp;,class QueryResult const &amp;)‚Äù (??6@YAAEAV?<img src="https://math.now.sh?inline=basic_ostream%40DU%3F" style="display:inline-block;margin: 0;">char_traits@D@std@@@std@@AEAV01@AEBVQueryResult@@@Z)ÔºåÂáΩÊï∞ main ‰∏≠ÂºïÁî®‰∫ÜËØ•Á¨¶Âè∑</char></char></p>
</blockquote>
<h2 id="Â∞ùËØïÂàÜÊûê">Â∞ùËØïÂàÜÊûê</h2>
<p>Ê†πÊçÆÈîôËØØÊèèËø∞ÔºåÂèØ‰ª•ÈîÅÂÆöÈîôËØØÂá∫Ëá™‰∏äÈù¢ÁöÑÁ¨¨‰∏ÄË°å‰ª£Á†Å„ÄÇVisual StudioÁªôÂá∫ÁöÑÈîôËØØÊòØÊó†Ê≥ïËß£ÊûêÔºåËøôÊ†∑‰∏Ä‰∏™ÈîôËØØÊèèËø∞Êúâ‰∫õÂÆΩÊ≥õÔºåÊîæÂà∞ dev cpp ÈáåÂ∞±‰ºöÂ•ΩÂæóÂ§öÔºåÂÆÉÁöÑÈîôËØØÊèêÁ§∫Èïø‰∏ãÈù¢ËøôÊ†∑Â≠êÔºö</p>
<blockquote>
<p>[Ë≠¶Âëä] inline ÂáΩÊï∞ ‚Äòstd::ostream&amp; ËøêÁÆóÁ¨¶&lt;&lt;(std::ostream&amp;, const QueryResult&amp;)‚Äô used but never defined</p>
</blockquote>
<p>ÁÑ∂ËÄåÊàë‰∏ÄÂºÄÂßãÂπ∂Ê≤°ÊúâÁî® dev ÔºåËÄåÊòØËá™Â∑±Áúã web Ë∞É‰∫ÜÂçäÂ§©ÔºåËøòÊâæ‰∫ÜÊàëÁöÑ‰∏§‰∏™ÂêåÂ≠¶Â∏ÆÊàëÁúã‰∫Ü‰∏Ä‰∏ã„ÄÇ‰ªñ‰ª¨ÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÊää source file Áªô include ËøõÊù•ÔºàËøô‰πüËÆ©ÊàëÊúâÁÇπÂêÉÊÉäÔºå‰∏∫‰ªÄ‰πàÂ§ß‰∫åÁöÑËÆ°ÁßëÂêåÂ≠¶‰ºöÊ≤°Êúâ package ÁöÑÊ¶ÇÂøµÔºâ„ÄÇËøôÊ†∑ÁöÑÊñπÊ°àÊàëÊòæÁÑ∂Ê≤°ÂäûÊ≥ïÊª°ÊÑèÔºåÊàëÊó†Ê≥ïÁêÜËß£Ôºå‰∏∫‰ªÄ‰πàÁºñËØëÂô®‰ºöÊâæ‰∏çÂà∞‰∏Ä‰∏™Â∑≤Áªè declaration Âπ∂‰∏î defining ÁöÑÂáΩÊï∞„ÄÇÂá∫‰∫éËøôÁßçÁñëÊÉëÔºåÊàëÂèãÂñÑÂú∞ÊèêÈÜí‰∫Ü‰∏Ä‰∏ãÁºñËØëÂô®‚Äî‚Äî‰∫ßÁîü‰∫ÜÊàëÁöÑÁ¨¨‰∏Ä‰∏™Ëß£ÂÜ≥ÊñπÊ°àÔºö</p>
<blockquote>
<p>interface class header fileÔºö</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;, <span class="keyword">const</span> QueryResult &amp;);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>‰∏çÂæó‰∏çËØ¥vsÁöÑ MSVC ÁºñËØëÂô®ÊòØÁúüÁöÑÂº∫Â§ßÔºåÂä†‰∏™ extern Â∞±ËÉΩËÅîÊÉ≥Âà∞ÂêåÂêçÁöÑinlineÂáΩÊï∞„ÄÇÂ¶ÇÊûúÊàëÊ≤°ÊúâÂÜôËøô‰∏™blogÁöÑËØùÔºåÊàë‰πüËÆ∏‰ºöÊ≤æÊ≤æËá™Âñú‰∫éËøô‰∏™Ëß£ÂÜ≥ÊñπÊ°àÂπ∂‰∏î‰æùÁÑ∂ÊÉ≥Á†¥Â§¥ÁöÆÈÉΩÊÉ≥‰∏çÊòéÁôΩ‰∏∫‰ªÄ‰πà‰ºöÂá∫Áé∞ËøôÁßçÈîôËØØ„ÄÇÁõ¥Âà∞Êàë‰∏∫‰∫ÜÈ™åËØÅËøô‰∏™ÈîôËØØÁî® dev ‰∏äÂèàË∑ë‰∫Ü‰∏ÄÈÅç„ÄÇÊàëÁöÑ dev ÁºñËØëÂô®ÊòØ g++ ÔºàÁâàÊú¨Êàë‰πü‰∏çÊòØÂæàÊ∏ÖÊ•öÔºåÂ∞èÁôΩÈÉΩÊòØ‰∏ÄÈîÆË£ÖÁéØÂ¢ÉÁöÑÔºâÔºåÊ≤°ÊúâËøô‰πàÊô∫ËÉΩÔºåÂæàÂÆûËØöÂú∞ÊèêÈÜí‰∫ÜÊàë„ÄÇÁî±‰∫é <code>operator&lt;&lt;</code> ÂáΩÊï∞ÈúÄË¶ÅË∞ÉÁî® QueryResult object ÁöÑ members ÔºåÂÜçÂä†‰∏äËøô‰∏™ÂáΩÊï∞ÊúÄÂºÄÂßãÊòØÂú®base_Query.h Èáå declaration ÁöÑÔºå‰∏îÊàëÁöÑ Query.h has included the base_Query.hÔºåÊâÄ‰ª•ÁºñËØëÂô®ÊâæÂà∞‰∫Ü inline ÁâàÊú¨ÁöÑ declaration ÔºåËÄåÂæà‰∏çÂπ∏ÔºåËøô‰∏™ÂáΩÊï∞ÊàëÊ≤°ÊúâÂÆö‰πâ„ÄÇ‰∫éÊòØÔºåÊàëÂæóÂà∞‰∫ÜÁ¨¨‰∫å‰∏™Ëß£ÂÜ≥ÊñπÊ°àÔºö</p>
<blockquote>
<p>base class header file, which is included by interface class header file</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span> &#123;</span></span><br><span class="line">		<span class="comment">//ËØ•Êñá‰ª∂ÂâçÈù¢ÁöÑ declaration ‰πüË¶ÅÊîπ</span></span><br><span class="line">		<span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;, <span class="keyword">const</span> QueryResult &amp;);</span><br><span class="line">		<span class="comment">//details</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>È°∫‰æøÊèê‰∏Ä‰∏ãÊàëÁöÑ‰∏ã‰∏Ä‰∏™ÈóÆÈ¢òÔºö‰∏∫‰ªÄ‰πàÊàë‰ºöÂú® base_Query.h ÈáåÂä†‰∏ä inline Âπ∂‰∏îÂú®ÂêéÈù¢ÁöÑÊñá‰ª∂ÈáåÂøòËÆ∞Âë¢Ôºü</p>
<p>Ê≠§‰∫ãËØ¥Êù•ËØùÈïø„ÄÇÊàëÁöÑC++ÊòØ‰ªé„ÄäC++ Primer„ÄãÂÖ•Èó®ÁöÑ„ÄÇÂú®ËøôÊú¨‰π¶ÈáåÔºå Lippman ÂæàÁªÜËá¥Âú∞ËÆ≤Ëø∞‰∫Ü inline ÁöÑ‰ΩúÁî®Ôºà‰πüÂ∞±ÊòØÊ≤°Âï•‰ΩúÁî®ÔºâÔºå‰ΩÜ‰ªñÁöÑÁ§∫‰æã‰ª£Á†ÅÈáåËøòÊòØ‰ºö‰π†ÊÉØÊÄßÂú∞Â∏¶‰∏ä inline ÔºåËøô‰∏™‰π†ÊÉØ‰πüÂΩ±ÂìçÂà∞‰∫ÜÊàë„ÄÇ‰∫ãÂÆû‰∏äÔºåÊàëÂéüÊù•ÁöÑ source file ÈáåÂÖ®ÈÉ®Âä†‰∫Ü inline declaration ÔºåËøô‰ΩøÂæóÊàë‰∏ÄÂºÄÂßãÈÅáÂà∞ÁöÑÈîôËØØÊØîÁé∞Âú®Â§öÂæóÂ§ö‚Äî‚Äî‰πüÂêåÊ†∑Âõ†‰∏∫Ëøô‰∏™ÂéüÂõ†ÔºåÊàëÂè™ÊúâÂ∞Ü interface class source file ‰πü include ËøõÊù•ÊâçËÉΩÂ∑•‰Ωú„ÄÇÂêéÊù•‰∏Ä‰∏™ÂêåÂ≠¶Âú® STFW ÔºàSearching The Fucking WebÔºâÂêéÂëäËØâÊàëÂàÜÁ¶ªÂºèÁºñÁ®ã‰∏çËÉΩ‰ΩøÁî® inline „ÄÇÁÑ∂ÂêéËøô‰∏™ÂáΩÊï∞ÊòØÂîØ‰∏Ä‰∏Ä‰∏™Â£∞Êòé‰∫Ü‰∏§Ê¨°ÁöÑÂáΩÊï∞ÔºåÊâÄ‰ª•Ë¢´ÊàëÂøòËÆ∞‰∫ÜÔºàÁ¨ëÔºâ„ÄÇ</p>
<p>ÂÖ≥‰∫é‰∏∫‰ªÄ‰πàÂàÜÁ¶ªÂºèÁºñÁ®ã‰∏çËÉΩ‰ΩøÁî®inlineÂèØ‰ª•Áúã<a href="https://www.cnblogs.com/GodA/p/6554591.html">ËøôÈáå</a>ÔºåËøô‰∏™‰ΩúËÄÖËÆ≤ÂæóÈùûÂ∏∏ÁªÜËá¥„ÄÇ‰πüÂ∏åÊúõÊàëÊúâ‰∏ÄÂ§©ËÉΩÂ§üÂèòÊàêËøôÊ†∑ÁöÑÂÜÖÂÆπËæìÂá∫ËÄÖ„ÄÇ</p>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>codingËøáÁ®ã‰∏≠Ë∏©ËøáÁöÑÂùë</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ learning notes</title>
    <url>/2021/05/24/c-learning-notes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1>C++ learning notes</h1>
<h2 id="generic-algorithm">Generic algorithm</h2>
<h3 id="lambda">lambda</h3>
<p>[capture list] (parameter list) -&gt; return type {function body}</p>
<p>we can ignore the <em>parameter list</em> and <em>return type</em>, but the <em>capture list</em> and the <em>function body</em> must be reserved</p>
<p>eg:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[](<span class="keyword">const</span> string &amp;a, <span class="keyword">const</span> string &amp;b)</span><br><span class="line">	&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>();&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dynamic-memory">dynamic memory</h2>
<h3 id="shared-ptr">shared_ptr&lt;&gt;</h3>
<p>use function make_shared&lt;&gt;()</p>
<h3 id="unique-ptr">unique_ptr&lt;&gt;</h3>
<p>must be initialized once the pointer is created</p>
<h3 id="weak-ptr">weak_ptr&lt;&gt;</h3>
<p>can be assigned</p>
<h3 id="allocator">allocator</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">allocator&lt;string&gt; alloc;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> p = alloc.<span class="built_in">allocate</span>(n);</span><br><span class="line">weak_ptr&lt;string[]&gt; q = p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++ i)&#123;</span><br><span class="line">    alloc.<span class="built_in">construct</span>(q++, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">	cout &lt;&lt; *(p + i) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">alloc.<span class="built_in">deallocate</span>(p,n);</span><br></pre></td></tr></table></figure>
<blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> p;		<span class="comment">//provided p points to an object or be nullptr</span></span><br><span class="line"><span class="keyword">delete</span> [] p;	<span class="comment">//provided p points to an array or be nullptr</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="copy-assign-and-destroy">Copy, Assign and Destroy</h2>
<h3 id="specific-member-function-to-control-above-three-operations">specific member function to control above three operations</h3>
<p>copy constructor</p>
<p>copy-assignment operator</p>
<p>move constructor</p>
<p>move-assignment operator</p>
<p>destructor</p>
<h3 id="copy-constructor">copy constructor</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">    	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    	*default defination in class body is inline</span></span><br><span class="line"><span class="comment">    	*if we don&#x27;t hope so, we need to define &quot;= default&quot; out of the class body</span></span><br><span class="line"><span class="comment">    	*generally, function defined in class body is inline</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">    	<span class="built_in">Foo</span>() = <span class="keyword">default</span>; <span class="comment">//default constructor</span></span><br><span class="line">		<span class="built_in">Foo</span>(<span class="keyword">const</span> Foo&amp;); <span class="comment">//copy constructor</span></span><br><span class="line">    	<span class="comment">//first parameter must be a reference, and almost always be a const reference</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo2</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="comment">//explicit prevents implicit conversion</span></span><br><span class="line">    	<span class="function"><span class="keyword">explicit</span> <span class="title">Foo2</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">    	<span class="function"><span class="keyword">explicit</span> <span class="title">Foo2</span><span class="params">(<span class="keyword">int</span> num)</span>: n(num) &#123;</span>&#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">int</span> n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="copy-assignment-constructor">copy-assignment constructor</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		*we define a copy-assignment constructor below</span></span><br><span class="line"><span class="comment">    	*keyword operator+symbol is an overloaded operator</span></span><br><span class="line"><span class="comment">    	*which defines an operator(like =,+,- and so on)</span></span><br><span class="line"><span class="comment">    	*/</span></span><br><span class="line">		Foo &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Foo&amp; f)&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;n = f-&gt;n;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Foo f1, <span class="built_in">f2</span>(); <span class="comment">//f2 is default initialized</span></span><br><span class="line">    f1 = f2; <span class="comment">//equals to f1(f2)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="stop-the-copy">stop the copy</h4>
<p>if we don‚Äôt want a copy operation, we need to define it as the <strong>delete function</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCopy</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">NoCopy</span>() = <span class="keyword">default</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *&quot;= delete&quot; must be present when we firstly declare it.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *by the way, we can delete any functions(except the destructor),</span></span><br><span class="line"><span class="comment">        *thongh i haven&#x27;t clearly understood its effect and affect.</span></span><br><span class="line"><span class="comment">        *one interesting and meaningful example is, if a class&#x27;s member</span></span><br><span class="line"><span class="comment">        *can&#x27;t be implicitly initialized, copied, assigned or destroied,</span></span><br><span class="line"><span class="comment">        *its implicit initializer&#x27;s member function is deleted.</span></span><br><span class="line"><span class="comment">        *It prevents from creating indestructible object.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *principle: destructor can&#x27;t be delete</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">NoCopy</span>(<span class="keyword">const</span> NoCopy &amp;) = <span class="keyword">delete</span>;	<span class="comment">//stop the copy</span></span><br><span class="line">        NoCopy &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> NoCopy &amp;) = <span class="keyword">delete</span>;	<span class="comment">//stop the copy-assignment</span></span><br><span class="line">        ~<span class="built_in">NoCopy</span>() = <span class="keyword">default</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *we can put the copy constructor into private zone to prevent from copying it.</span></span><br><span class="line"><span class="comment">        *we need to declare it in the private zone first</span></span><br><span class="line"><span class="comment">        *then define it in the public zone.(in order to prevent friend use it)</span></span><br><span class="line"><span class="comment">        *however, this practice is not recommended.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="destructor">destructor</h3>
<p>destructor delete the resource used by objects, and destruct non-static elements</p>
<p>it is used whenever the object is destroyed</p>
<blockquote>
<p>implicitly destruct a pointer won‚Äôt delete the object it points.</p>
<p>on the contrary, smart pointer is class type with destructor, thus it can delete the object</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		~<span class="built_in">Foo</span>() = <span class="keyword">default</span>; <span class="comment">//destructor.this function can&#x27;t be overloaded</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="principle">principle</h4>
<ul>
<li>define destructor before assuring weather it needs a destructor or not</li>
<li>if a class needs a copy constructor, it always need a copy-assignment constructor. And vice verse</li>
</ul>
<h3 id="copy-control-and-resource-management">copy control and resource management</h3>
<p>behave like a value: the copy and the original object is fully independent</p>
<p>behave like a pointer: the copy and the original object point to the same underlying data</p>
<h4 id="classes-which-behave-like-a-value">classes which behave like a value</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">HasPtr</span>(<span class="keyword">const</span> std::string &amp;s = std::<span class="built_in">string</span>()):</span><br><span class="line">			<span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(s)), <span class="built_in">i</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">		<span class="comment">//every HasPtr&#x27;s copy has its own string member with equal value</span></span><br><span class="line">		<span class="built_in">HasPtr</span>(<span class="keyword">const</span> HasPtr &amp;p):</span><br><span class="line">			<span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(*(p.ps))), <span class="built_in">i</span>(p.i) &#123;&#125;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		*most copy assignment constructor combines the function</span></span><br><span class="line"><span class="comment">		*of destructor and copy constructor.</span></span><br><span class="line"><span class="comment">		*</span></span><br><span class="line"><span class="comment">		*for instance, copy assignment constructor</span></span><br><span class="line"><span class="comment">		*destroys the left side object&#x27;s resource as destructor,</span></span><br><span class="line"><span class="comment">		*and copies data from the right side object</span></span><br><span class="line"><span class="comment">		*to the left one like copy constructor</span></span><br><span class="line"><span class="comment">		*</span></span><br><span class="line"><span class="comment">		*if possible, copy assignment constructor should be exception safe.</span></span><br><span class="line"><span class="comment">		*which means when an exception occurs,</span></span><br><span class="line"><span class="comment">		*it can put the left side object in a meaningful state</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		HasPtr &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;);</span><br><span class="line">		~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line">			<span class="keyword">delete</span> ps;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		std::string *ps;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*in this case, to ensure exception safety,</span></span><br><span class="line"><span class="comment">*we copy the right object&#x27;s data first</span></span><br><span class="line"><span class="comment">*to ensure exception safety before assignment.</span></span><br><span class="line"><span class="comment">*then we delete the resource of the left object and execute assignment</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HasPtr &amp;HasPtr::<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;rhs) &#123;</span><br><span class="line">	<span class="keyword">auto</span> newp = <span class="keyword">new</span> std::<span class="built_in">string</span>(*rhs.ps);</span><br><span class="line">	<span class="keyword">delete</span> ps;</span><br><span class="line">	ps = newp;</span><br><span class="line">	i = rhs.i;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="classes-which-behave-like-a-pointer">classes which behave like a pointer</h4>
<p>use reference count to control the underlying data</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">HasPtr</span>(<span class="keyword">const</span> std::string &amp;s = std::<span class="built_in">string</span>()):</span><br><span class="line">			<span class="built_in">ps</span>(<span class="keyword">new</span> std::<span class="built_in">string</span>(s)), <span class="built_in">i</span>(<span class="number">0</span>), <span class="built_in">use</span>(<span class="keyword">new</span> std::<span class="built_in">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line">		<span class="comment">//copy the pointer to ensure they point to the same underlying data</span></span><br><span class="line">		<span class="comment">//increase the reference count</span></span><br><span class="line">		<span class="built_in">HasPtr</span>(<span class="keyword">const</span> HasPtr &amp;p):</span><br><span class="line">			<span class="built_in">ps</span>(p.ps), <span class="built_in">i</span>(p.i), <span class="built_in">use</span>(p.use) &#123;</span><br><span class="line">			++*use;</span><br><span class="line">		&#125;</span><br><span class="line">		HasPtr &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;);</span><br><span class="line">		~<span class="built_in">HasPtr</span>();</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		std::string *ps;</span><br><span class="line">		<span class="keyword">int</span> i;</span><br><span class="line">		std::<span class="keyword">size_t</span> *use; <span class="comment">//reference count</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HasPtr::~<span class="built_in">HasPtr</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (--*use == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span> ps;</span><br><span class="line">		<span class="keyword">delete</span> use;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HasPtr &amp;HasPtr::<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;rhs) &#123;</span><br><span class="line">	++*rhs.use;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//execute the left object&#x27;s destructor</span></span><br><span class="line">	<span class="keyword">if</span> (--*use == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span> ps;</span><br><span class="line">		<span class="keyword">delete</span> use;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//execute assignment</span></span><br><span class="line">	ps = rhs.ps;</span><br><span class="line">	i = rhs.i;</span><br><span class="line">	use = rhs.use;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="swap">swap</h3>
<p>we can swap the pointer to decrease extra memory allocation</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span> &#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(HasPtr &amp;, HasPtr &amp;)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*if a menber of a class has its own swap function,</span></span><br><span class="line"><span class="comment">*use the std::swap is an error</span></span><br><span class="line"><span class="comment">*and if we implicitly use swap function, the compiler use the overloaded one by default</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(HasPtr &amp;lhs, HasPtr &amp;rhs)</span></span>&#123;</span><br><span class="line">	<span class="keyword">using</span> std::swap;</span><br><span class="line">	<span class="built_in">swap</span>(lhs.ps,rhs.ps);</span><br><span class="line">	<span class="built_in">swap</span>(lhs.i, rhs.i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">HasPtr <span class="title">h1</span><span class="params">()</span>,<span class="title">h2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">using</span> std::swap;</span><br><span class="line">    <span class="built_in">swap</span>(h1,h2); <span class="comment">//use the overloaded one</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tip:this function can&#x27;t overload the HasPtr &amp;HasPtr::operator=(HasPtr &amp;rhs)</span></span><br><span class="line">HasPtr &amp;HasPtr::<span class="keyword">operator</span>=(HasPtr rhs)&#123; <span class="comment">//parameter is a copy, not a reference</span></span><br><span class="line">    <span class="built_in">swap</span>(*<span class="keyword">this</span>, rhs);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//rhs is destroyed</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="move-constructor">move constructor</h3>
<blockquote>
<p>library container, string and shared_ptr class support both move and copy operation</p>
<p>IO class and unique_ptr class can be moved, but can‚Äôt be copied</p>
</blockquote>
<blockquote>
<p>rvalue reference must be bound to an rvalue. we get rvalue reference through &amp;&amp; instead of &amp;</p>
<p>rvalue reference must be bound to an object ready to be destroyed</p>
<p>therefore, we can freely move an rvalue reference resource to another object</p>
<p>moreover, we can bound a const lvalue reference to an rvalue, as well</p>
<p>expression returns an rvalue. But rvalue reference variate itself is a lvalue</p>
<p>eg:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r = i;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i * <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;&amp;r3 = i * <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;&amp;r4 = r3; <span class="comment">//illegal</span></span><br></pre></td></tr></table></figure>
<p>all of them is legal except the last one</p>
</blockquote>
<p>std::move avails to use a lvalue as an rvalue. What‚Äôs more, we must recognize that executing move means we promote not to use the original element unless we assign or destruct it.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;&amp;r4 = std::<span class="built_in">move</span>(r3); <span class="comment">//legal</span></span><br><span class="line"><span class="comment">//use std::move instead of move in order to prevent from potential naming conflict</span></span><br></pre></td></tr></table></figure>
<p>an example of move constructor</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StrVec::<span class="built_in">StrVec</span>(StrVec &amp;&amp;s) <span class="keyword">noexcept</span> <span class="comment">//move operation shouldn&#x27;t throw error</span></span><br><span class="line"><span class="comment">//initializer take over resource of s</span></span><br><span class="line">	: <span class="built_in">elements</span>(s.elements), <span class="built_in">first_feet</span>(s.first_feet), <span class="built_in">cap</span>(s.cap) &#123;</span><br><span class="line">	s.elements = s.first_feet = s.cap = <span class="literal">nullptr</span>; </span><br><span class="line">        							<span class="comment">//brilliant!</span></span><br><span class="line">        							<span class="comment">//get the spark of controlling dynamic memory!</span></span><br><span class="line">	<span class="comment">//now destructing s is safe</span></span><br><span class="line">    <span class="comment">//i wander weather we permit s to be meaningfully assigned, </span></span><br><span class="line">    <span class="comment">//and after insperation, i find that void StrVec::push_back(const std::string &amp;)</span></span><br><span class="line">    <span class="comment">//has considered this situation. Now both assignment and destruction is ligal.</span></span><br><span class="line">    <span class="comment">//and at the same time we can&#x27;t read its value</span></span><br><span class="line">    <span class="comment">//(certainly i put the whole code into my cpp file to avoid making my notes bloated)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="move-assignment-constructor">move assignment constructor</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StrVec &amp;StrVec::<span class="keyword">operator</span>=(StrVec &amp;&amp;rhs) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">	<span class="comment">//check self-assignment</span></span><br><span class="line">	<span class="comment">//I guess this operation is designed to avoid freeing itself</span></span><br><span class="line">	<span class="comment">//otherwise it may move meaningless data and put itself in a meaningless state</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs) &#123;</span><br><span class="line">		<span class="built_in">free</span>(); <span class="comment">//release itself</span></span><br><span class="line">		elements = rhs.elements;</span><br><span class="line">		first_feet = rhs.first_feet;</span><br><span class="line">		cap = rhs.cap;</span><br><span class="line">		<span class="comment">//put rhs in a destructible state</span></span><br><span class="line">		rhs.elements = rhs.first_feet = rhs.cap = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//copy and move operation&#x27;s overload</span></span><br><span class="line">StrVec v1, v2;</span><br><span class="line">v1 = v2;					<span class="comment">//copy assignment constructor</span></span><br><span class="line"><span class="function">StrVec <span class="title">getVec</span><span class="params">(istream &amp;)</span></span>;	<span class="comment">//getVec returns an rvalue</span></span><br><span class="line">							<span class="comment">//because getVec() dosen&#x27;t return value instead of reference</span></span><br><span class="line">							<span class="comment">//up to now getVec() is just a declaration</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="built_in">getVec</span>(cin);			<span class="comment">//move assignment constructor</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*if we didn&#x27;t define a move constructor</span></span><br><span class="line"><span class="comment">*the compiler will convert an rvalue reference to a const reference</span></span><br><span class="line"><span class="comment">*and call copy constructor</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="reference-qualifier">reference qualifier</h3>
<p>C++ permit us to assign value to a rvalue object(so weird)</p>
<p>eg:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;a&quot;</span>)</span>, <span class="title">s2</span><span class="params">(<span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>)</span></span>; 	<span class="comment">//s1 = &quot;a&quot;, s2 = &quot;bbb&quot;;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*(s1 + s2) is an rvalue which never affects s1 and s2&#x27;s value without assignment</span></span><br><span class="line"><span class="comment">*usually it is created by compiler and released soon</span></span><br><span class="line"><span class="comment">*the following expression execute:</span></span><br><span class="line"><span class="comment">*	create a string temp_s = s1 + s2 = &quot;abbb&quot;;</span></span><br><span class="line"><span class="comment">*	assign &quot;Wow&quot; to temp_s and return &quot;Wow&quot;;</span></span><br><span class="line"><span class="comment">*	assign &quot;Wow&quot; to s3;</span></span><br><span class="line"><span class="comment">* 	release temp_s</span></span><br><span class="line"><span class="comment">*Just from my own guess.If there&#x27;s something wrong, I&#x27;ll correct it</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">string s3 = (s1 + s2) = <span class="string">&quot;Wow&quot;</span>;</span><br><span class="line">cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>we can use the reference qualifier to enforce the left object is an lvalue or an rvalue</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//the &amp; in the back of parameter list enforce the left object is an lvalue</span></span><br><span class="line">		Foo &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Foo&amp;) &amp;; </span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Foo &amp;Foo::<span class="keyword">operator</span>=(<span class="keyword">const</span> Foo&amp; rhs) &amp;&#123;</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function">Foo <span class="title">someMember</span><span class="params">()</span> <span class="keyword">const</span> &amp;</span>; <span class="comment">//const should be in front of reference qualifier</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>reference qualifier and overloaded</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function">Foo <span class="title">sorted</span><span class="params">()</span> &amp;&amp;</span>;</span><br><span class="line">		<span class="function">Foo <span class="title">sorted</span><span class="params">()</span> <span class="keyword">const</span> &amp;</span>;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		vector&lt;<span class="keyword">int</span>&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//because object is an rvalue, we can change itself without any affection</span></span><br><span class="line"><span class="function">Foo <span class="title">Foo::sorted</span><span class="params">()</span> &amp;&amp;</span>&#123; </span><br><span class="line">	<span class="built_in">sort</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//object is an lvalue, thus we can&#x27;t affect its value</span></span><br><span class="line"><span class="function">Foo <span class="title">Foo::sorted</span><span class="params">()</span> <span class="keyword">const</span> &amp;</span>&#123;</span><br><span class="line">	<span class="function">Foo <span class="title">temp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">	<span class="built_in">sort</span>(temp.data.<span class="built_in">begin</span>(), temp.data.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="overloading-and-type-conversion">overloading and type conversion</h2>
<h3 id="basic-concept">basic concept</h3>
<ul>
<li>
<p>an operator function should be a member of a class or have at least than one class type parameter</p>
</li>
<li>
<p>which means we can‚Äôt overload operators acting on the build-in type</p>
</li>
<li>
<p>overloaded operator‚Äôs priority and associative law is the same as the original operator</p>
</li>
</ul>
<p><strong>operators can be overloaded</strong></p>
<table>
<thead>
<tr>
<th>+</th>
<th>-</th>
<th>*</th>
<th>/</th>
<th>%</th>
<th>^</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td></td>
<td></td>
<td>~</td>
<td>!</td>
<td>,</td>
<td>=</td>
</tr>
<tr>
<td>&lt;</td>
<td>&gt;</td>
<td>&lt;=</td>
<td>&gt;=</td>
<td>++</td>
<td>‚Äì</td>
<td></td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>&gt;&gt;</td>
<td>==</td>
<td>!=</td>
<td>&amp;&amp;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>+=</td>
<td>-=</td>
<td>/=</td>
<td>%=</td>
<td>^=</td>
<td>&amp;=</td>
<td></td>
</tr>
<tr>
<td></td>
<td>=</td>
<td>*=</td>
<td>&lt;&lt;=</td>
<td>&gt;&gt;=</td>
<td>[]</td>
<td>()</td>
</tr>
<tr>
<td>-&gt;</td>
<td>-&gt;*</td>
<td>new</td>
<td>new[]</td>
<td>delete</td>
<td>delete[]</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>operators can not be overloaded</strong></p>
<table>
<thead>
<tr>
<th>::</th>
<th>.*</th>
<th>.</th>
<th>? :</th>
</tr>
</thead>
<tbody></tbody>
</table>
<h3 id="operators">operators</h3>
<p>there are various of operators overloading practice. and you know, <em>cujus rei demonstrationem mirabilem sane detexi. Hanc marginis exiguitas non caperet</em>.(I‚Äôm sure I‚Äôve discovered a wonderful demonstration, but the space here is too small to fill it). so I write them all down in my practice .cpp file and just note some announcements there.</p>
<p>The essence of operator overloading is a function call. therefore we can‚Äôt save  the original order of evaluation and the short circuit evaluation. and that‚Äôs why we don‚Äôt advice you to overload comma, address, logic and, logic or.</p>
<p>when we define an operator as a member function, its left operand must be an object of the operator‚Äôs class.</p>
<p>operator(=), index([]), call(()), member accession(-&gt;) operator must be member function of class.</p>
<p>ostream(&lt;&lt;), istream(&gt;&gt;) can‚Äôt be member function.</p>
<p>index operator usually define two overloading versions, the const one and the nonconst one.</p>
<p>increase and decrease operators usually be set as member functions.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">strBlobPtr &amp;<span class="keyword">operator</span>++();		<span class="comment">//preoperator</span></span><br><span class="line">strBlobPtr <span class="keyword">operator</span>++(<span class="keyword">int</span>);		<span class="comment">//postoperator</span></span><br><span class="line"></span><br><span class="line">strBlobPtr strBlobPtr::<span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">	strBlobPtr ret = *<span class="keyword">this</span>;</span><br><span class="line">	++*<span class="keyword">this</span>;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if we overload the call operator, the object of this class is called function object, because we can call this object. function object is usually used as actual parameter of generic algorithm. moreover, <a href="https://blog.csdn.net/YangZejia0120/article/details/118713608?spm=1001.2014.3001.5501"><strong>lambda</strong></a> is an unnamed class‚Äô unnamed object, whose call operator is overloaded by lambda‚Äôs function body.</p>
<p>liberty <strong>functional</strong> defines a succession of function class as templates. and they are listed below.</p>
<table>
<thead>
<tr>
<th>arithmetic</th>
<th>relation</th>
<th>logic</th>
</tr>
</thead>
<tbody>
<tr>
<td>plus<Type></Type></td>
<td>equal_to<Type></Type></td>
<td>logical_and<Type></Type></td>
</tr>
<tr>
<td>minus<Type></Type></td>
<td>not_equal_to<Type></Type></td>
<td>logical_or<Type></Type></td>
</tr>
<tr>
<td>multiplies<Type></Type></td>
<td>greater<Type></Type></td>
<td>logical_not<Type></Type></td>
</tr>
<tr>
<td>divides<Type></Type></td>
<td>greater_equal<Type></Type></td>
<td></td>
</tr>
<tr>
<td>modulus<Type></Type></td>
<td>less<Type></Type></td>
<td></td>
</tr>
<tr>
<td>negate<Type></Type></td>
<td>less_equal<Type></Type></td>
<td></td>
</tr>
</tbody>
</table>
<p>operator <em>type</em>() const is class-type conversions or be named user-define conversions. it allows a type to be an object‚Äôs return type. this conversion is implicit.</p>
<p>we can define explicit conversion operator to control class-type conversion.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallInt</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">SmallInt</span>(<span class="keyword">int</span> i = <span class="number">0</span>): <span class="built_in">val</span>(i) &#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> val;&#125;</span><br><span class="line">		<span class="keyword">operator</span>=(<span class="keyword">int</span>);</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SmallInt si = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(si) + <span class="number">3</span>; <span class="comment">//explicitly request for type conversion</span></span><br></pre></td></tr></table></figure>
<p>however, if the conversion is used as a condition, the compiler will automatically execute the conversion.</p>
<h3 id="function-table">function table</h3>
<p>function, function pointer, function class, lambda expression, classes built by bind and any other classes which has overloaded the call operator are all callable object. function class defined in liberty <strong>functional</strong> can be used to reserve callable object.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line">function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f1 = add;</span><br><span class="line"><span class="comment">//f1(4,2) == 6; //equal to add(4,2);</span></span><br><span class="line"><span class="comment">//f1 == true;	//f1 has a callable object;</span></span><br><span class="line">function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f2 = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;<span class="keyword">return</span> i * j;&#125;;</span><br></pre></td></tr></table></figure>
<p>we can define a function table to reserve callable objects with same <em>retType(args)</em>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map&lt;string, function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt;&gt; binops = &#123;</span><br><span class="line">	&#123;<span class="string">&quot;+&quot;</span>, add&#125;,	<span class="comment">//each element is a pair</span></span><br><span class="line">	&#123;<span class="string">&quot;-&quot;</span>, minus&lt;<span class="keyword">int</span>&gt;()&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;/&quot;</span>, <span class="built_in">divide</span>()&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;*&quot;</span>, [](<span class="keyword">int</span> i, <span class="keyword">int</span> j)&#123;<span class="keyword">return</span> i * j;&#125;&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;%&quot;</span>, mod&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//in this case, binos[&quot;+&quot;](4,2) == 6;</span></span><br></pre></td></tr></table></figure>
<h2 id="object-oriented-programming">Object-Oriented Programming</h2>
<h3 id="inheritance">inheritance</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">		<span class="built_in">Quote</span>(<span class="keyword">const</span> std::string &amp;book, <span class="keyword">double</span> sales_price):</span><br><span class="line">			<span class="built_in">bookNo</span>(book), <span class="built_in">price</span>(sales_price) &#123;&#125;</span><br><span class="line">		<span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> bookNo;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//key word virtual defines a virtual function</span></span><br><span class="line">		<span class="comment">//which means the base class permits drived classes to override it</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">net_price</span><span class="params">(std::<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> n * price;</span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="comment">//moreover, if we don&#x27;t wish our clients use the base class&#x27; member function</span></span><br><span class="line">    	<span class="comment">//we need to define this member function to be a pure virtual function as the following code row</span></span><br><span class="line">    	<span class="comment">//notice :the pure virtual function can only be defined in the declaration body</span></span><br><span class="line">    	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">net_price</span><span class="params">(std::<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>; </span><br><span class="line">		<span class="keyword">virtual</span> ~<span class="built_in">Quote</span>() = <span class="keyword">default</span>; <span class="comment">//dynamically bind destructor</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		std::string bookNo;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		*key word protected serves for those members</span></span><br><span class="line"><span class="comment">		*which are not supposed to be used by object&#x27;s users</span></span><br><span class="line"><span class="comment">		*but needed to be used by derived class</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		<span class="keyword">double</span> price = <span class="number">0.0</span>;		<span class="comment">//common price without discount</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*type of class derivation list:colon and a list of base class</span></span><br><span class="line"><span class="comment">*whose type is base class behind optional assess specifire</span></span><br><span class="line"><span class="comment">*and splited by comma</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bulk_quote</span>:</span> <span class="keyword">public</span> Quote &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Buli_quote</span>() = <span class="keyword">default</span>;</span><br><span class="line">		<span class="built_in">Built_quote</span>(<span class="keyword">const</span> std::string &amp;, <span class="keyword">double</span>, std::<span class="keyword">size_t</span>, <span class="keyword">double</span>);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		*key word override explicitly declare that this member function</span></span><br><span class="line"><span class="comment">		*will be used to redefine the base class&#x27; virtual function</span></span><br><span class="line"><span class="comment">		*if not, the compiler will throw error</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="function"><span class="keyword">double</span> <span class="title">net_price</span><span class="params">(std::<span class="keyword">size_t</span>)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="comment">//the minimum purchase quantity of discount</span></span><br><span class="line">		std::<span class="keyword">size_t</span> min_qty = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> discount = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>because derived class has its base class member, compiler can implicitly convert it into its base class as a reference or pointer. On the contrary, compiler doesn‚Äôt allow us to implicitly convert base class object into derived class object. However, if we ensure this action‚Äôs safety, we can use <strong>static_cast</strong> enforce the conversion. But this action is not recommended. What‚Äôs more, if the base class has at least one virtual function, we can use <strong>dynamic_cast</strong> to check this conversion‚Äôs safety and let the compiler divides whether allow or not.</p>
<p>if a base class defines a static member, the whole inheritance system has only one instance no matter how many derived classes and objects have been defined.</p>
<p>base class must be defined before defining derived classes.</p>
<p>key word <strong>final</strong> restrict us from using a class as base class. key word <strong>final</strong> can be used to declare that a virtual function is the final function, which means this function can‚Äôt be overrode.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoDerived</span> <span class="keyword">final</span> &#123;</span><span class="comment">/*details*/</span>&#125;</span><br><span class="line"><span class="comment">//illegal, we can&#x27;t use Noderived as a base class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bad</span>:</span> <span class="keyword">public</span> NoDerived &#123;<span class="comment">/*details*/</span>&#125;</span><br></pre></td></tr></table></figure>
<p>virtual function can have acquiescent parameters, and its acquiescent parameters depend on the static type of the call.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">funcion</span><span class="params">(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">1</span>)</span></span>&#123;<span class="comment">/*details*/</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> a = <span class="number">1</span>, <span class="keyword">int</span> b = <span class="number">2</span>)</span> <span class="keyword">override</span></span>&#123;<span class="comment">/*details*/</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execuse_function</span><span class="params">(Base &amp;b)</span></span>&#123;</span><br><span class="line">	b.<span class="built_in">function</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Derived d;</span><br><span class="line">	<span class="built_in">execuse_function</span>(d); <span class="comment">//execuse Base::function(int a = 0, int b = 1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="scope">scope</h3>
<p><strong>notions:</strong></p>
<ul>
<li>iff the derived class publicly inherits base class can users use the conversions between derived class and base class.</li>
<li>if the derived class publicly or protected inherits base class, the derived class can use the conversions.</li>
<li>if the derived class privately inherits base class, the derived class‚Äô objects and friends can‚Äôt use the conversions.</li>
<li>friend relationship can‚Äôt be inherited.</li>
<li><strong>each class controls its members‚Äô accessible permissions.</strong></li>
<li>if we need to change a member‚Äôs accessible permission, we can use the <em>using</em> declaration in the corresponding action scope</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function">std::<span class="keyword">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> n;&#125;</span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		std::<span class="keyword">size_t</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//we inherit the base class in the private scope</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">private</span> Base&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//then Base::size() is public </span></span><br><span class="line">		<span class="keyword">using</span> Base::size;</span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		<span class="keyword">using</span> Base::n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>acquiescent derived scope operators depend on class‚Äô type. struct acquiescently owns public scope while class having private scope.</p>
<p>derived class‚Äô scope is combined into base class‚Äô scope. thus derived class‚Äô member with the same name as base class‚Äô has higher priority.</p>
<p>name lookup precedes type lookup. function declared in the inner scope won‚Äôt override but cover the outer scope‚Äôs function.(which remind us to use the <em>override</em> key word. otherwise we must ensure that the derived class‚Äôs function has the same parameters list as the base class‚Äô)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">memfunc</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Derived</span>:</span> Base&#123;<span class="comment">//Base&#x27;s scope operator is public</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">memfunc</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Derived d;</span><br><span class="line">Base b;</span><br><span class="line">b.<span class="built_in">memfunc</span>();</span><br><span class="line">d.<span class="built_in">memfunc</span>(<span class="number">10</span>);</span><br><span class="line">d.<span class="built_in">memfunc</span>();		<span class="comment">//error:Base::memfunc() is hided. the right way is written below</span></span><br><span class="line">d.Base::<span class="built_in">memfunc</span>();</span><br></pre></td></tr></table></figure>
<h3 id="dynamic-binding">dynamic binding</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">print_total</span><span class="params">(ostream &amp;os,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">const</span> Quote &amp;item, <span class="keyword">size_t</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//calling Quote::net_price or Bulk_quote::net_price</span></span><br><span class="line">	<span class="comment">//depends on item&#x27;s object type</span></span><br><span class="line">    <span class="comment">//moreover, accessible members which we can use depend on the static type</span></span><br><span class="line">    <span class="comment">//for instance, this item below has no right to use Bulk_quote&#x27;s unique public members</span></span><br><span class="line">	<span class="keyword">double</span> ret = item.<span class="built_in">net_price</span>(n);</span><br><span class="line">	os &lt;&lt; <span class="string">&quot;ISBN: &quot;</span> &lt;&lt; item.<span class="built_in">isbn</span>()</span><br><span class="line">	   &lt;&lt; <span class="string">&quot;# sold: &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;total due: &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if we don&#x27;y want to use dynamic binding, we need to explicitly declare the scope</span></span><br><span class="line"><span class="keyword">double</span> ret = item-&gt;Quote::<span class="built_in">net_price</span>(<span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<p>now, we need to consider this situation where we delete a derived object pointed by a base class pointer. we must ensure that the delete command executes the derived object‚Äôs destructor. So we declare the base class‚Äô destructor as a virtual function to solve this problem. what‚Äôs more, virtual destructor will impede generating movement operation.</p>
<p>What‚Äôs more, if we use containers to save objects, it is supposed to indirectly save it. An common usage is using pointer. Then we are able to use base class pointer calling derived objects.</p>
<h2 id="template">template</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="comment">//key word:template</span></span><br><span class="line">  					  <span class="comment">//&lt;template T&gt; is template parameter list</span></span><br><span class="line">					  <span class="comment">//template parameters are divided by comma</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*moerover, key word typename is the same with key word class in this situation</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> T&amp; v1, <span class="keyword">const</span> T&amp; v2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (v1 &gt; v2) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (v2 &lt; v1) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//type parameter can be used as return type or parameter type</span></span><br><span class="line"><span class="comment">//it can be used as variables declaration and type translation, as well</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">foo</span><span class="params">(T* p)</span> </span>&#123;</span><br><span class="line">	T tmp = *p;</span><br><span class="line">	<span class="comment">//omitted details</span></span><br><span class="line">	<span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*we can define nontype parameter and the parameter&#x27;s value is provided by</span></span><br><span class="line"><span class="comment">*clients or compiler</span></span><br><span class="line"><span class="comment">*in this case, compiler provide nontype parameters int values depends on</span></span><br><span class="line"><span class="comment">*const char array&#x27;s length</span></span><br><span class="line"><span class="comment">*nontype parameter can be int, object/function pointer or lvalue reference</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> N, <span class="keyword">unsigned</span> M&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;p1)[N], <span class="keyword">const</span> <span class="keyword">char</span> (&amp;p2)[M])</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(p1,p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*template can be declared as inline or constexpr</span></span><br><span class="line"><span class="comment">*this declaration should be put between template parameter list and return type</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <span class="title">min</span><span class="params">(<span class="keyword">const</span> T&amp;, <span class="keyword">const</span> T&amp;)</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>principle</strong>: template function‚Äôs parameters are supposed to be const reference, which guarantees non-copyable object‚Äôs availability.</p>
<p>if we want to define a class member function out of the class body, it‚Äôs type should be:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt;</span><br><span class="line"><span class="keyword">return</span>-type class-name::member-<span class="built_in">name</span>(parameter-list) &#123;function-bod&#125;</span><br></pre></td></tr></table></figure>
<p>By default, template class‚Äô member function is instantiated when it is called, which help us to use a template class even though there are some member function incompatible with a type, we can use part of class functions.</p>
<h3 id="friend-declaration">friend declaration</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//friend declaration</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Pal</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Pal</span>&lt;</span>C&gt;; <span class="comment">//Pal instantiated by class C is a friend</span></span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Pal2</span>;</span> <span class="comment">//each instantiated Pal2 is C&#x27;s friend</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">C2</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Pal</span>&lt;</span>T&gt;;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> X&gt; <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Pal2</span>;</span><span class="comment">//each instantiated Pal2 is each instantiated C2&#x27;s friend</span></span><br><span class="line">									   <span class="comment">//notice: friend&#x27;s typename should be different from template class&#x27;</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Pal3</span>;</span> <span class="comment">//Pal3 is a non-template class, every instantiated C2 is Pal3&#x27;s friend</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//let template&#x27;s typename as friend</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">C3</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> T; <span class="comment">//type T is friend of C3 instantiated by T</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>if a template class contains static members, each type instantiated class has its own static members.</p>
<p>if we access a type name from a template class, we need to use the key word <strong>typename</strong> to explicitly ask compiler treats the name as a type name.</p>
<p>we can define default template argument, like code below.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> F = less&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">compare</span>(<span class="keyword">const</span> T&amp; v1, <span class="keyword">const</span> T&amp; v2, F f=<span class="built_in">F</span>())&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">f</span>(v1,v2)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">f</span>(v2,v1)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//even if all the parameters of a template&#x27;s typename parameter list is default argued</span></span><br><span class="line"><span class="comment">//we have to use angle brackets to ask compiler instantiate a class from a template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt; class tmp_array&#123;<span class="comment">/*details*/</span>&#125;;</span><br><span class="line">tmp_array&lt;&gt; a;</span><br></pre></td></tr></table></figure>
<p>Besides, it is known that once we define a template class‚Äô type, compiler instantiates a class instance. But this activity faces an embarrassing situation. Once we create a project and use template class with the same type in different file, the compiler will instantiates several instances in each file. Which may be a mass overhead. We can use the key word <strong>extern</strong> to declare a class to prevent from such overhead.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">template</span> <span class="class"><span class="keyword">class</span> <span class="title">Blob</span>&lt;</span>string&gt;;				<span class="comment">//declaration</span></span><br><span class="line"><span class="function"><span class="keyword">template</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp;, <span class="keyword">const</span> <span class="keyword">int</span>&amp;)</span></span>;	<span class="comment">//definition</span></span><br><span class="line">												<span class="comment">//in this case, compiler will instantiates the whole members</span></span><br><span class="line">												<span class="comment">//thus the type must apply to every member</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Blob&lt;string&gt; sa1, sa2; <span class="comment">//compiler instantiates class in other file</span></span><br><span class="line">					    <span class="comment">//Thus key word extern expresses that there is a definition in our project</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>and if we can‚Äôt make sure what the return type definitely is, we can use the tail-set return to declare function‚Äôs return type</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//using tail-set return to explicitly declare function&#x27;s return type</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> It&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">fcn</span><span class="params">(It beg, It end)</span> -&gt; <span class="title">decltype</span><span class="params">(*beg)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//details</span></span><br><span class="line">	<span class="keyword">return</span> *beg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="reference-collapsing">reference collapsing:</h3>
<blockquote>
<p>X&amp; &amp;, X&amp; &amp;&amp;, X&amp;&amp; &amp; will collapse to X&amp;</p>
<p>X&amp;&amp; &amp;&amp; will be collapse to X&amp;&amp;</p>
</blockquote>
<p>By define a parameter as an rvalue reference, we can save all of argument‚Äôs type-info. By using reference, we can save the const-info. By define parameters as rvalue references, we can use reference collapsing to save arguments‚Äô reference characteristic.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F,<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(F f, T1 &amp;&amp;t1, T2 &amp;&amp;t2)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">f</span>(t1, t2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, function expression returns an lvalue, which restrict us from binding an rvalue reference to an rvalue reference. In this case, we need to use the lib function <strong>std::forward</strong>, which is defined in lib <em>utility</em>, to save the reference type(by using the reference collapsing). Thus, we modifies the original code to the below one</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F,<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(F f, T1 &amp;&amp;t1, T2 &amp;&amp;t2)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">f</span>(std::forward&lt;T1&gt;(t1), std::forward&lt;T2&gt;(t2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When we overload a template function, compiler will chose the more specialized one. Thus if we define a template function</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">string <span class="title">func</span><span class="params">(T &amp;a)</span> </span>&#123;<span class="comment">/*details*/</span>&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">string <span class="title">func</span><span class="params">(T *a)</span> </span>&#123;<span class="comment">/*details*/</span>&#125;</span><br></pre></td></tr></table></figure>
<p>and we hope the compiler may cope with <em>char</em> &amp; <em>const char</em> as <em>string</em>, we need to define two specialized overloaded function</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">func</span><span class="params">(<span class="keyword">const</span> string&amp;)</span></span>; <span class="comment">//declare a string type instance to avoid from default call </span></span><br><span class="line"><span class="function">string <span class="title">func</span><span class="params">(<span class="keyword">char</span> *p)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">func</span>(<span class="built_in">string</span>(p));&#125;</span><br><span class="line"><span class="function">string <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">func</span>(<span class="built_in">string</span>(p));&#125;</span><br></pre></td></tr></table></figure>
<h3 id="parameter-packet">parameter packet</h3>
<p>we use symbol <strong>‚Ä¶</strong> after keyword <em>typename</em> or <em>class</em> to express indefinite number of parameters</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Args is a template parameter packet, rest is a function parameter packet</span></span><br><span class="line"><span class="comment">//Args means zero or several template parameters</span></span><br><span class="line"><span class="comment">//rest means zero or several function parameters</span></span><br><span class="line"><span class="comment">//types in packet can be different from each other</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">const</span> T &amp;t, <span class="keyword">const</span> Args&amp;... rest)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;T&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(cout, rest)...;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>we can use <strong>sizeof</strong> to calculate the number of parameters in the packet</p>
<p><strong>call packet parameters</strong>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//end the recursion and print the last element</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;os, <span class="keyword">const</span> T &amp;t)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> os &lt;&lt; t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//recursion call</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;os, <span class="keyword">const</span> T &amp;t, <span class="keyword">const</span> Args&amp;... rest)</span> </span>&#123;</span><br><span class="line">	os &lt;&lt; t &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">print</span>(os, rest...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">2.0</span>;</span><br><span class="line">	<span class="keyword">long</span> l = <span class="number">321</span>;</span><br><span class="line">	string s = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">	<span class="built_in">foo</span>(cout, i, d, l, s);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:1       2       321     hello world!</span></span><br></pre></td></tr></table></figure>
<h3 id="specialize">specialize</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//specialize</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> T &amp;, <span class="keyword">const</span> T &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">size_t</span> N, <span class="keyword">size_t</span> M&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>(&amp;)[N], <span class="keyword">const</span> <span class="keyword">char</span>(&amp;)[M])</span></span>; <span class="comment">//const char(&amp;)[M] is a reference to an char array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a specialized instance of function compare</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> &amp;, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> &amp;)</span></span>;<span class="comment">//a reference to an const (or not) pointer</span></span><br></pre></td></tr></table></figure>
<p><strong>notice</strong>: Once we need a specialized instance but forget to declare or define one, where there is a template suits to this instance‚Äôs type, the compiler will instantiate an instance. This mistake won‚Äôt be checked up. Thus we are supposed to define templates with the same name in the same header file. And put the specialized instances after those template. Certainly we need to check up whether we have declared an instance or not.</p>
]]></content>
      <categories>
        <category>ÊäÄÊúØÁ¨îËÆ∞</category>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Notes</tag>
      </tags>
  </entry>
</search>
