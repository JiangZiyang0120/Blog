<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode 1687. Delivering Boxes from Storage to Ports</title>
    <url>/2022/09/01/1687.delivering-boxes-from-storage-to-ports/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>As the dynamic programming solution’s max time complexity is $\text O(n^2)$. We could simply get the first solution:<br>This Code comes from <a href="https://leetcode.com/linshan007/">linshan077</a>. And it is almost the best implement of DP. Where the trip assist to decline the cost of repeatedly judging <code>boxes[j][0] == boxes[j-1][0]</code> and <code>dp</code> is the common implement of dynamic programming.</p>
<pre class=" language-C++"><code class="language-C++">class Solution1 &#123;
public:
    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) &#123;
        vector<int> trips(boxes.size());
        trips[0] = 0;
        for (int i = 1; i < boxes.size(); ++i) &#123;
            if (boxes[i][0] == boxes[i-1][0]) &#123;
                trips[i] = trips[i-1];
            &#125; else &#123;
                trips[i] = trips[i-1]+1;
            &#125;
        &#125;
        // dp[i+1] is minimum trips assuming i is the last box to deliver and will return to port afterwards. 
        vector<int> dp(boxes.size()+1);
        dp[0] = 0;
        for (int i = 0; i < boxes.size(); ++i) &#123;
            dp[i+1] = INT_MAX;
            int sum_weights = 0;
            for (int j = i; j>=0 && i-j+1 <= maxBoxes; --j) &#123;
                sum_weights += boxes[j][1];
                if (sum_weights > maxWeight) break;
                dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j]);
            &#125;
        &#125;
        return dp.back();
    &#125;
&#125;;
</code></pre>
<p>However, it got a TLE.  And we translate<code>min(dp[j]+2+trips[i]-trips[j])</code> into <code>2+trips[i]+min(dp[j]-trips[j])</code>. It turns to a question: find the minimum in a Slide window(Which we can easily solve by a deque with total time complexity $\text O(n)$).</p>
<pre class=" language-C++"><code class="language-C++">class Solution2 &#123;
public:
    int boxDelivering(vector<vector<int>>& boxes, int portsCount, int maxBoxes, int maxWeight) &#123;
        vector<int> trips(boxes.size());
        trips[0] = 0;
        for (int i = 1; i < boxes.size(); ++i) &#123;
            if (boxes[i][0] == boxes[i-1][0]) &#123;
                trips[i] = trips[i-1];
            &#125; else &#123;
                trips[i] = trips[i-1]+1;
            &#125;
        &#125;
        vector<long int> weights(boxes.size()+1);
        weights[0] = 0;
        for (int i = 0; i < boxes.size(); ++i) &#123;
            weights[i+1] = weights[i]+boxes[i][1];
        &#125;
        vector<int> dp(boxes.size()+1);
        dp[0] = 0;
        vector<long> weight(boxes.size()+1);
        weight[0] = 0;
        for(int i = 1; i != boxes.size()+1; ++i)
            weight[i] = weight[i-1] + boxes[i-1][1];
        deque<pair<int,int>> dq;
        int temp, totalWeight, totalBoxes;
        int j = 0;
        dq.push_back(&#123;0,dp[0] - trips[0]&#125;);
        dp[1] = 2 + trips[0] + dq.front().second;
        for (int i = 1; i < boxes.size(); ++i) &#123;
            temp = dp[i] - trips[i];
            while (!dq.empty() && dq.back().second > temp)
                dq.pop_back();
            dq.push_back(&#123;i,temp&#125;);
            totalWeight = weight[i+1] - weight[j];
            totalBoxes = i - j + 1;
            while (totalWeight > maxWeight || totalBoxes > maxBoxes)&#123;
                dq.pop_front();
                j = dq.front().first;
                totalWeight = weight[i+1] - weight[j];
                totalBoxes = i - j + 1;
            &#125;
            dp[i+1] = 2 + trips[i] + dq.front().second;
        &#125;
        return dp.back();
    &#125;
&#125;;
</code></pre>
<p>The above code deducts the cost of  repetitive calculation of <code>dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j])</code> And turns $\text O(mn)$(where m is the maxBoxes) into $\text O(n) + \text O(n) &#x3D; \text O(n)$.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/discuss/1369248/C%2B%2B-DP-solution-with-thinking-process%3A-brute-force-greater-priority-queue-greater-mono-queue">C++ DP solution with thinking process: brute force -&gt; priority queue -&gt; mono queue</a></li>
<li><a href="https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/discuss/2330389/Java-or-From-O(N2)-to-O(N)-or-MonoQueue-w-DP">Java | From O(N^2) to O(N) | MonoQueue w&#x2F; DP</a></li>
</ol>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>LeetCode笔记</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 188. Best Time to Buy and Sell Stock IV</title>
    <url>/2022/09/10/188.best-time-to-buy-and-sell-stock-iv/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>This is another dynamic programming problem similar to <a href="https://jzy-planet.com/2022/09/01/1687.delivering-boxes-from-storage-to-ports/">1687. Delivering Boxes from Storage to Ports</a>. And however, with a limitation of purchase times. We can just use two iteration on this question. One is the iteration of vector prices(conspicuously), and another is the iteration of purchase times k.<br>What’s more, we need to purchase a good before selling it. Thus we need to record the purchases. And the code is as below</p>
<pre class=" language-C++"><code class="language-C++">class Solution &#123;
public:
    int maxProfit(int k, vector<int>& price) &#123;
        vector<int> profit(2*k+1, INT_MIN);
        //if we do nothing, the profit is 0 without doubt
        profit[0] = 0;

        //the iteration of prices vector
        for(int j = 0; j < price.size(); j++) &#123;
            //the iteration of transaction times
            /*for each i, profit[i+1] is the profit with a good in stock,
             *and profit[i+2] is the profit after selling goods.
             */
            for(int i = 0; i+2 <= 2*k; i += 2)&#123;
                profit[i+1] = max(profit[i+1], profit[i]-price[j]);
                profit[i+2] = max(profit[i+2], profit[i+1]+price[j]);
            &#125;
        &#125;
        return *max_element(profit.begin(), profit.end());
    &#125;
&#125;;
</code></pre>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jzy-planet.com/2022/09/01/1687.delivering-boxes-from-storage-to-ports/">1687. Delivering Boxes from Storage to Ports</a><br><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/discuss/2555708/Easy-solution-Explained-oror-Beginner-Friendly-oror-Best-Method">✅Easy solution Explained || Beginner Friendly 🔥||✔️ Best Method</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>LeetCode笔记</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>历周记(2022-08-29 - 2022-09-04)</title>
    <url>/2022/09/04/2022-w35/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我在博客上写的第一篇周记，希望能用周记的形式来记录自己的生活和一些感悟。也能用输出倒逼输入的方式让自己去更多地涉猎一些内容。我始终觉得文理科并不是人生必须二选一的选项，一个程序工程师同样需要人文情怀和人文素养，才能更好地开发出吸引和满足他人诉求的产品。<br>我在上一周，乃至过去的一个月每天晚上都习惯性地开始写代码，一直熬到深夜解决问题才上床。然后被蓝光辐射地毫无困意，打开社交媒体刷刷刷，一直刷到昏昏沉沉地睡去。第二天被闹铃叫醒，也才堪堪睡够六个小时。时间一长，生物钟就彻底乱掉了，我开始间歇性嗜睡、感冒流涕不止，每日跑步也感觉跑不动了。这让我开始思考一个WLB(Work&amp;Life Balance) 的问题。这也是本次周记的话题。</p>
<h2 id="如何看待-WLB"><a href="#如何看待-WLB" class="headerlink" title="如何看待 WLB"></a>如何看待 WLB</h2><p>对许多大学学生而言，我们对 WLB 其实缺乏清晰的认知。一方面，学生，尤其是大学生，并没有严格的工作与时间的界限。出于个人规划与目标的不同，日日刷图书馆者有之，爆肝做项目者有之，每天摸鱼直到考试周熬夜补天者亦有之。  另一方面，学生的工作时间往往不怎么受到重视（因为大学生是极好的廉价劳动力），时常是召之即来挥之即去，这也导致学生的工作&#x2F;学习时间极不固定。<br>这种大学生活虽给了我们极大的自由，让我们可以根据自己需求来分配时间，但我认为在某种程度上这并不是一种好事。一方面，我们需要养成对“工作”的概念，找到自己认可的，能够实现自我价值的事业，然后不断精进——注意，这里需要的是一种自发而自觉的工作；另一方面，我们也需要掌握调剂工作与生活的艺术，找到适合自己的工作节奏和享受生活的态度。从这种意义上来说，八小时工作制是一种很值得借鉴的生活方式——每日给工作留足一定的时间，剩下的时间用于享受生活（当然，也可以用于发展兴趣、探索不同于日常工作的，可以提升自己的那一部分），总之，与工作保留出足够的距离。以免过快地消耗自己的激情和发展潜力。<br>在两天前，我终于堪堪调整好了自己的生物钟，也进一步规划好了自己的学习时间表。主要任务就是把自己的编程和学习计算机知识的活动调到下午，以免自己沉迷学习无法自拔，再次陷入熬夜的不良循环中去。但是终极目标仍然是坚持自己的时间表，不要为任务所困。到点后，记录完自己的状态和todo-list，然后迅速回归生活。不要陷入周期性的<a href="https://asana.com/zh-tw/resources/parkinsons-law">帕金森</a>危机中去。</p>
<h2 id="时间冗余的最大杀手"><a href="#时间冗余的最大杀手" class="headerlink" title="时间冗余的最大杀手"></a>时间冗余的最大杀手</h2><p>该条引自<a href="https://twitter.com/Svwang1">硅谷王川</a>的推特：</p>
<blockquote>
<p>最重要的一个冗余是时间冗余，有大把的闲暇时间去做自己愿意做的事情，而把在不愿意做的事情上耗费的时间尽量压缩到接近于零。</p>
<p><strong>时间冗余的第一个杀手是：浪费时间去辩论，或试图说服认知不同的人接受自己的观点。</strong> </p>
<p>时间冗余的第二个杀手，是没有把自己经常要做的一些事情自动化，然后发现自己忘了，又要耗费时间精力再人工干预。 </p>
<p>时间冗余的第三个杀手，<strong>是没有注重于可以不断多次重复使用，积累的行为；而耗费大量精力在低价值，无法重复利用的行动上。</strong> </p>
<p>时间冗余的第四个杀手，是没有勇气和意愿隔断各种低效甚至有伤害性的社交应酬，让一些 sb 随便的接近你的空间，或者允许一些群体的错误风气潜移默化的干扰你的独立思考。 </p>
<p>时间冗余的第五个杀手，是没有注意“节制饮食 - 适度运动 - 充足睡眠”, 随着年龄增长，各种肩酸背痛，视力下降，神经衰弱，高血糖血脂，心血管等毛病不断加剧，恶性循环，脾气也越发暴戾，迅速滑向老年痴呆，成了一个事实上的废人。 </p>
<p>时间冗余的第六个杀手，是本来可以花 N 小时把一个事情做得差不多足够好就收手了，硬是要花 3N, 4N 甚至更多倍的时间，仅仅把效益再提高百分之几而已，甚至画蛇添足，多余的努力反而把事情搞砸了。 </p>
<p>判断自己”时间冗余”的水平的一个角度是，你如果什么都不做，一个月，三个月，甚至像 Rip Van Winkle 一样睡很多年的觉再醒来，你的状况 (财务或者别的方面) 是不是可以维持现状，甚至会变得比现在更好? 如果有哪些地方需要人工干预，是否可以现在就未雨绸缪，把它预先自动设置好？ </p>
<p>“时间冗余”并不完全等同于“高效率”，另一个角度是当意识到自己的方向是错误的时候，可以迅速调整纠错的能力。如果方向错误，意识到错误后因为各种限制而无法迅速抽身离开，那么不管效率多高，也是枉然。 </p>
<p>任何事情，如果不能随时抽身离去，而要时常事必躬亲，是一个潜在的时间上的负资产，是对时间冗余的巨大损害。往往一开始没有在意，出了问题后才意识到代价巨大。</p>
</blockquote>
<p>我们往往意识不到时间是多么地宝贵，以致于将它轻掷到那些没有价值的地方去，陷入无底的时间漩涡无法自拔。我非常认可这个“时间冗余”的做法，以前也花了很多的经历来探索“自动化工具流”。但这段话的确给了我更多的启示：将时间浪费地画在不值得的地方同样是一种不负责任。如果必须浪费时间，那就将时间浪费给自己和自己爱的人身上吧。若是无谓地虚掷时间而想要获得快乐，斯以伐根而求木茂，塞源而欲流长也。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>周记</category>
      </categories>
      <tags>
        <tag>weekly journal</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ learning notes</title>
    <url>/2021/05/24/c-learning-notes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="C-learning-notes"><a href="#C-learning-notes" class="headerlink" title="C++ learning notes"></a>C++ learning notes</h1><h2 id="Generic-algorithm"><a href="#Generic-algorithm" class="headerlink" title="Generic algorithm"></a>Generic algorithm</h2><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>[capture list] (parameter list) -&gt; return type {function body}</p>
<p>we can ignore the <em>parameter list</em> and <em>return type</em>, but the <em>capture list</em> and the <em>function body</em> must be reserved</p>
<p>eg:</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="dynamic-memory"><a href="#dynamic-memory" class="headerlink" title="dynamic memory"></a>dynamic memory</h2><h3 id="shared-ptr-lt-gt"><a href="#shared-ptr-lt-gt" class="headerlink" title="shared_ptr&lt;&gt;"></a>shared_ptr&lt;&gt;</h3><p>use function make_shared&lt;&gt;()</p>
<h3 id="unique-ptr-lt-gt"><a href="#unique-ptr-lt-gt" class="headerlink" title="unique_ptr&lt;&gt;"></a>unique_ptr&lt;&gt;</h3><p>must be initialized once the pointer is created</p>
<h3 id="weak-ptr-lt-gt"><a href="#weak-ptr-lt-gt" class="headerlink" title="weak_ptr&lt;&gt;"></a>weak_ptr&lt;&gt;</h3><p>can be assigned</p>
<h3 id="allocator"><a href="#allocator" class="headerlink" title="allocator"></a>allocator</h3><pre class=" language-cpp"><code class="language-cpp">allocator<span class="token operator">&lt;</span>string<span class="token operator">></span> alloc<span class="token punctuation">;</span>
<span class="token keyword">auto</span> <span class="token keyword">const</span> p <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
weak_ptr<span class="token operator">&lt;</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> q <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>q<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">delete</span> p<span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//provided p points to an object or be nullptr</span>
<span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//provided p points to an array or be nullptr</span>
</code></pre>
</blockquote>
<h2 id="Copy-Assign-and-Destroy"><a href="#Copy-Assign-and-Destroy" class="headerlink" title="Copy, Assign and Destroy"></a>Copy, Assign and Destroy</h2><h3 id="specific-member-function-to-control-above-three-operations"><a href="#specific-member-function-to-control-above-three-operations" class="headerlink" title="specific member function to control above three operations"></a>specific member function to control above three operations</h3><p>copy constructor</p>
<p>copy-assignment operator</p>
<p>move constructor</p>
<p>move-assignment operator</p>
<p>destructor</p>
<h3 id="copy-constructor"><a href="#copy-constructor" class="headerlink" title="copy constructor"></a>copy constructor</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment" spellcheck="true">/*
        *default defination in class body is inline
        *if we don't hope so, we need to define "= default" out of the class body
        *generally, function defined in class body is inline
        */</span>
        <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//default constructor</span>
        <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//copy constructor</span>
        <span class="token comment" spellcheck="true">//first parameter must be a reference, and almost always be a const reference</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Foo2</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment" spellcheck="true">//explicit prevents implicit conversion</span>
        <span class="token keyword">explicit</span> <span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token keyword">explicit</span> <span class="token function">Foo2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="copy-assignment-constructor"><a href="#copy-assignment-constructor" class="headerlink" title="copy-assignment constructor"></a>copy-assignment constructor</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment" spellcheck="true">/*
        *we define a copy-assignment constructor below
        *keyword operator+symbol is an overloaded operator
        *which defines an operator(like =,+,- and so on)
        */</span>
        Foo <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo<span class="token operator">&amp;</span> f<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>n <span class="token operator">=</span> f<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Foo f1<span class="token punctuation">,</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//f2 is default initialized</span>
    f1 <span class="token operator">=</span> f2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//equals to f1(f2)</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="stop-the-copy"><a href="#stop-the-copy" class="headerlink" title="stop the copy"></a>stop the copy</h4><p>if we don’t want a copy operation, we need to define it as the <strong>delete function</strong></p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NoCopy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">NoCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
        *"= delete" must be present when we firstly declare it.
        *
        *by the way, we can delete any functions(except the destructor),
        *thongh i haven't clearly understood its effect and affect.
        *one interesting and meaningful example is, if a class's member
        *can't be implicitly initialized, copied, assigned or destroied,
        *its implicit initializer's member function is deleted.
        *It prevents from creating indestructible object.
        *
        *principle: destructor can't be delete
        */</span>
        <span class="token function">NoCopy</span><span class="token punctuation">(</span><span class="token keyword">const</span> NoCopy <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//stop the copy</span>
        NoCopy <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> NoCopy <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//stop the copy-assignment</span>
        <span class="token operator">~</span><span class="token function">NoCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
        *we can put the copy constructor into private zone to prevent from copying it.
        *we need to declare it in the private zone first
        *then define it in the public zone.(in order to prevent friend use it)
        *however, this practice is not recommended.
        */</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="destructor"><a href="#destructor" class="headerlink" title="destructor"></a>destructor</h3><p>destructor delete the resource used by objects, and destruct non-static elements</p>
<p>it is used whenever the object is destroyed</p>
<blockquote>
<p>implicitly destruct a pointer won’t delete the object it points.</p>
<p>on the contrary, smart pointer is class type with destructor, thus it can delete the object</p>
</blockquote>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//destructor.this function can't be overloaded</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="principle"><a href="#principle" class="headerlink" title="principle"></a>principle</h4><ul>
<li>define destructor before assuring weather it needs a destructor or not</li>
<li>if a class needs a copy constructor, it always need a copy-assignment constructor. And vice verse</li>
</ul>
<h3 id="copy-control-and-resource-management"><a href="#copy-control-and-resource-management" class="headerlink" title="copy control and resource management"></a>copy control and resource management</h3><p>behave like a value: the copy and the original object is fully independent</p>
<p>behave like a pointer: the copy and the original object point to the same underlying data</p>
<h4 id="classes-which-behave-like-a-value"><a href="#classes-which-behave-like-a-value" class="headerlink" title="classes which behave like a value"></a>classes which behave like a value</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//every HasPtr's copy has its own string member with equal value</span>
        <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
        *most copy assignment constructor combines the function
        *of destructor and copy constructor.
        *
        *for instance, copy assignment constructor
        *destroys the left side object's resource as destructor,
        *and copies data from the right side object
        *to the left one like copy constructor
        *
        *if possible, copy assignment constructor should be exception safe.
        *which means when an exception occurs,
        *it can put the left side object in a meaningful state
        */</span>
        HasPtr <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        std<span class="token operator">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
*in this case, to ensure exception safety,
*we copy the right object's data first
*to ensure exception safety before assignment.
*then we delete the resource of the left object and execute assignment
*/</span>
HasPtr <span class="token operator">&amp;</span>HasPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> newp <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>
    ps <span class="token operator">=</span> newp<span class="token punctuation">;</span>
    i <span class="token operator">=</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="classes-which-behave-like-a-pointer"><a href="#classes-which-behave-like-a-pointer" class="headerlink" title="classes which behave like a pointer"></a>classes which behave like a pointer</h4><p>use reference count to control the underlying data</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token operator">::</span><span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//copy the pointer to ensure they point to the same underlying data</span>
        <span class="token comment" spellcheck="true">//increase the reference count</span>
        <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token function">ps</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">use</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>use<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token operator">++</span><span class="token operator">*</span>use<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        HasPtr <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        std<span class="token operator">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        std<span class="token operator">::</span>size_t <span class="token operator">*</span>use<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//reference count</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

HasPtr<span class="token operator">::</span><span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>use <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> use<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

HasPtr <span class="token operator">&amp;</span>HasPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">++</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>use<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//execute the left object's destructor</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>use <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>
        <span class="token keyword">delete</span> use<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//execute assignment</span>
    ps <span class="token operator">=</span> rhs<span class="token punctuation">.</span>ps<span class="token punctuation">;</span>
    i <span class="token operator">=</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">;</span>
    use <span class="token operator">=</span> rhs<span class="token punctuation">.</span>use<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>we can swap the pointer to decrease extra memory allocation</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr <span class="token operator">&amp;</span><span class="token punctuation">,</span> HasPtr <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
*if a menber of a class has its own swap function,
*use the std::swap is an error
*and if we implicitly use swap function, the compiler use the overloaded one by default
*/</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> std<span class="token operator">::</span>swap<span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ps<span class="token punctuation">,</span>rhs<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>i<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    HasPtr <span class="token function">h1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">h2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> std<span class="token operator">::</span>swap<span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//use the overloaded one</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//tip:this function can't overload the HasPtr &amp;HasPtr::operator=(HasPtr &amp;rhs)</span>
HasPtr <span class="token operator">&amp;</span>HasPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>HasPtr rhs<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//parameter is a copy, not a reference</span>
    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//rhs is destroyed</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="move-constructor"><a href="#move-constructor" class="headerlink" title="move constructor"></a>move constructor</h3><blockquote>
<p>library container, string and shared_ptr class support both move and copy operation</p>
<p>IO class and unique_ptr class can be moved, but can’t be copied</p>
</blockquote>
<blockquote>
<p>rvalue reference must be bound to an rvalue. we get rvalue reference through &amp;&amp; instead of &amp;</p>
<p>rvalue reference must be bound to an object ready to be destroyed</p>
<p>therefore, we can freely move an rvalue reference resource to another object</p>
<p>moreover, we can bound a const lvalue reference to an rvalue, as well</p>
<p>expression returns an rvalue. But rvalue reference variate itself is a lvalue</p>
<p>eg:</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r2 <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r3 <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r4 <span class="token operator">=</span> r3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//illegal</span>
</code></pre>
<p>all of them is legal except the last one</p>
</blockquote>
<p>std::move avails to use a lvalue as an rvalue. What’s more, we must recognize that executing move means we promote not to use the original element unless we assign or destruct it.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r4 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//legal</span>
<span class="token comment" spellcheck="true">//use std::move instead of move in order to prevent from potential naming conflict</span>
</code></pre>
<p>an example of move constructor</p>
<pre class=" language-cpp"><code class="language-cpp">StrVec<span class="token operator">::</span><span class="token function">StrVec</span><span class="token punctuation">(</span>StrVec <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment" spellcheck="true">//move operation shouldn't throw error</span>
<span class="token comment" spellcheck="true">//initializer take over resource of s</span>
    <span class="token operator">:</span> <span class="token function">elements</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">first_feet</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_feet<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>cap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span>elements <span class="token operator">=</span> s<span class="token punctuation">.</span>first_feet <span class="token operator">=</span> s<span class="token punctuation">.</span>cap <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> 
                                    <span class="token comment" spellcheck="true">//brilliant!</span>
                                    <span class="token comment" spellcheck="true">//get the spark of controlling dynamic memory!</span>
    <span class="token comment" spellcheck="true">//now destructing s is safe</span>
    <span class="token comment" spellcheck="true">//i wander weather we permit s to be meaningfully assigned, </span>
    <span class="token comment" spellcheck="true">//and after insperation, i find that void StrVec::push_back(const std::string &amp;)</span>
    <span class="token comment" spellcheck="true">//has considered this situation. Now both assignment and destruction is ligal.</span>
    <span class="token comment" spellcheck="true">//and at the same time we can't read its value</span>
    <span class="token comment" spellcheck="true">//(certainly i put the whole code into my cpp file to avoid making my notes bloated)</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="move-assignment-constructor"><a href="#move-assignment-constructor" class="headerlink" title="move assignment constructor"></a>move assignment constructor</h3><pre class=" language-cpp"><code class="language-cpp">StrVec <span class="token operator">&amp;</span>StrVec<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>StrVec <span class="token operator">&amp;&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//check self-assignment</span>
    <span class="token comment" spellcheck="true">//I guess this operation is designed to avoid freeing itself</span>
    <span class="token comment" spellcheck="true">//otherwise it may move meaningless data and put itself in a meaningless state</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//release itself</span>
        elements <span class="token operator">=</span> rhs<span class="token punctuation">.</span>elements<span class="token punctuation">;</span>
        first_feet <span class="token operator">=</span> rhs<span class="token punctuation">.</span>first_feet<span class="token punctuation">;</span>
        cap <span class="token operator">=</span> rhs<span class="token punctuation">.</span>cap<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//put rhs in a destructible state</span>
        rhs<span class="token punctuation">.</span>elements <span class="token operator">=</span> rhs<span class="token punctuation">.</span>first_feet <span class="token operator">=</span> rhs<span class="token punctuation">.</span>cap <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//copy and move operation's overload</span>
StrVec v1<span class="token punctuation">,</span> v2<span class="token punctuation">;</span>
v1 <span class="token operator">=</span> v2<span class="token punctuation">;</span>					<span class="token comment" spellcheck="true">//copy assignment constructor</span>
StrVec <span class="token function">getVec</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//getVec returns an rvalue</span>
                            <span class="token comment" spellcheck="true">//because getVec() dosen't return value instead of reference</span>
                            <span class="token comment" spellcheck="true">//up to now getVec() is just a declaration</span>

v2 <span class="token operator">=</span> <span class="token function">getVec</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment" spellcheck="true">//move assignment constructor</span>
<span class="token comment" spellcheck="true">/*
*if we didn't define a move constructor
*the compiler will convert an rvalue reference to a const reference
*and call copy constructor
*/</span>
</code></pre>
<h3 id="reference-qualifier"><a href="#reference-qualifier" class="headerlink" title="reference qualifier"></a>reference qualifier</h3><p>C++ permit us to assign value to a rvalue object(so weird)</p>
<p>eg:</p>
<pre class=" language-cpp"><code class="language-cpp">string <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment" spellcheck="true">//s1 = "a", s2 = "bbb";</span>
<span class="token comment" spellcheck="true">/*
*(s1 + s2) is an rvalue which never affects s1 and s2's value without assignment
*usually it is created by compiler and released soon
*the following expression execute:
*	create a string temp_s = s1 + s2 = "abbb";
*	assign "Wow" to temp_s and return "Wow";
*	assign "Wow" to s3;
* 	release temp_s
*Just from my own guess.If there's something wrong, I'll correct it
*/</span>
string s3 <span class="token operator">=</span> <span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Wow"</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre>
<p>we can use the reference qualifier to enforce the left object is an lvalue or an rvalue</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment" spellcheck="true">//the &amp; in the back of parameter list enforce the left object is an lvalue</span>
        Foo <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span> 
    <span class="token comment" spellcheck="true">//</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

Foo <span class="token operator">&amp;</span>Foo<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        Foo <span class="token function">someMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//const should be in front of reference qualifier</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>reference qualifier and overloaded</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        Foo <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">;</span>
        Foo <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> data<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//because object is an rvalue, we can change itself without any affection</span>
Foo Foo<span class="token operator">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
    <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//object is an lvalue, thus we can't affect its value</span>
Foo Foo<span class="token operator">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Foo <span class="token function">temp</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="overloading-and-type-conversion"><a href="#overloading-and-type-conversion" class="headerlink" title="overloading and type conversion"></a>overloading and type conversion</h2><h3 id="basic-concept"><a href="#basic-concept" class="headerlink" title="basic concept"></a>basic concept</h3><ul>
<li><p>an operator function should be a member of a class or have at least than one class type parameter</p>
</li>
<li><p>which means we can’t overload operators acting on the build-in type</p>
</li>
<li><p>overloaded operator’s priority and associative law is the same as the original operator</p>
</li>
</ul>
<p><strong>operators can be overloaded</strong></p>
<table>
<thead>
<tr>
<th>+</th>
<th>-</th>
<th>*</th>
<th>&#x2F;</th>
<th>%</th>
<th>^</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td></td>
<td></td>
<td>~</td>
<td>!</td>
<td>,</td>
<td>&#x3D;</td>
</tr>
<tr>
<td>&lt;</td>
<td>&gt;</td>
<td>&lt;&#x3D;</td>
<td>&gt;&#x3D;</td>
<td>++</td>
<td>–</td>
<td></td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>&gt;&gt;</td>
<td>&#x3D;&#x3D;</td>
<td>!&#x3D;</td>
<td>&amp;&amp;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>-&#x3D;</td>
<td>&#x2F;&#x3D;</td>
<td>%&#x3D;</td>
<td>^&#x3D;</td>
<td>&amp;&#x3D;</td>
<td></td>
</tr>
<tr>
<td></td>
<td>&#x3D;</td>
<td>*&#x3D;</td>
<td>&lt;&lt;&#x3D;</td>
<td>&gt;&gt;&#x3D;</td>
<td>[]</td>
<td>()</td>
</tr>
<tr>
<td>-&gt;</td>
<td>-&gt;*</td>
<td>new</td>
<td>new[]</td>
<td>delete</td>
<td>delete[]</td>
<td></td>
</tr>
</tbody></table>
<p><strong>operators can not be overloaded</strong></p>
<table>
<thead>
<tr>
<th>::</th>
<th>.*</th>
<th>.</th>
<th>? :</th>
</tr>
</thead>
</table>
<h3 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h3><p>there are various of operators overloading practice. and you know, <em>cujus rei demonstrationem mirabilem sane detexi. Hanc marginis exiguitas non caperet</em>.(I’m sure I’ve discovered a wonderful demonstration, but the space here is too small to fill it). so I write them all down in my practice .cpp file and just note some announcements there.</p>
<p>The essence of operator overloading is a function call. therefore we can’t save  the original order of evaluation and the short circuit evaluation. and that’s why we don’t advice you to overload comma, address, logic and, logic or.</p>
<p>when we define an operator as a member function, its left operand must be an object of the operator’s class.</p>
<p>operator(&#x3D;), index([]), call(()), member accession(-&gt;) operator must be member function of class.</p>
<p>ostream(&lt;&lt;), istream(&gt;&gt;) can’t be member function.</p>
<p>index operator usually define two overloading versions, the const one and the nonconst one.</p>
<p>increase and decrease operators usually be set as member functions.</p>
<pre class=" language-cpp"><code class="language-cpp">strBlobPtr <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//preoperator</span>
strBlobPtr <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//postoperator</span>

strBlobPtr strBlobPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    strBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>if we overload the call operator, the object of this class is called function object, because we can call this object. function object is usually used as actual parameter of generic algorithm. moreover, <a href="https://blog.csdn.net/YangZejia0120/article/details/118713608?spm=1001.2014.3001.5501"><strong>lambda</strong></a> is an unnamed class’ unnamed object, whose call operator is overloaded by lambda’s function body.</p>
<p>liberty <strong>functional</strong> defines a succession of function class as templates. and they are listed below.</p>
<table>
<thead>
<tr>
<th>arithmetic</th>
<th>relation</th>
<th>logic</th>
</tr>
</thead>
<tbody><tr>
<td>plus<Type></Type></td>
<td>equal_to<Type></Type></td>
<td>logical_and<Type></Type></td>
</tr>
<tr>
<td>minus<Type></Type></td>
<td>not_equal_to<Type></Type></td>
<td>logical_or<Type></Type></td>
</tr>
<tr>
<td>multiplies<Type></Type></td>
<td>greater<Type></Type></td>
<td>logical_not<Type></Type></td>
</tr>
<tr>
<td>divides<Type></Type></td>
<td>greater_equal<Type></Type></td>
<td></td>
</tr>
<tr>
<td>modulus<Type></Type></td>
<td>less<Type></Type></td>
<td></td>
</tr>
<tr>
<td>negate<Type></Type></td>
<td>less_equal<Type></Type></td>
<td></td>
</tr>
</tbody></table>
<p>operator <em>type</em>() const is class-type conversions or be named user-define conversions. it allows a type to be an object’s return type. this conversion is implicit.</p>
<p>we can define explicit conversion operator to control class-type conversion.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SmallInt</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">SmallInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

SmallInt si <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//explicitly request for type conversion</span>
</code></pre>
<p>however, if the conversion is used as a condition, the compiler will automatically execute the conversion.</p>
<h3 id="function-table"><a href="#function-table" class="headerlink" title="function table"></a>function table</h3><p>function, function pointer, function class, lambda expression, classes built by bind and any other classes which has overloaded the call operator are all callable object. function class defined in liberty <strong>functional</strong> can be used to reserve callable object.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> f1 <span class="token operator">=</span> add<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//f1(4,2) == 6; //equal to add(4,2);</span>
<span class="token comment" spellcheck="true">//f1 == true;	//f1 has a callable object;</span>
function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> f2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<p>we can define a function table to reserve callable objects with same <em>retType(args)</em>.</p>
<pre class=" language-cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span> binops <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"+"</span><span class="token punctuation">,</span> add<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>	<span class="token comment" spellcheck="true">//each element is a pair</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"-"</span><span class="token punctuation">,</span> minus<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"%"</span><span class="token punctuation">,</span> mod<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//in this case, binos["+"](4,2) == 6;</span>
</code></pre>
<h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h2><h3 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token function">Quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span>book<span class="token punctuation">,</span> <span class="token keyword">double</span> sales_price<span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token function">bookNo</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">price</span><span class="token punctuation">(</span>sales_price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        std<span class="token operator">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//key word virtual defines a virtual function</span>
        <span class="token comment" spellcheck="true">//which means the base class permits drived classes to override it</span>
        <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token operator">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> n <span class="token operator">*</span> price<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//moreover, if we don't wish our clients use the base class' member function</span>
        <span class="token comment" spellcheck="true">//we need to define this member function to be a pure virtual function as the following code row</span>
        <span class="token comment" spellcheck="true">//notice :the pure virtual function can only be defined in the declaration body</span>
        <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token operator">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//dynamically bind destructor</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        std<span class="token operator">::</span>string bookNo<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
        *key word protected serves for those members
        *which are not supposed to be used by object's users
        *but needed to be used by derived class
        */</span>
    <span class="token keyword">protected</span><span class="token operator">:</span>
        <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//common price without discount</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/*
*type of class derivation list:colon and a list of base class
*whose type is base class behind optional assess specifire
*and splited by comma
*/</span>
<span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span><span class="token operator">:</span> <span class="token keyword">public</span> Quote <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">Buli_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
        <span class="token function">Built_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> std<span class="token operator">::</span>size_t<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/*
        *key word override explicitly declare that this member function
        *will be used to redefine the base class' virtual function
        *if not, the compiler will throw error
        */</span>
        <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token operator">::</span>size_t<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        <span class="token comment" spellcheck="true">//the minimum purchase quantity of discount</span>
        std<span class="token operator">::</span>size_t min_qty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> discount <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<p>because derived class has its base class member, compiler can implicitly convert it into its base class as a reference or pointer. On the contrary, compiler doesn’t allow us to implicitly convert base class object into derived class object. However, if we ensure this action’s safety, we can use <strong>static_cast</strong> enforce the conversion. But this action is not recommended. What’s more, if the base class has at least one virtual function, we can use <strong>dynamic_cast</strong> to check this conversion’s safety and let the compiler divides whether allow or not.</p>
<p>if a base class defines a static member, the whole inheritance system has only one instance no matter how many derived classes and objects have been defined.</p>
<p>base class must be defined before defining derived classes.</p>
<p>key word <strong>final</strong> restrict us from using a class as base class. key word <strong>final</strong> can be used to declare that a virtual function is the final function, which means this function can’t be overrode.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NoDerived</span> final <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//illegal, we can't use Noderived as a base class</span>
<span class="token keyword">class</span> <span class="token class-name">Bad</span><span class="token operator">:</span> <span class="token keyword">public</span> NoDerived <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>virtual function can have acquiescent parameters, and its acquiescent parameters depend on the static type of the call.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">funcion</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span> <span class="token keyword">public</span> Base<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> override<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">execuse_function</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Derived d<span class="token punctuation">;</span>
    <span class="token function">execuse_function</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//execuse Base::function(int a = 0, int b = 1);</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p><strong>notions:</strong></p>
<ul>
<li>iff the derived class publicly inherits base class can users use the conversions between derived class and base class.</li>
<li>if the derived class publicly or protected inherits base class, the derived class can use the conversions.</li>
<li>if the derived class privately inherits base class, the derived class’ objects and friends can’t use the conversions.</li>
<li>friend relationship can’t be inherited.</li>
<li><strong>each class controls its members’ accessible permissions.</strong></li>
<li>if we need to change a member’s accessible permission, we can use the <em>using</em> declaration in the corresponding action scope</li>
</ul>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        std<span class="token operator">::</span>size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span><span class="token operator">:</span>
        std<span class="token operator">::</span>size_t n<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//we inherit the base class in the private scope</span>
<span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span> <span class="token keyword">private</span> Base<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment" spellcheck="true">//then Base::size() is public </span>
        <span class="token keyword">using</span> Base<span class="token operator">::</span>size<span class="token punctuation">;</span>
    <span class="token keyword">protected</span><span class="token operator">:</span>
        <span class="token keyword">using</span> Base<span class="token operator">::</span>n<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>acquiescent derived scope operators depend on class’ type. struct acquiescently owns public scope while class having private scope.</p>
<p>derived class’ scope is combined into base class’ scope. thus derived class’ member with the same name as base class’ has higher priority.</p>
<p>name lookup precedes type lookup. function declared in the inner scope won’t override but cover the outer scope’s function.(which remind us to use the <em>override</em> key word. otherwise we must ensure that the derived class’s function has the same parameters list as the base class’)</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Base<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">memfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> Derived<span class="token operator">:</span> Base<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Base's scope operator is public</span>
    <span class="token keyword">int</span> <span class="token function">memfunc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

Derived d<span class="token punctuation">;</span>
Base b<span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">memfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span><span class="token function">memfunc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span><span class="token function">memfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment" spellcheck="true">//error:Base::memfunc() is hided. the right way is written below</span>
d<span class="token punctuation">.</span>Base<span class="token operator">::</span><span class="token function">memfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="dynamic-binding"><a href="#dynamic-binding" class="headerlink" title="dynamic binding"></a>dynamic binding</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">print_total</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span>
                   <span class="token keyword">const</span> Quote <span class="token operator">&amp;</span>item<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//calling Quote::net_price or Bulk_quote::net_price</span>
    <span class="token comment" spellcheck="true">//depends on item's object type</span>
    <span class="token comment" spellcheck="true">//moreover, accessible members which we can use depend on the static type</span>
    <span class="token comment" spellcheck="true">//for instance, this item below has no right to use Bulk_quote's unique public members</span>
    <span class="token keyword">double</span> ret <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">net_price</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    os <span class="token operator">&lt;&lt;</span> <span class="token string">"ISBN: "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token operator">&lt;&lt;</span> <span class="token string">"# sold: "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"total due: "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//if we don'y want to use dynamic binding, we need to explicitly declare the scope</span>
<span class="token keyword">double</span> ret <span class="token operator">=</span> item<span class="token operator">-</span><span class="token operator">></span>Quote<span class="token operator">::</span><span class="token function">net_price</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>now, we need to consider this situation where we delete a derived object pointed by a base class pointer. we must ensure that the delete command executes the derived object’s destructor. So we declare the base class’ destructor as a virtual function to solve this problem. what’s more, virtual destructor will impede generating movement operation.</p>
<p>What’s more, if we use containers to save objects, it is supposed to indirectly save it. An common usage is using pointer. Then we are able to use base class pointer calling derived objects.</p>
<h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token comment" spellcheck="true">//key word:template</span>
                        <span class="token comment" spellcheck="true">//&lt;template T> is template parameter list</span>
                      <span class="token comment" spellcheck="true">//template parameters are divided by comma</span>
<span class="token comment" spellcheck="true">/*
*moerover, key word typename is the same with key word class in this situation
*/</span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> v1<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> v2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1 <span class="token operator">></span> v2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v2 <span class="token operator">&lt;</span> v1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//type parameter can be used as return type or parameter type</span>
<span class="token comment" spellcheck="true">//it can be used as variables declaration and type translation, as well</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>
T <span class="token function">foo</span><span class="token punctuation">(</span>T<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    T tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//omitted details</span>
    <span class="token keyword">return</span> T<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
*we can define nontype parameter and the parameter's value is provided by
*clients or compiler
*in this case, compiler provide nontype parameters int values depends on
*const char array's length
*nontype parameter can be int, object/function pointer or lvalue reference
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> N<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> M<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/*
*template can be declared as inline or constexpr
*this declaration should be put between template parameter list and return type
*/</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">inline</span> T <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>principle</strong>: template function’s parameters are supposed to be const reference, which guarantees non-copyable object’s availability.</p>
<p>if we want to define a class member function out of the class body, it’s type should be:</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token operator">></span>
<span class="token keyword">return</span><span class="token operator">-</span>type <span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">::</span>member<span class="token operator">-</span><span class="token function">name</span><span class="token punctuation">(</span>parameter<span class="token operator">-</span>list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>function<span class="token operator">-</span>bod<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>By default, template class’ member function is instantiated when it is called, which help us to use a template class even though there are some member function incompatible with a type, we can use part of class functions.</p>
<h3 id="friend-declaration"><a href="#friend-declaration" class="headerlink" title="friend declaration"></a>friend declaration</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//friend declaration</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Pal</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Pal</span><span class="token operator">&lt;</span>C<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Pal instantiated by class C is a friend</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Pal2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//each instantiated Pal2 is C's friend</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">C2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Pal</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> X<span class="token operator">></span> <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Pal2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//each instantiated Pal2 is each instantiated C2's friend</span>
                                       <span class="token comment" spellcheck="true">//notice: friend's typename should be different from template class'</span>
    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Pal3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Pal3 is a non-template class, every instantiated C2 is Pal3's friend</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//let template's typename as friend</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">C3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> T<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//type T is friend of C3 instantiated by T</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
<p>if a template class contains static members, each type instantiated class has its own static members.</p>
<p>if we access a type name from a template class, we need to use the key word <strong>typename</strong> to explicitly ask compiler treats the name as a type name.</p>
<p>we can define default template argument, like code below.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span> F <span class="token operator">=</span> less<span class="token operator">&lt;</span>T<span class="token operator">>></span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> v1<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> v2<span class="token punctuation">,</span> F f<span class="token operator">=</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//even if all the parameters of a template's typename parameter list is default argued</span>
<span class="token comment" spellcheck="true">//we have to use angle brackets to ask compiler instantiate a class from a template</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T <span class="token operator">=</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">tmp_array</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
tmp_array<span class="token operator">&lt;</span><span class="token operator">></span> a<span class="token punctuation">;</span>
</code></pre>
<p>Besides, it is known that once we define a template class’ type, compiler instantiates a class instance. But this activity faces an embarrassing situation. Once we create a project and use template class with the same type in different file, the compiler will instantiates several instances in each file. Which may be a mass overhead. We can use the key word <strong>extern</strong> to declare a class to prevent from such overhead.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">Blob</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">;</span>				<span class="token comment" spellcheck="true">//declaration</span>
<span class="token keyword">template</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment" spellcheck="true">//definition</span>
                                                <span class="token comment" spellcheck="true">//in this case, compiler will instantiates the whole members</span>
                                                <span class="token comment" spellcheck="true">//thus the type must apply to every member</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Blob<span class="token operator">&lt;</span>string<span class="token operator">></span> sa1<span class="token punctuation">,</span> sa2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//compiler instantiates class in other file</span>
                        <span class="token comment" spellcheck="true">//Thus key word extern expresses that there is a definition in our project</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>and if we can’t make sure what the return type definitely is, we can use the tail-set return to declare function’s return type</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//using tail-set return to explicitly declare function's return type</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> It<span class="token operator">></span>
<span class="token keyword">auto</span> <span class="token function">fcn</span><span class="token punctuation">(</span>It beg<span class="token punctuation">,</span> It end<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">*</span>beg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//details</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>beg<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="reference-collapsing"><a href="#reference-collapsing" class="headerlink" title="reference collapsing:"></a>reference collapsing:</h3><blockquote>
<p>X&amp; &amp;, X&amp; &amp;&amp;, X&amp;&amp; &amp; will collapse to X&amp;</p>
<p>X&amp;&amp; &amp;&amp; will be collapse to X&amp;&amp;</p>
</blockquote>
<p>By define a parameter as an rvalue reference, we can save all of argument’s type-info. By using reference, we can save the const-info. By define parameters as rvalue references, we can use reference collapsing to save arguments’ reference characteristic.</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> F<span class="token punctuation">,</span><span class="token keyword">typename</span> T1<span class="token punctuation">,</span> <span class="token keyword">typename</span> T2<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">flip</span><span class="token punctuation">(</span>F f<span class="token punctuation">,</span> T1 <span class="token operator">&amp;&amp;</span>t1<span class="token punctuation">,</span> T2 <span class="token operator">&amp;&amp;</span>t2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>However, function expression returns an lvalue, which restrict us from binding an rvalue reference to an rvalue reference. In this case, we need to use the lib function <strong>std::forward</strong>, which is defined in lib <em>utility</em>, to save the reference type(by using the reference collapsing). Thus, we modifies the original code to the below one</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> F<span class="token punctuation">,</span><span class="token keyword">typename</span> T1<span class="token punctuation">,</span> <span class="token keyword">typename</span> T2<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">flip</span><span class="token punctuation">(</span>F f<span class="token punctuation">,</span> T1 <span class="token operator">&amp;&amp;</span>t1<span class="token punctuation">,</span> T2 <span class="token operator">&amp;&amp;</span>t2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>T1<span class="token operator">></span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>forward<span class="token operator">&lt;</span>T2<span class="token operator">></span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>When we overload a template function, compiler will chose the more specialized one. Thus if we define a template function</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> string <span class="token function">func</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span> string <span class="token function">func</span><span class="token punctuation">(</span>T <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*details*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>and we hope the compiler may cope with <em>char</em> &amp; <em>const char</em> as <em>string</em>, we need to define two specialized overloaded function</p>
<pre class=" language-cpp"><code class="language-cpp">string <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//declare a string type instance to avoid from default call </span>
string <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
string <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="parameter-packet"><a href="#parameter-packet" class="headerlink" title="parameter packet"></a>parameter packet</h3><p>we use symbol <strong>…</strong> after keyword <em>typename</em> or <em>class</em> to express indefinite number of parameters</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Args is a template parameter packet, rest is a function parameter packet</span>
<span class="token comment" spellcheck="true">//Args means zero or several template parameters</span>
<span class="token comment" spellcheck="true">//rest means zero or several function parameters</span>
<span class="token comment" spellcheck="true">//types in packet can be different from each other</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token keyword">const</span> Args<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>we can use <strong>sizeof</strong> to calculate the number of parameters in the packet</p>
<p><strong>call packet parameters</strong>:</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//end the recursion and print the last element</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>
ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//recursion call</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>
ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token keyword">const</span> Args<span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    os <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">print</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> rest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>
    string s <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> i<span class="token punctuation">,</span> d<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//output:1       2       321     hello world!</span>
</code></pre>
<h3 id="specialize"><a href="#specialize" class="headerlink" title="specialize"></a>specialize</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//specialize</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span>size_t N<span class="token punctuation">,</span> size_t M<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//const char(&amp;)[M] is a reference to an char array</span>

<span class="token comment" spellcheck="true">//a specialized instance of function compare</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a reference to an const (or not) pointer</span>
</code></pre>
<p><strong>notice</strong>: Once we need a specialized instance but forget to declare or define one, where there is a template suits to this instance’s type, the compiler will instantiate an instance. This mistake won’t be checked up. Thus we are supposed to define templates with the same name in the same header file. And put the specialized instances after those template. Certainly we need to check up whether we have declared an instance or not.</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C++的 0/3/5 规则</title>
    <url>/2022/08/30/c-0-3-5-rule/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>编程三大错觉：<br>我比编译器聪明<br>我超越了标准库<br>我能管好内存</p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>由于最近在看《算导》，我就萌生了实现算导的想法。之前实现的线表List.h文件一直稳定运作，但在经历了单元测试并稳定运行数天后，当我将它应用到我的新代码部分时，出现了一个bug。<br>我的代码文件如下：<br>List.h</p>
<pre class=" language-C++"><code class="language-C++">template<typename T>
class List &#123;
public:
    List() : head(new class Node<T>), tail(new class Node<T>) &#123;
        head->nextNode = tail;
        tail->prevNode = head;
    &#125;

    List(T rs) : List() &#123;
        insert(rs);
    &#125;

    ~List() &#123;
        for (class Node<T> *pointer = tail; pointer != head;) &#123;
            auto temp = pointer;
            pointer = pointer->prevNode;
            delete temp;
        &#125;
        delete head;
    &#125;
    
    void insert(T rs)&#123;
        auto pointer = new class Node<T>(rs, tail->prevNode, tail);
        tail->prevNode = pointer;
        pointer->prevNode->nextNode = pointer;
    &#125;
&#125;
</code></pre>
<p>test.cpp</p>
<pre class=" language-C++"><code class="language-C++">template<class Vertex, class Edge>
class AdjacentList&#123;
private:
    std::map<shared_ptr<Vertex>,List<Edge>>;
&#125;

template<class Vertex, class Edge>
void AdjacentList<Vertex, Edge>::insert(std::shared_ptr<Vertex> origin, std::shared_ptr<Vertex> next, double w) &#123;
    if (!graph[origin])
        graph[origin] = List<Edge>();
    auto x = Edge(next, w);
    graph[origin].insert(x);
&#125;
</code></pre>
<p>接下来给你三分钟，试试能不能找出bug在哪？</p>
<p>如果你找不出bug在哪里，请接着往下看：<br>C++为我们提供了强大的智能指针，用来管理资源的生命周期。大部分情况下我们只要用好智能指针来管理资源就好。不过在某些情况下，我们可能会遇到空间不足，或是需要自定制的资源管理类。然而，编写资源管理类很困难，你很难检测和排除内存泄漏或空悬指针的现象。<br>回到我们上面的这个函数，bug实际上出现在</p>
<pre class=" language-C++"><code class="language-C++">if (!graph[origin])
        graph[origin] = List<Edge>();
</code></pre>
<p>这里。在这里，我们不是初始化，而是使用复制赋值运算符</p>
<pre class=" language-C++"><code class="language-C++">ClassType &operate=(ClassType &rs);
</code></pre>
<p>为map的second值赋值。由于我们的List类并没有自定义复制赋值运算符，C++的默认复制赋值运算符的操作是将原来类的每一个成员变量赋值给新的类。所以这里，<code>graph[origin]</code>得到了一个<code>List&lt;Edge&gt;()</code>类的head和tail指针（注意，这样非常危险！要么两个List在同一块链表上进行插入删除操作，要么造成内存泄漏的后果）<br>我们在List的insert函数处打一个断点，看看会发生什么：<br><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1661856814/gxKom_ztdkff.png" alt="debug1"><br>可以看到，<code>graph[origin]</code>的head和tail的前后指针良好。但我们再执行一步看看：<br><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1661856811/J6n22_szifw4.png" alt="debug2"><br>你会发现：变量pointer竟指向一个“已分配”的指针<code>graph[origin].head</code>！这是为什么呢？<br>其实到这里问题已经比较清晰了：为<code>graph[origin]</code>赋值的<code>List&lt;Edge&gt;()</code>是一个右值，在完成赋值语句之后就被析构了。我们自定义的析构函数从tail开始逐个向前，将所有指针指向的资源释放掉。那为什么在dubugger这里还能看到head、tail和它们指向的值呢？这是因为编译器在将资源返回给动态内存池的时候不会执行置零操作，而是简单地将该地址入栈等待下一次调用。所以指向该地址的类仍然可以解释————虽然它早已被析构了。<br>那这种问题怎样解决呢？一种方式是正常调用它的构造函数以便之后调用成员函数：</p>
<pre class=" language-C++"><code class="language-C++">    if (!graph[origin])
        //construct graph[origin]
        graph[origin];
</code></pre>
<p>但另一个更重要的操作是，更改List的类函数</p>
<h2 id="0-x2F-3-x2F-5规则"><a href="#0-x2F-3-x2F-5规则" class="headerlink" title="0&#x2F;3&#x2F;5规则"></a>0&#x2F;3&#x2F;5规则</h2><h3 id="零规则"><a href="#零规则" class="headerlink" title="零规则"></a>零规则</h3><p>规则的零部分规定，在创建类时，你可以不编写任何特殊成员函数（而由编译器默认生成）。</p>
<h3 id="三规则"><a href="#三规则" class="headerlink" title="三规则"></a>三规则</h3><blockquote>
<p>如果你的类需要任何</p>
<ul>
<li>一个复制构造函数，</li>
<li>赋值运算符，</li>
<li>析构函数，</li>
</ul>
<p>明确定义，那么很可能需要这三个。</p>
</blockquote>
<p>因为它们三个通常都用于管理资源，如果你的类用来管理资源，则通常需要管理复制和释放。<br>如果复制类管理的资源没有良好的语义，则考虑通过将复制构造函数和赋值运算符声明为<code>=delete;</code>（鼓励）或放入 private scope 并不进行定义。</p>
<h3 id="五规则"><a href="#五规则" class="headerlink" title="五规则"></a>五规则</h3><p>在三规则的基础上，C++11标准引入了右值。所以还需要考虑移动构造函数和移动赋值函数，即</p>
<pre class=" language-C++"><code class="language-C++">class ClassExample&#123;
public:
    ~ClassExample() = &#123;/*details or default*/&#125;
    
    ClassExample(ClassExample &) = &#123;/*details or default*/&#125;
    
    ClassExample(ClassExample &&) = &#123;/*details or default*/&#125;
    
    ClassExample &operator=(ClassExample &) = &#123;/*details or default*/&#125;
    
    ClassExample &operator=(ClassExample &&) = &#123;/*details or default*/&#125;
&#125;
</code></pre>
<h2 id="代码改进"><a href="#代码改进" class="headerlink" title="代码改进"></a>代码改进</h2><p>我们增加移动赋值操作的定义，可以练习一下其他几个函数的定义。<br>由于List类的<code>head</code>和<code>tail</code>为哨兵元素，我们无需考虑，也无需复制。而是将List类中的元素复制过来。</p>
<pre class=" language-C++"><code class="language-C++">template<typename T>
class List &#123;
public:
    List<T> &operator=(List<T> &&rs)&#123;
        //free this class's element but reserve guard elements
        for(auto pointer = tail->prevNode; pointer != head;)&#123;
            auto temp = pointer;
            pointer = pointer->prevNode;
            delete temp;
        &#125;
        //duplicate rs' elements
        for(auto pointer = rs.head->nextNode; pointer != rs.tail; pointer = pointer->nextNode)&#123;
            insert(*pointer);
        &#125;
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>coding过程中踩过的坑</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>linux如何通过SMTP服务器发送QQ邮件</title>
    <url>/2022/06/28/linux-ru-he-tong-guo-smtp-fu-wu-qi-fa-song-qq-you-jian/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是《计算机网络——自顶向下方法》里的一个小实验，对理解smtp的交流和电子邮件的报头都很有帮助。是个很值得尝试的实验。</p>
<p>首先，我们需要下载 telnet</p>
<pre class=" language-shell"><code class="language-shell">sudo apt install telnetd -y
</code></pre>
<p>其次，按照这个文档所示的方式开启QQ邮箱的SMTP服务<br><a href="https://www.ujcms.com/documentation/351.html"># 使用QQ邮箱发送邮件，QQ邮箱的smtp设置</a><br>并记住自己的身份认证密码。</p>
<p>接下来，打开linus系统的<strong>xshell</strong>（快捷键 ctrl+alt+T），输入以下命令：</p>
<pre class=" language-shell"><code class="language-shell">telnet smtp.qq.com 25
</code></pre>
<p>会看到如下返回：<br><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1657184045/Pasted_image_20220627002748_uocva7.png" alt="terminal"></p>
<p>依次输入以下命令：</p>
<pre class=" language-shell"><code class="language-shell">auth login  //输入命令验证身份
334 VXNlcm5hbWU6  //服务器返回Username:的base64编码符
******** //输入自己邮箱号，例123456789@qq.com的base64编码值
334 UGFzc3dvcmQ6  //服务器返回Password:的base64编码符
******** //输入自己身份认证密码的base64编码值
235 Authentication successful  //连接成功
</code></pre>
<p>base64编码可以上网随便找转换工具，保险起见邮箱号和身份认证密码分别用两个不同的网站编码。或自己写一个也行。</p>
<p>连接成功后就可以按照书上的步骤：</p>
<pre class=" language-shell"><code class="language-shell">Helo ****  //主机名，可填邮箱号
250-newxmesmtplogicsvrsza9.qq.com-9.21.152.27-66638923
250-SIZE 73400320
250 OK
mail from: <123456789@qq.com> //填你的邮箱号
250 OK
rcpt to: <123456789@gmail.com>  //填你想发送的邮箱号
250 OK
data
354 End data with <CR><LF>.<CR><LF>.
//报头必不可少，否则可能被当成垃圾邮件退回
From: 123456789@qq.com
To: 123456789@gmail.com
Subject: It may be a huge joke!

Just a test
Could you reach this message?
.
250 OK: queued as.
</code></pre>
<p>随后，就能成功收到这份邮件了！<br><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1657184045/Pasted_image_20220627004011_n06trm.png" alt="接收邮件"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>Computer Networking</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>黎明静悄悄</title>
    <url>/2021/09/07/li-ming-jing-qiao-qiao/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="黎明静悄悄"><a href="#黎明静悄悄" class="headerlink" title="黎明静悄悄"></a>黎明静悄悄</h1><h2 id="子夜"><a href="#子夜" class="headerlink" title="子夜"></a>子夜</h2><blockquote>
<p>She was still too young to know that life never gives anything for nothing, and that a price is always exacted for what fate bestows.</p>
<p align="right"><i>Marie Antoinette: Bildnis eines mittleren</i></p>
</blockquote>
<p>在我年纪尚小时，平日总喜欢抱着一本书看，大概是为了消遣，也有些文青情怀还未退却。可惜我对文学的热爱并不如何浓郁——它远不能使我埋头案牍皓首穷经，顶多是让我读两本入门门槛不那么高，与他人闲聊时能引那么一两句的图书罢了。而且很明显我的筛选能力也并不强——每当有女孩子看见我在读书，凑过来问一句：“你在读什么书啊？”，不出意外她们总会被书名吓走。即使出了意外，她们也大概率被我接下来尝试概括书本内容的话吓走——这证明我对门槛的判断还是有点高了。</p>
<p>本节开头引的这句话出自斯蒂芬·茨威格的《断头皇后》。很显然，作为一个文青，我应该是在某一期的《意林》或《读者》上看到了这句话然后记了下来；至于这本书，那是万万不可能读的。当然，有些书读完以后，你确实能感觉到整本书唯一有价值的地方就是书封上写的那句“名言”——当然不是这本书，这本书我确实没读过。引这句话的缘由呢，是我一个朋友托我写文记录一件事情，他的事情让我想起了这句话。当然，后面会引的一些语句和写法，提前声明一下，都出于我之手。我的这个朋友是个纯理工直男，半点文学细菌都没有，后面的理工科术语都出自他之口。</p>
<p>故事的开头是惯例的假语村言、真事隐什么的，我们权称我的这个朋友叫yzj吧。早在十余天前，yzj正温温吞吞地赶着自己某门课程的大作业。彼时距ddl尚早，又兼大作业的要求很隐晦，不上手根本掂不出斤两。粗瞟了两眼要求文件的yzj仗着自己学过一点相关课程，会两句C++语法，不免有些飘飘然。尽管老师提醒在先，yzj总觉得自己不算所谓的“很多同学”。后来的事实证明了他的观点，yzj确实不算很多同学，而是正态分布曲线最左边的那一撮。</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908023538649_axllra.png"></p>
<p>总而言之，yzj在ddl十余天前才新建了名为finalproject的文件夹，开始了造轮子之旅。起初为了写得顺手，他按照matlab的操作方式写了个矩阵类，这个类重载了很多方法，也写了一些基本的计算，加了很多语法糖。据yzj表示，这是他后面写其他代码时唯一的慰籍，用起来太顺手了。而且这个类一个很大的好处就是漂亮，很好地遵循了设计模式，也针对性能做了很多优化。不过据他反思，在项目完成前就搞优化是大忌，属于新手小白最容易犯的错误之一。这个很漂亮的轮子花了他很多时间，等到他真的开始接触核心计算代码时，时间已经不允许他设计漂亮的类了。</p>
<h2 id="鸡鸣"><a href="#鸡鸣" class="headerlink" title="鸡鸣"></a>鸡鸣</h2><blockquote>
<p>Is life always this hard, or is it just when you’re working on your ddl?</p>
<p>Always like this.</p>
<p align="right"><i>re-creation from Léon</i></p>
</blockquote>
<p>其实设计不了漂亮的类不算一个大问题。虽然就yzj所言，他设计了一个封装地油盐不进丝毫不漏的类用来储存数据，后来才发现很多函数、方法都要用到这里面的数据，不得不设计一个个奇怪的接口以供操作；最后甚至恨不得把private scope改成public scope一劳永逸。然而就笔者来看，这对治疗我这个朋友吹毛求疵的审美洁癖简直是大功一件。而且我这个朋友写出来的拙劣代码，这辈子都不可能有第二个人去看了（哦，除了这门课的可怜助教，may destiny bless him），也免得拖累别人，小问题小问题。</p>
<p>在我看来，更大的问题在于,你要先解决一个问题，然后才再考虑如何漂亮地解决问题。我这个朋友时常拎不清这两者之间的关系。这在平日里他自学一些东西的时候问题倒也不大，有充足的时间拿来处理细节。而且他自学的时候总是拿经典教材一张张地翻过去，这些教材总是事无巨细地列出所有细节，这往往可以解答yzj的困惑。然而实操项目时，问题就变得不可控了起来。遇到的问题往往很偏，也没有足够详细的解决方案；网上的教程多半杂拼乱凑不求甚解，yzj甚至遇到几个Google都没办法解答的bug。这种时候一般人会换个方法或思路，但我这个朋友，他还有强迫症——什么人呐这是——他会继续死磕，直到撞南墙为止。举个例子，yzj一开始想自己写绘图包，尝试了两天发现自己水平不够，于是换了一个开源的绘图包。这个包倒是能跑，可惜太丑，yzj不满意，跑去写python绘图逻辑。写完后他一拍大脑想搞嵌入代码，遂迷之自信地跑去跑去看Cython tutorial，网上的教程很少，也解决不了yzj的问题，他又跑去看Cython Document。被环境变量绕晕后又跑去看CMake Document（他强烈要求我不告诉你们，他一开始还看了几天Makefile Document）。一番下来，几天光阴虚度，项目一点没做。纵观yzj的整个项目流程，基本上都耗在这种细枝末节但往往耗费巨细的地方上了。对了，yzj表示Cython确实很有意思，想填到自己的技术栈里。既然大作业ddl已经结束了，接下来他大概会继续看Cython Document并写些博客笔记什么的吧。</p>
<p>总之我这个朋友身上还有些学生思维没转变过来，这我得好好劝劝他。</p>
<p>站在一个旁人的角度，上面的话语可能有些平淡，好像在讲述一个平平无奇的故事。然而站在当事人的角度，时间的流逝却是无比真切的。每天显示屏左下角的日期都会跳一个数字，这昭示着自己可以拿来赶ddl的时间又少了一天。屏幕左上角的todo-list也总有一两个任务变成红色——这意味着他没有在自己设定的期限前完成这个模块。我的这个朋友，不知道出于压力还是什么原因，停掉了晚上的跑步，和其他人的聊天也会尽快结束掉，每天晚上睡觉越来越迟，第二天中午才能醒来；日常活动也变成了每天两次的取外卖。可惜他发质好，就这样的生活过了几天都不掉头发，殊为可气。</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908163738_xhqv9u.jpg"></p>
<h2 id="平旦"><a href="#平旦" class="headerlink" title="平旦"></a>平旦</h2><blockquote>
<p>A half-million years in the future that twinkling of curiosity would have led his mind out into the universe to explore the mathematical mysteries of relativity. Now …</p>
<p align="right"><i>Dragon's Egg</i></p>
</blockquote>
<p>赶ddl的过程的确痛苦，然而当你发现其他人和你一样痛苦的时候，这种痛苦就会无形之中减轻一点。</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908165420_zwxqgw.png"></p>
<p>当然，上述表情包纯属开玩笑。在yzj赶ddl中，发现这次大作业确实有点超纲，不少同学都表示难以下手。写累了和同在肝作业的同学&amp;朋友吐槽便成了yzj枯燥生活的少有的乐趣。果然世界上没有真正的感同身受，只有真的经此一劫，yzj才明白苏联笑话为什么会成为世界非遗。</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908170757983_gr2gzm.png"></p>
<p>当然，也有大佬比较超脱，靠自己出色的英文文献阅读能力与代码能力一骑绝尘于yzj这等凡夫俗子。他的进度远快于其他人，也在ddl过程中给予了yzj足够的帮助。在此谨代表yzj向他致以深深的respect。</p>
<p>在各种各种调侃和帮助下，yzj还是慢慢地把自己的大作业做了出来。从一开始的望之不似人形的拟合图形到渐渐能看出大概轮廓，再到多少有那么一点感觉。（可以看出最后一张图还是有异常点，可能是出于计算机精度和异常矩阵的原因，或是还有yzj没有考虑到的bug；不过实在太累就没心情调了）</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908200114_dsy4ru.png"></p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114184/QQ%E5%9B%BE%E7%89%8720210908200123_adlhe8.png"></p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114185/QQ%E5%9B%BE%E7%89%8720210908200126_z2hzqn.jpg"></p>
<p>做出效果后，后面的题就好做了很多。前面的成果和轮子也能继续跑下去。yzj用最后仅剩的两三天时间紧赶慢赶地做完了后面的要求。</p>
<h2 id="破晓"><a href="#破晓" class="headerlink" title="破晓"></a>破晓</h2><blockquote>
<p>There is only one heroism in the world: to see the world as it is and to love it.</p>
<p align="right"><i>Romain Rolland</i></p>
</blockquote>
<p>时间来到了9月8日凌晨有余。离交作业的ddl还有约九个小时。这时候，yzj已经实现了大作业的基本要求，然而还有另外一些要求等待实现。“反正都熬了这么多天了，再熬一天把功能做完吧。”yzj心想，随机创建了一个新的header file，打开了文献和Google。</p>
<blockquote>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908204043478_bdmuin.png"></p>
</blockquote>
<p>9月8日凌晨两点，yzj看完论文内的相关算法后又上Google搜了一下成熟的前置算法，发现自己即使刷穿了夜，也可能完不成剩下的内容了。在自己的document里放一个完成了一半，甚至没有可视化和可以供 clients 调用的 interface，纯靠不成体系的代码央求助教给点分实在不大体面。况且主要功能都做出来了，大部分的分都能拿到，索性直接交了，也免得掉头发。于是，yzj把代码又调试了最后一遍，检查了一下自己的document，将它们打包好，邮件发给了助教。粗算了一下，最终文件一共1300行左右的代码量，4.5kb的测试用例（考虑到代码写得实在太烂的因素，有效代码可能要打对折或三分之一）。这的确只是一个小的不能再小的项目代码量了，但对于没多少项目经验的yzj来说，这确实是一个值得一提的挑战。这也提醒了yzj，还是要注意项目经验的积累。</p>
<p>据yzj表示，当他点击了邮箱界面那个小小的【发送】按钮，只觉得浑身的负担一扫而空。他几乎在一瞬间就忘掉了发现自己没办法实现大作业其他要求时的懊恼。这也让他有点想到，让自己这么多天熬夜和自闭的压力究竟来自于哪里。</p>
<p>一身轻后，yzj还是没有什么睡意，于是打开了一个文档，想记录一下自己的心情。yzj刚选上课时，这门课的老师就曾提醒过大家，这门课比较难，需要付出更多的努力，也随之能够获得更多的收获。在上课的过程中，yzj的确感受到了这门课老师想要传道授业的苦心。他一遍又一遍地向大家阐述道：“数学是美的，学数学是探寻美发现美的过程，而非死记硬背的过程。”然而奈何yzj愚且鲁，不能体会到所谓的数学之美。但在做这门大作业的过程中yzj确实学到了很多知识。有了一个代码量合适的可以训练自己 C++ programing language 的机会，也了解了一些和编译器知识，可以和更底层的东西打交道。也被老师安利了linux系统并被深深吸引（linux ubuntu真的超级赞，都去试！）。然而学到这么多东西的过程却并非是在课程中，而是在自己独自做大作业的过程中。这个老师的角色更像是一个鞭策者，用一门有些超纲的大作业促使yzj继续学下去。嗯，其实也有榜样的作用，对yzj来说，这个老师身上的认真，和他对待自己热爱的东西时的态度简直自带光环。</p>
<p><img src="https://res.cloudinary.com/dwy9slegd/image/upload/v1631114183/image-20210908211520814_reitge.png"></p>
<p>约凌晨四点，同样选了这个老师课的室友也完成了自己的大作业。他拍了拍yzj的肩头，轻轻说了声：“我先睡了。”yzj点了点头。看了看窗外，已经有点微曦的晨光了。黎明静悄悄的，只有偶尔传来的极轻微的鸟鸣。</p>
<p>又是新的一天了。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>informal essay</tag>
      </tags>
  </entry>
  <entry>
    <title>链接器查找范围</title>
    <url>/2021/07/08/lian-jie-qi-cha-zhao-fan-wei/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="解决Visual-Studio的-LNK2019-和-LNK1120-错误"><a href="#解决Visual-Studio的-LNK2019-和-LNK1120-错误" class="headerlink" title="解决Visual Studio的 LNK2019 和 LNK1120 错误"></a>解决Visual Studio的 LNK2019 和 LNK1120 错误</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>写了一个 text searching 的代码。该代码设计了数个类，并有一个 interface class 通过指向 base class 的 shared_ptr 通过 dynamic binding 来运行。然而结构设计的不是特别好，这也就导致我遇到了下面的问题：</p>
<span id="more"></span>

<blockquote>
<p>interface class header file：</p>
<pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
<blockquote>
<p>interface class source file</p>
<pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult <span class="token operator">&amp;</span>query<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// details</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
<blockquote>
<p>base class header file, which is included by interface class header file</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QueryResult</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//下面的语句是错误来源</span>
        <span class="token keyword">friend</span> <span class="token keyword">inline</span> std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//details</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
<p>接着在尝试运行时就发现了 <a href="https://docs.microsoft.com/zh-cn/cpp/error-messages/tool-errors/linker-tools-error-lnk2019?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(LNK2019)&rd=true&view=msvc-160">LNK2019</a> 和 <a href="https://docs.microsoft.com/zh-cn/cpp/error-messages/tool-errors/linker-tools-error-lnk1120?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(LNK1120)&rd=true&view=msvc-160">LNK1120</a> 错误。以下为错误描述：</p>
<blockquote>
<p>无法解析的外部符号 “class std::basic_ostream&lt;char,struct std::char_traits<char> &gt; &amp; __cdecl operator&lt;&lt;(class std::basic_ostream&lt;char,struct std::char_traits<char> &gt; &amp;,class QueryResult const &amp;)” (??6@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@std@@AEAV01@AEBVQueryResult@@@Z)，函数 main 中引用了该符号</char></char></p>
</blockquote>
<h2 id="尝试分析"><a href="#尝试分析" class="headerlink" title="尝试分析"></a>尝试分析</h2><p>根据错误描述，可以锁定错误出自上面的第一行代码。Visual Studio给出的错误是无法解析，这样一个错误描述有些宽泛，放到 dev cpp 里就会好得多，它的错误提示长下面这样子：</p>
<blockquote>
<p>[警告] inline 函数 ‘std::ostream&amp; 运算符&lt;&lt;(std::ostream&amp;, const QueryResult&amp;)’ used but never defined</p>
</blockquote>
<p>然而我一开始并没有用 dev ，而是自己看 web 调了半天，还找了我的两个同学帮我看了一下。他们的解决方案是把 source file 给 include 进来（这也让我有点吃惊，为什么大二的计科同学会没有 package 的概念）。这样的方案我显然没办法满意，我无法理解，为什么编译器会找不到一个已经 declaration 并且 defining 的函数。出于这种疑惑，我友善地提醒了一下编译器——产生了我的第一个解决方案：</p>
<blockquote>
<p>interface class header file：</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">extern</span> std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
<p>不得不说vs的 MSVC 编译器是真的强大，加个 extern 就能联想到同名的inline函数。如果我没有写这个blog的话，我也许会沾沾自喜于这个解决方案并且依然想破头皮都想不明白为什么会出现这种错误。直到我为了验证这个错误用 dev 上又跑了一遍。我的 dev 编译器是 g++ （版本我也不是很清楚，小白都是一键装环境的），没有这么智能，很实诚地提醒了我。由于 <code>operator&lt;&lt;</code> 函数需要调用 QueryResult object 的 members ，再加上这个函数最开始是在base_Query.h 里 declaration 的，且我的 Query.h has included the base_Query.h，所以编译器找到了 inline 版本的 declaration ，而很不幸，这个函数我没有定义。于是，我得到了第二个解决方案：</p>
<blockquote>
<p>base class header file, which is included by interface class header file</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QueryResult</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//该文件前面的 declaration 也要改</span>
        <span class="token keyword">friend</span> std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//details</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</blockquote>
<p>顺便提一下我的下一个问题：为什么我会在 base_Query.h 里加上 inline 并且在后面的文件里忘记呢？</p>
<p>此事说来话长。我的C++是从《C++ Primer》入门的。在这本书里， Lippman 很细致地讲述了 inline 的作用（也就是没啥作用），但他的示例代码里还是会习惯性地带上 inline ，这个习惯也影响到了我。事实上，我原来的 source file 里全部加了 inline declaration ，这使得我一开始遇到的错误比现在多得多——也同样因为这个原因，我只有将 interface class source file 也 include 进来才能工作。后来一个同学在 STFW （Searching The Fucking Web）后告诉我分离式编程不能使用 inline 。然后这个函数是唯一一个声明了两次的函数，所以被我忘记了（笑）。</p>
<p>关于为什么分离式编程不能使用inline可以看<a href="https://www.cnblogs.com/GodA/p/6554591.html">这里</a>，这个作者讲得非常细致。也希望我有一天能够变成这样的内容输出者。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>coding过程中踩过的坑</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>debug</tag>
      </tags>
  </entry>
</search>
