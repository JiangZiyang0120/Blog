{"title":"LeetCode 1687. Delivering Boxes from Storage to Ports","uid":"f48f8a0014b621da7580e4b43233d5f7","slug":"1687. Delivering Boxes from Storage to Ports","date":"2022-09-02T02:31:00.000Z","updated":"2022-09-02T14:22:00.000Z","comments":true,"path":"api/articles/1687. Delivering Boxes from Storage to Ports.json","keywords":null,"cover":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"problem-discription\">Problem Discription</h2>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">limit</span><span class=\"token punctuation\">**</span></span> on the <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">number of boxes</span><span class=\"token punctuation\">**</span></span> and the <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">total weight</span><span class=\"token punctuation\">**</span></span> that it can carry.\n\nYou are given an array <span class=\"token code-snippet code keyword\">`boxes`</span>, where <span class=\"token code-snippet code keyword\">`boxes[i] = [ports​​i​, weighti]`</span>, and three integers <span class=\"token code-snippet code keyword\">`portsCount`</span>, <span class=\"token code-snippet code keyword\">`maxBoxes`</span>, and <span class=\"token code-snippet code keyword\">`maxWeight`</span>.\n\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`ports​​i`</span> is the port where you need to deliver the <span class=\"token code-snippet code keyword\">`ith`</span> box and <span class=\"token code-snippet code keyword\">`weightsi`</span> is the weight of the <span class=\"token code-snippet code keyword\">`ith`</span> box.\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`portsCount`</span> is the number of ports.\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`maxBoxes`</span> and <span class=\"token code-snippet code keyword\">`maxWeight`</span> are the respective box and weight limits of the ship.\n\nThe boxes need to be delivered <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">in the order they are given</span><span class=\"token punctuation\">**</span></span>. The ship will follow these steps:\n\n<span class=\"token list punctuation\">-</span> The ship will take some number of boxes from the <span class=\"token code-snippet code keyword\">`boxes`</span> queue, not violating the <span class=\"token code-snippet code keyword\">`maxBoxes`</span> and <span class=\"token code-snippet code keyword\">`maxWeight`</span> constraints.\n<span class=\"token list punctuation\">-</span> For each loaded box <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">in order</span><span class=\"token punctuation\">**</span></span>, the ship will make a <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">trip</span><span class=\"token punctuation\">**</span></span> to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">trip</span><span class=\"token punctuation\">**</span></span> is needed, and the box can immediately be delivered.\n<span class=\"token list punctuation\">-</span> The ship then makes a return <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">trip</span><span class=\"token punctuation\">**</span></span> to storage to take more boxes from the queue.\n\nThe ship must end at storage after all the boxes have been delivered.\n\nReturn <span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">the <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">minimum</span><span class=\"token punctuation\">**</span></span> number of <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">trips</span><span class=\"token punctuation\">**</span></span> the ship needs to make to deliver all boxes to their respective ports.</span><span class=\"token punctuation\">*</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Example 1:</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Input:</span><span class=\"token punctuation\">**</span></span> boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Output:</span><span class=\"token punctuation\">**</span></span> 4\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Explanation:</span><span class=\"token punctuation\">**</span></span> The optimal strategy is as follows:\n\n<span class=\"token list punctuation\">-</span> The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\n\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Example 2:</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Input:</span><span class=\"token punctuation\">**</span></span> boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Output:</span><span class=\"token punctuation\">**</span></span> 6\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Explanation:</span><span class=\"token punctuation\">**</span></span> The optimal strategy is as follows:\n\n<span class=\"token list punctuation\">-</span> The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n<span class=\"token list punctuation\">-</span> The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n<span class=\"token list punctuation\">-</span> The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.\n\nSo the total number of trips is 2 + 2 + 2 = 6.\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Example 3:</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Input:</span><span class=\"token punctuation\">**</span></span> boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Output:</span><span class=\"token punctuation\">**</span></span> 6\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Explanation:</span><span class=\"token punctuation\">**</span></span> The optimal strategy is as follows:\n\n<span class=\"token list punctuation\">-</span> The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n<span class=\"token list punctuation\">-</span> The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n<span class=\"token list punctuation\">-</span> The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\n\nSo the total number of trips is 2 + 2 + 2 = 6.\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">Constraints:</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`1 &lt;= boxes.length &lt;= 105`</span>\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`1 &lt;= portsCount, maxBoxes, maxWeight &lt;= 105`</span>\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`1 &lt;= ports​​i &lt;= portsCount`</span>\n<span class=\"token list punctuation\">-</span> <span class=\"token code-snippet code keyword\">`1 &lt;= weightsi &lt;= maxWeight`</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"analyse\">Analyse</h2>\n<p>As the dynamic programming solution’s max time complexity is <img src=\"https://math.now.sh?inline=%5Ctext%20O%28n%5E2%29\" style=\"display:inline-block;margin: 0;\">. We could simply get the first solution:<br>\nThis Code comes from <a href=\"https://leetcode.com/linshan007/\">linshan077</a>. And it is almost the best implement of DP. Where the trip assist to decline the cost of repeatedly judging <code>boxes[j][0] == boxes[j-1][0]</code> and <code>dp</code> is the common implement of dynamic programming.</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution1 &#123;\npublic:\n    int boxDelivering(vector&lt;vector&lt;int&gt;&gt;&amp; boxes, int portsCount, int maxBoxes, int maxWeight) &#123;\n        vector&lt;int&gt; trips(boxes.size());\n        trips[0] &#x3D; 0;\n        for (int i &#x3D; 1; i &lt; boxes.size(); ++i) &#123;\n            if (boxes[i][0] &#x3D;&#x3D; boxes[i-1][0]) &#123;\n                trips[i] &#x3D; trips[i-1];\n            &#125; else &#123;\n                trips[i] &#x3D; trips[i-1]+1;\n            &#125;\n        &#125;\n        &#x2F;&#x2F; dp[i+1] is minimum trips assuming i is the last box to deliver and will return to port afterwards. \n        vector&lt;int&gt; dp(boxes.size()+1);\n        dp[0] &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; boxes.size(); ++i) &#123;\n            dp[i+1] &#x3D; INT_MAX;\n            int sum_weights &#x3D; 0;\n            for (int j &#x3D; i; j&gt;&#x3D;0 &amp;&amp; i-j+1 &lt;&#x3D; maxBoxes; --j) &#123;\n                sum_weights +&#x3D; boxes[j][1];\n                if (sum_weights &gt; maxWeight) break;\n                dp[i+1] &#x3D; std::min(dp[i+1], dp[j]+2+trips[i]-trips[j]);\n            &#125;\n        &#125;\n        return dp.back();\n    &#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>However, it got a TLE.  And we translate<code>min(dp[j]+2+trips[i]-trips[j])</code> into <code>2+trips[i]+min(dp[j]-trips[j])</code>. It turns to a question: find the minimum in a Slide window(Which we can easily solve by a deque with total time complexity <img src=\"https://math.now.sh?inline=%5Ctext%20O%28n%29\" style=\"display:inline-block;margin: 0;\">).</p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">class Solution2 &#123;\npublic:\n    int boxDelivering(vector&lt;vector&lt;int&gt;&gt;&amp; boxes, int portsCount, int maxBoxes, int maxWeight) &#123;\n        vector&lt;int&gt; trips(boxes.size());\n        trips[0] &#x3D; 0;\n        for (int i &#x3D; 1; i &lt; boxes.size(); ++i) &#123;\n            if (boxes[i][0] &#x3D;&#x3D; boxes[i-1][0]) &#123;\n                trips[i] &#x3D; trips[i-1];\n            &#125; else &#123;\n                trips[i] &#x3D; trips[i-1]+1;\n            &#125;\n        &#125;\n        vector&lt;long int&gt; weights(boxes.size()+1);\n        weights[0] &#x3D; 0;\n        for (int i &#x3D; 0; i &lt; boxes.size(); ++i) &#123;\n            weights[i+1] &#x3D; weights[i]+boxes[i][1];\n        &#125;\n        vector&lt;int&gt; dp(boxes.size()+1);\n        dp[0] &#x3D; 0;\n        vector&lt;long&gt; weight(boxes.size()+1);\n        weight[0] &#x3D; 0;\n        for(int i &#x3D; 1; i !&#x3D; boxes.size()+1; ++i)\n            weight[i] &#x3D; weight[i-1] + boxes[i-1][1];\n        deque&lt;pair&lt;int,int&gt;&gt; dq;\n        int temp, totalWeight, totalBoxes;\n        int j &#x3D; 0;\n        dq.push_back(&#123;0,dp[0] - trips[0]&#125;);\n        dp[1] &#x3D; 2 + trips[0] + dq.front().second;\n        for (int i &#x3D; 1; i &lt; boxes.size(); ++i) &#123;\n            temp &#x3D; dp[i] - trips[i];\n            while (!dq.empty() &amp;&amp; dq.back().second &gt; temp)\n                dq.pop_back();\n            dq.push_back(&#123;i,temp&#125;);\n            totalWeight &#x3D; weight[i+1] - weight[j];\n            totalBoxes &#x3D; i - j + 1;\n            while (totalWeight &gt; maxWeight || totalBoxes &gt; maxBoxes)&#123;\n                dq.pop_front();\n                j &#x3D; dq.front().first;\n                totalWeight &#x3D; weight[i+1] - weight[j];\n                totalBoxes &#x3D; i - j + 1;\n            &#125;\n            dp[i+1] &#x3D; 2 + trips[i] + dq.front().second;\n        &#125;\n        return dp.back();\n    &#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>The above code deducts the cost of  repetitive calculation of <code>dp[i+1] = std::min(dp[i+1], dp[j]+2+trips[i]-trips[j])</code> And turns <img src=\"https://math.now.sh?inline=%5Ctext%20O%28mn%29\" style=\"display:inline-block;margin: 0;\">(where m is the maxBoxes) into <img src=\"https://math.now.sh?inline=%5Ctext%20O%28n%29%20%2B%20%5Ctext%20O(n)%20%3D%20%5Ctext%20O(n)\" style=\"display:inline-block;margin: 0;\">.</p>\n<h2 id=\"reference\">Reference</h2>\n<ol>\n<li><a href=\"https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/discuss/1369248/C%2B%2B-DP-solution-with-thinking-process%3A-brute-force-greater-priority-queue-greater-mono-queue\">C++ DP solution with thinking process: brute force -&gt; priority queue -&gt; mono queue</a></li>\n<li><a href=\"https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/discuss/2330389/Java-or-From-O(N2)-to-O(N)-or-MonoQueue-w-DP\">Java | From O(N^2) to O(N) | MonoQueue w/ DP</a></li>\n</ol>\n","feature":true,"text":"Problem Discription You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a **l...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"技术笔记","slug":"技术笔记","count":6,"path":"api/categories/技术笔记.json"},{"name":"LeetCode笔记","slug":"技术笔记/LeetCode笔记","count":1,"path":"api/categories/技术笔记/LeetCode笔记.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/tags/LeetCode.json"},{"name":"Algorithms","slug":"Algorithms","count":1,"path":"api/tags/Algorithms.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#problem-discription\"><span class=\"toc-text\">Problem Discription</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#analyse\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference</span></a></li></ol>","author":{"name":"江子扬","slug":"blog-author","avatar":"https://res.cloudinary.com/dwy9slegd/image/upload/v1662327765/66617421_abqsge.jpg","link":"/","description":"我的肩上是风，风上是闪烁的星群","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"历周记(2022-08-29 - 2022-09-04)","uid":"7e093a8e50485e842129235757e0a627","slug":"2022-W35","date":"2022-09-04T16:26:00.000Z","updated":"2022-09-04T17:20:00.000Z","comments":true,"path":"api/articles/2022-W35.json","keywords":null,"cover":null,"text":"这是我在博客上写的第一篇周记，希望能用周记的形式来记录自己的生活和一些感悟。也能用输出倒逼输入的方式让自己去更多地涉猎一些内容。我始终觉得文理科并不是人生必须二选一的选项，一个程序工程师同样需要人文情怀和人文素养，才能更好地开发出吸引和满足他人诉求的产品。 我在上一周，乃至过去的...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"随笔","slug":"随笔","count":2,"path":"api/categories/随笔.json"},{"name":"周记","slug":"随笔/周记","count":1,"path":"api/categories/随笔/周记.json"}],"tags":[{"name":"weekly journal","slug":"weekly-journal","count":1,"path":"api/tags/weekly-journal.json"}],"author":{"name":"江子扬","slug":"blog-author","avatar":"https://res.cloudinary.com/dwy9slegd/image/upload/v1662327765/66617421_abqsge.jpg","link":"/","description":"我的肩上是风，风上是闪烁的星群","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"C++的 0/3/5 规则","uid":"075d1c2c16c349b3d7fc2304f4fb4b22","slug":"C++_0_3_5_rule","date":"2022-08-30T10:23:00.000Z","updated":"2022-08-30T11:26:00.000Z","comments":true,"path":"api/articles/C++_0_3_5_rule.json","keywords":null,"cover":[],"text":" 编程三大错觉： 我比编译器聪明 我超越了标准库 我能管好内存 问题描述 由于最近在看《算导》，我就萌生了实现算导的想法。之前实现的线表List.h文件一直稳定运作，但在经历了单元测试并稳定运行数天后，当我将它应用到我的新代码部分时，出现了一个bug。 我的代码文件如下： Lis...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"技术笔记","slug":"技术笔记","count":6,"path":"api/categories/技术笔记.json"},{"name":"coding过程中踩过的坑","slug":"技术笔记/coding过程中踩过的坑","count":2,"path":"api/categories/技术笔记/coding过程中踩过的坑.json"}],"tags":[{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"debug","slug":"debug","count":2,"path":"api/tags/debug.json"}],"author":{"name":"江子扬","slug":"blog-author","avatar":"https://res.cloudinary.com/dwy9slegd/image/upload/v1662327765/66617421_abqsge.jpg","link":"/","description":"我的肩上是风，风上是闪烁的星群","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}